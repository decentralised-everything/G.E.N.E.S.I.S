{"id":"../../node_modules/lodash/_compareMultiple.js","dependencies":[{"name":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/package.json","includedInParent":true,"mtime":1616006581122},{"name":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/.babelrc","includedInParent":true,"mtime":1615911566978},{"name":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/node_modules/lodash/package.json","includedInParent":true,"mtime":1615833783033},{"name":"./_compareAscending","loc":{"line":1,"column":31},"parent":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/node_modules/lodash/_compareMultiple.js","resolved":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/node_modules/lodash/_compareAscending.js"}],"generated":{"js":"var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/lodash/_compareMultiple.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}}],"sources":{"../../node_modules/lodash/_compareMultiple.js":"var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n"},"lineCount":45}},"error":null,"hash":"aa5fc3070a643165cd13b56c8cabf7a6","cacheData":{"env":{}}}