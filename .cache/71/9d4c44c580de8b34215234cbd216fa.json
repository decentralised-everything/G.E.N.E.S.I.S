{"id":"../../node_modules/babylon/lib/index.js","dependencies":[{"name":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/package.json","includedInParent":true,"mtime":1616006581122},{"name":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/.babelrc","includedInParent":true,"mtime":1615911566978},{"name":"/media/rishabh/OS/Users/Rishabh Barnwal/Desktop/JS/G.E.N.E.S.I.S/node_modules/babylon/package.json","includedInParent":true,"mtime":1615895468282}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint max-len: 0 */\n\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\nfunction makePredicate(words) {\n  words = words.split(\" \");\n  return function (str) {\n    return words.indexOf(str) >= 0;\n  };\n}\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  6: makePredicate(\"enum await\"),\n  strict: makePredicate(\"implements interface let package private protected public static yield\"),\n  strictBind: makePredicate(\"eval arguments\")\n};\n\n// And the keywords\n\nvar isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super\");\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA900-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `bin/generate-identifier-regex.js`.\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n// A second optional argument can be given to further configure\nvar defaultOptions = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var key in defaultOptions) {\n    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nvar KeywordTokenType = function (_TokenType) {\n  inherits(KeywordTokenType, _TokenType);\n\n  function KeywordTokenType(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, KeywordTokenType);\n\n    options.keyword = name;\n\n    return possibleConstructorReturn(this, _TokenType.call(this, name, options));\n  }\n\n  return KeywordTokenType;\n}(TokenType);\n\nvar BinopTokenType = function (_TokenType2) {\n  inherits(BinopTokenType, _TokenType2);\n\n  function BinopTokenType(name, prec) {\n    classCallCheck(this, BinopTokenType);\n    return possibleConstructorReturn(this, _TokenType2.call(this, name, { beforeExpr: beforeExpr, binop: prec }));\n  }\n\n  return BinopTokenType;\n}(TokenType);\n\nvar types = {\n  num: new TokenType(\"num\", { startsExpr: startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr: startsExpr }),\n  string: new TokenType(\"string\", { startsExpr: startsExpr }),\n  name: new TokenType(\"name\", { startsExpr: startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr: beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr: beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr: beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr: beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr: beforeExpr }),\n  arrow: new TokenType(\"=>\", { beforeExpr: beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr: beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr: startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  at: new TokenType(\"@\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: beforeExpr, isAssign: isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr: beforeExpr, isAssign: isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix: prefix, postfix: postfix, startsExpr: startsExpr }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  logicalOR: new BinopTokenType(\"||\", 1),\n  logicalAND: new BinopTokenType(\"&&\", 2),\n  bitwiseOR: new BinopTokenType(\"|\", 3),\n  bitwiseXOR: new BinopTokenType(\"^\", 4),\n  bitwiseAND: new BinopTokenType(\"&\", 5),\n  equality: new BinopTokenType(\"==/!=\", 6),\n  relational: new BinopTokenType(\"</>\", 7),\n  bitShift: new BinopTokenType(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: beforeExpr, binop: 9, prefix: prefix, startsExpr: startsExpr }),\n  modulo: new BinopTokenType(\"%\", 10),\n  star: new BinopTokenType(\"*\", 10),\n  slash: new BinopTokenType(\"/\", 10),\n  exponent: new TokenType(\"**\", { beforeExpr: beforeExpr, binop: 11, rightAssociative: true })\n};\n\nvar keywords = {\n  \"break\": new KeywordTokenType(\"break\"),\n  \"case\": new KeywordTokenType(\"case\", { beforeExpr: beforeExpr }),\n  \"catch\": new KeywordTokenType(\"catch\"),\n  \"continue\": new KeywordTokenType(\"continue\"),\n  \"debugger\": new KeywordTokenType(\"debugger\"),\n  \"default\": new KeywordTokenType(\"default\", { beforeExpr: beforeExpr }),\n  \"do\": new KeywordTokenType(\"do\", { isLoop: isLoop, beforeExpr: beforeExpr }),\n  \"else\": new KeywordTokenType(\"else\", { beforeExpr: beforeExpr }),\n  \"finally\": new KeywordTokenType(\"finally\"),\n  \"for\": new KeywordTokenType(\"for\", { isLoop: isLoop }),\n  \"function\": new KeywordTokenType(\"function\", { startsExpr: startsExpr }),\n  \"if\": new KeywordTokenType(\"if\"),\n  \"return\": new KeywordTokenType(\"return\", { beforeExpr: beforeExpr }),\n  \"switch\": new KeywordTokenType(\"switch\"),\n  \"throw\": new KeywordTokenType(\"throw\", { beforeExpr: beforeExpr }),\n  \"try\": new KeywordTokenType(\"try\"),\n  \"var\": new KeywordTokenType(\"var\"),\n  \"let\": new KeywordTokenType(\"let\"),\n  \"const\": new KeywordTokenType(\"const\"),\n  \"while\": new KeywordTokenType(\"while\", { isLoop: isLoop }),\n  \"with\": new KeywordTokenType(\"with\"),\n  \"new\": new KeywordTokenType(\"new\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  \"this\": new KeywordTokenType(\"this\", { startsExpr: startsExpr }),\n  \"super\": new KeywordTokenType(\"super\", { startsExpr: startsExpr }),\n  \"class\": new KeywordTokenType(\"class\"),\n  \"extends\": new KeywordTokenType(\"extends\", { beforeExpr: beforeExpr }),\n  \"export\": new KeywordTokenType(\"export\"),\n  \"import\": new KeywordTokenType(\"import\", { startsExpr: startsExpr }),\n  \"yield\": new KeywordTokenType(\"yield\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  \"null\": new KeywordTokenType(\"null\", { startsExpr: startsExpr }),\n  \"true\": new KeywordTokenType(\"true\", { startsExpr: startsExpr }),\n  \"false\": new KeywordTokenType(\"false\", { startsExpr: startsExpr }),\n  \"in\": new KeywordTokenType(\"in\", { beforeExpr: beforeExpr, binop: 7 }),\n  \"instanceof\": new KeywordTokenType(\"instanceof\", { beforeExpr: beforeExpr, binop: 7 }),\n  \"typeof\": new KeywordTokenType(\"typeof\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  \"void\": new KeywordTokenType(\"void\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  \"delete\": new KeywordTokenType(\"delete\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr })\n};\n\n// Map keyword names to token types.\nObject.keys(keywords).forEach(function (name) {\n  types[\"_\" + name] = keywords[name];\n});\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nvar types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", true),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  functionExpression: new TokContext(\"function\", true)\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  var out = this.state.context.pop();\n  if (out === types$1.braceStatement && this.curContext() === types$1.functionExpression) {\n    this.state.context.pop();\n    this.state.exprAllowed = false;\n  } else if (out === types$1.templateQuasi) {\n    this.state.exprAllowed = true;\n  } else {\n    this.state.exprAllowed = !out.isExpr;\n  }\n};\n\ntypes.name.updateContext = function (prevType) {\n  this.state.exprAllowed = false;\n\n  if (prevType === types._let || prevType === types._const || prevType === types._var) {\n    if (lineBreak.test(this.input.slice(this.state.end))) {\n      this.state.exprAllowed = true;\n    }\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = function () {\n  if (this.curContext() !== types$1.braceStatement) {\n    this.state.context.push(types$1.functionExpression);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n  this.state.exprAllowed = false;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  classCallCheck(this, Position);\n\n  this.line = line;\n  this.column = col;\n};\n\nvar SourceLocation = function SourceLocation(start, end) {\n  classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\nvar State = function () {\n  function State() {\n    classCallCheck(this, State);\n  }\n\n  State.prototype.init = function init(options, input) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.input = input;\n\n    this.potentialArrowAt = -1;\n\n    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = this.inPropertyName = this.inType = this.inClassProperty = this.noAnonFunctionType = false;\n\n    this.labels = [];\n\n    this.decorators = [];\n\n    this.tokens = [];\n\n    this.comments = [];\n\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n\n    this.pos = this.lineStart = 0;\n    this.curLine = options.startLine;\n\n    this.type = types.eof;\n    this.value = null;\n    this.start = this.end = this.pos;\n    this.startLoc = this.endLoc = this.curPosition();\n\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n\n    this.containsEsc = this.containsOctal = false;\n    this.octalPosition = null;\n\n    this.invalidTemplateEscapePosition = null;\n\n    this.exportedIdentifiers = [];\n\n    return this;\n  };\n\n  // TODO\n\n\n  // TODO\n\n\n  // Used to signify the start of a potential arrow function\n\n\n  // Flags to track whether we are in a function, a generator.\n\n\n  // Labels in scope.\n\n\n  // Leading decorators.\n\n\n  // Token store.\n\n\n  // Comment store.\n\n\n  // Comment attachment store\n\n\n  // The current position of the tokenizer in the input.\n\n\n  // Properties of the current token:\n  // Its type\n\n\n  // For tokens that include more information than their type, the value\n\n\n  // Its start and end offset\n\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n\n\n  // Position information for the previous token\n\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n\n\n  // TODO\n\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n\n\n  State.prototype.curPosition = function curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  };\n\n  State.prototype.clone = function clone(skipArrays) {\n    var state = new State();\n    for (var key in this) {\n      var val = this[key];\n\n      if ((!skipArrays || key === \"context\") && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n    return state;\n  };\n\n  return State;\n}();\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(state) {\n  classCallCheck(this, Token);\n\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\n// ## Tokenizer\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  } else {\n    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);\n  }\n}\n\nvar Tokenizer = function () {\n  function Tokenizer(options, input) {\n    classCallCheck(this, Tokenizer);\n\n    this.state = new State();\n    this.state.init(options, input);\n  }\n\n  // Move to the next token\n\n  Tokenizer.prototype.next = function next() {\n    if (!this.isLookahead) {\n      this.state.tokens.push(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  };\n\n  // TODO\n\n  Tokenizer.prototype.eat = function eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // TODO\n\n  Tokenizer.prototype.match = function match(type) {\n    return this.state.type === type;\n  };\n\n  // TODO\n\n  Tokenizer.prototype.isKeyword = function isKeyword$$1(word) {\n    return isKeyword(word);\n  };\n\n  // TODO\n\n  Tokenizer.prototype.lookahead = function lookahead() {\n    var old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    var curr = this.state.clone(true);\n    this.state = old;\n    return curr;\n  };\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  Tokenizer.prototype.setStrict = function setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  };\n\n  Tokenizer.prototype.curContext = function curContext() {\n    return this.state.context[this.state.context.length - 1];\n  };\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  Tokenizer.prototype.nextToken = function nextToken() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.input.length) return this.finishToken(types.eof);\n\n    if (curContext.override) {\n      return curContext.override(this);\n    } else {\n      return this.readToken(this.fullCharCodeAtPos());\n    }\n  };\n\n  Tokenizer.prototype.readToken = function readToken(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code) || code === 92 /* '\\' */) {\n        return this.readWord();\n      } else {\n      return this.getTokenFromCode(code);\n    }\n  };\n\n  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {\n    var code = this.input.charCodeAt(this.state.pos);\n    if (code <= 0xd7ff || code >= 0xe000) return code;\n\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    return (code << 10) + next - 0x35fdc00;\n  };\n\n  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n\n    if (!this.isLookahead) {\n      this.state.tokens.push(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  };\n\n  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {\n    var startLoc = this.state.curPosition();\n    var start = this.state.pos;\n    var end = this.input.indexOf(\"*/\", this.state.pos += 2);\n    if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    var match = void 0;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {\n    var start = this.state.pos;\n    var startLoc = this.state.curPosition();\n    var ch = this.input.charCodeAt(this.state.pos += startSkip);\n    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this.state.pos;\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  Tokenizer.prototype.skipSpace = function skipSpace() {\n    loop: while (this.state.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:case 160:\n          // ' '\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:case 8232:case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          // '/'\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              // '*'\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  Tokenizer.prototype.finishToken = function finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    var prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n\n\n  Tokenizer.prototype.readToken_dot = function readToken_dot() {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      return this.readNumber(true);\n    }\n\n    var next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 46 && next2 === 46) {\n      // 46 = dot '.'\n      this.state.pos += 3;\n      return this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      return this.finishToken(types.dot);\n    }\n  };\n\n  Tokenizer.prototype.readToken_slash = function readToken_slash() {\n    // '/'\n    if (this.state.exprAllowed) {\n      ++this.state.pos;\n      return this.readRegexp();\n    }\n\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.slash, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {\n    // '%*'\n    var type = code === 42 ? types.star : types.modulo;\n    var width = 1;\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 42) {\n      // '*'\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61) {\n      width++;\n      type = types.assign;\n    }\n\n    return this.finishOp(type, width);\n  };\n\n  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {\n    // '|&'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n    if (next === 61) return this.finishOp(types.assign, 2);\n    if (code === 124 && next === 125 && this.hasPlugin(\"flow\")) return this.finishOp(types.braceBarR, 2);\n    return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  };\n\n  Tokenizer.prototype.readToken_caret = function readToken_caret() {\n    // '^'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.bitwiseXOR, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {\n    // '+-'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken();\n      }\n      return this.finishOp(types.incDec, 2);\n    }\n\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.plusMin, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {\n    // '<>'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    var size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(types.assign, size + 1);\n      return this.finishOp(types.bitShift, size);\n    }\n\n    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      if (this.inModule) this.unexpected();\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken();\n    }\n\n    if (next === 61) {\n      // <= | >=\n      size = 2;\n    }\n\n    return this.finishOp(types.relational, size);\n  };\n\n  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {\n    // '=!'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) return this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n    if (code === 61 && next === 62) {\n      // '=>'\n      this.state.pos += 2;\n      return this.finishToken(types.arrow);\n    }\n    return this.finishOp(code === 61 ? types.eq : types.prefix, 1);\n  };\n\n  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n      case 46:\n        // '.'\n        return this.readToken_dot();\n\n      // Punctuation tokens.\n      case 40:\n        ++this.state.pos;return this.finishToken(types.parenL);\n      case 41:\n        ++this.state.pos;return this.finishToken(types.parenR);\n      case 59:\n        ++this.state.pos;return this.finishToken(types.semi);\n      case 44:\n        ++this.state.pos;return this.finishToken(types.comma);\n      case 91:\n        ++this.state.pos;return this.finishToken(types.bracketL);\n      case 93:\n        ++this.state.pos;return this.finishToken(types.bracketR);\n\n      case 123:\n        if (this.hasPlugin(\"flow\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          return this.finishOp(types.braceBarL, 2);\n        } else {\n          ++this.state.pos;\n          return this.finishToken(types.braceL);\n        }\n\n      case 125:\n        ++this.state.pos;return this.finishToken(types.braceR);\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          return this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          return this.finishToken(types.colon);\n        }\n\n      case 63:\n        ++this.state.pos;return this.finishToken(types.question);\n      case 64:\n        ++this.state.pos;return this.finishToken(types.at);\n\n      case 96:\n        // '`'\n        ++this.state.pos;\n        return this.finishToken(types.backQuote);\n\n      case 48:\n        // '0'\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n        // 1-9\n        return this.readNumber(false);\n\n      // Quotes produce strings.\n      case 34:case 39:\n        // '\"', \"'\"\n        return this.readString(code);\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case 47:\n        // '/'\n        return this.readToken_slash();\n\n      case 37:case 42:\n        // '%*'\n        return this.readToken_mult_modulo(code);\n\n      case 124:case 38:\n        // '|&'\n        return this.readToken_pipe_amp(code);\n\n      case 94:\n        // '^'\n        return this.readToken_caret();\n\n      case 43:case 45:\n        // '+-'\n        return this.readToken_plus_min(code);\n\n      case 60:case 62:\n        // '<>'\n        return this.readToken_lt_gt(code);\n\n      case 61:case 33:\n        // '=!'\n        return this.readToken_eq_excl(code);\n\n      case 126:\n        // '~'\n        return this.finishOp(types.prefix, 1);\n    }\n\n    this.raise(this.state.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  Tokenizer.prototype.finishOp = function finishOp(type, size) {\n    var str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    return this.finishToken(type, str);\n  };\n\n  Tokenizer.prototype.readRegexp = function readRegexp() {\n    var start = this.state.pos;\n    var escaped = void 0,\n        inClass = void 0;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n      var ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    var content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1();\n    if (mods) {\n      var validFlags = /^[gmsiyu]*$/;\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    }\n    return this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  Tokenizer.prototype.readInt = function readInt(radix, len) {\n    var start = this.state.pos;\n    var total = 0;\n\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this.input.charCodeAt(this.state.pos);\n      var val = void 0;\n      if (code >= 97) {\n        val = code - 97 + 10; // a\n      } else if (code >= 65) {\n        val = code - 65 + 10; // A\n      } else if (code >= 48 && code <= 57) {\n        val = code - 48; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) break;\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;\n\n    return total;\n  };\n\n  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {\n    this.state.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, \"Identifier directly after number\");\n    return this.finishToken(types.num, val);\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {\n    var start = this.state.pos;\n    var octal = this.input.charCodeAt(start) === 48; // '0'\n    var isFloat = false;\n\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    if (octal && this.state.pos == start + 1) octal = false; // number === 0\n\n    var next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !octal) {\n      // '.'\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      // 'eE'\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) ++this.state.pos; // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n    }\n\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, \"Identifier directly after number\");\n\n    var str = this.input.slice(start, this.state.pos);\n    var val = void 0;\n    if (isFloat) {\n      val = parseFloat(str);\n    } else if (!octal || str.length === 1) {\n      val = parseInt(str, 10);\n    } else if (this.state.strict) {\n      this.raise(start, \"Invalid number\");\n    } else if (/[89]/.test(str)) {\n      val = parseInt(str, 10);\n    } else {\n      val = parseInt(str, 8);\n    }\n    return this.finishToken(types.num, val);\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  Tokenizer.prototype.readCodePoint = function readCodePoint(throwOnInvalid) {\n    var ch = this.input.charCodeAt(this.state.pos);\n    var code = void 0;\n\n    if (ch === 123) {\n      // '{'\n      var codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, throwOnInvalid);\n      ++this.state.pos;\n      if (code === null) {\n        --this.state.invalidTemplateEscapePosition; // to point to the '\\'' instead of the 'u'\n      } else if (code > 0x10FFFF) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, throwOnInvalid);\n    }\n    return code;\n  };\n\n  Tokenizer.prototype.readString = function readString(quote) {\n    var out = \"\",\n        chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(this.state.start, \"Unterminated string constant\");\n      var ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 92) {\n        // '\\'\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else {\n        if (isNewLine(ch)) this.raise(this.state.start, \"Unterminated string constant\");\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  };\n\n  // Reads template string tokens.\n\n  Tokenizer.prototype.readTmplToken = function readTmplToken() {\n    var out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(this.state.start, \"Unterminated template\");\n      var ch = this.input.charCodeAt(this.state.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        // '`', '${'\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            return this.finishToken(types.dollarBraceL);\n          } else {\n            ++this.state.pos;\n            return this.finishToken(types.backQuote);\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        return this.finishToken(types.template, containsInvalid ? null : out);\n      }\n      if (ch === 92) {\n        // '\\'\n        out += this.input.slice(chunkStart, this.state.pos);\n        var escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;\n          case 10:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  };\n\n  // Used to read escaped characters\n\n  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {\n    var throwOnInvalid = !inTemplate;\n    var ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case 110:\n        return \"\\n\"; // 'n' -> '\\n'\n      case 114:\n        return \"\\r\"; // 'r' -> '\\r'\n      case 120:\n        {\n          // 'x'\n          var code = this.readHexChar(2, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n      case 117:\n        {\n          // 'u'\n          var _code = this.readCodePoint(throwOnInvalid);\n          return _code === null ? null : codePointToString(_code);\n        }\n      case 116:\n        return \"\\t\"; // 't' -> '\\t'\n      case 98:\n        return \"\\b\"; // 'b' -> '\\b'\n      case 118:\n        return \"\\x0B\"; // 'v' -> '\\u000b'\n      case 102:\n        return \"\\f\"; // 'f' -> '\\f'\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\\r\\n'\n      case 10:\n        // ' \\n'\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n        return \"\";\n      default:\n        if (ch >= 48 && ch <= 55) {\n          var codePos = this.state.pos - 1;\n          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          var octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          if (octal > 0) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              // These properties are only used to throw an error for an octal which occurs\n              // in a directive which occurs prior to a \"use strict\" directive.\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n          this.state.pos += octalStr.length - 1;\n          return String.fromCharCode(octal);\n        }\n        return String.fromCharCode(ch);\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  Tokenizer.prototype.readHexChar = function readHexChar(len, throwOnInvalid) {\n    var codePos = this.state.pos;\n    var n = this.readInt(16, len);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n    return n;\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  Tokenizer.prototype.readWord1 = function readWord1() {\n    this.state.containsEsc = false;\n    var word = \"\",\n        first = true,\n        chunkStart = this.state.pos;\n    while (this.state.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        // \"\\\"\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        var escStart = this.state.pos;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          // \"u\"\n          this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        }\n\n        ++this.state.pos;\n        var esc = this.readCodePoint(true);\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, true)) {\n          this.raise(escStart, \"Invalid Unicode escape\");\n        }\n\n        word += codePointToString(esc);\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  Tokenizer.prototype.readWord = function readWord() {\n    var word = this.readWord1();\n    var type = types.name;\n    if (!this.state.containsEsc && this.isKeyword(word)) {\n      type = keywords[word];\n    }\n    return this.finishToken(type, word);\n  };\n\n  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {\n    if (prevType === types.colon) {\n      var parent = this.curContext();\n      if (parent === types$1.braceStatement || parent === types$1.braceExpression) {\n        return !parent.isExpr;\n      }\n    }\n\n    if (prevType === types._return) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return this.curContext() === types$1.braceStatement;\n    }\n\n    return !this.state.exprAllowed;\n  };\n\n  Tokenizer.prototype.updateContext = function updateContext(prevType) {\n    var type = this.state.type;\n    var update = void 0;\n\n    if (type.keyword && prevType === types.dot) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  };\n\n  return Tokenizer;\n}();\n\nvar plugins = {};\nvar frozenDeprecatedWildcardPluginList = [\"jsx\", \"doExpressions\", \"objectRestSpread\", \"decorators\", \"classProperties\", \"exportExtensions\", \"asyncGenerators\", \"functionBind\", \"functionSent\", \"dynamicImport\", \"flow\"];\n\nvar Parser = function (_Tokenizer) {\n  inherits(Parser, _Tokenizer);\n\n  function Parser(options, input) {\n    classCallCheck(this, Parser);\n\n    options = getOptions(options);\n\n    var _this = possibleConstructorReturn(this, _Tokenizer.call(this, options, input));\n\n    _this.options = options;\n    _this.inModule = _this.options.sourceType === \"module\";\n    _this.input = input;\n    _this.plugins = _this.loadPlugins(_this.options.plugins);\n    _this.filename = options.sourceFilename;\n\n    // If enabled, skip leading hashbang line.\n    if (_this.state.pos === 0 && _this.input[0] === \"#\" && _this.input[1] === \"!\") {\n      _this.skipLineComment(2);\n    }\n    return _this;\n  }\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    if (word === \"await\") {\n      return this.inModule;\n    } else {\n      return reservedWords[6](word);\n    }\n  };\n\n  Parser.prototype.hasPlugin = function hasPlugin(name) {\n    if (this.plugins[\"*\"] && frozenDeprecatedWildcardPluginList.indexOf(name) > -1) {\n      return true;\n    }\n\n    return !!this.plugins[name];\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadAllPlugins = function loadAllPlugins() {\n    var _this2 = this;\n\n    // ensure flow plugin loads last, also ensure estree is not loaded with *\n    var pluginNames = Object.keys(plugins).filter(function (name) {\n      return name !== \"flow\" && name !== \"estree\";\n    });\n    pluginNames.push(\"flow\");\n\n    pluginNames.forEach(function (name) {\n      var plugin = plugins[name];\n      if (plugin) plugin(_this2);\n    });\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginList) {\n    // TODO: Deprecate \"*\" option in next major version of Babylon\n    if (pluginList.indexOf(\"*\") >= 0) {\n      this.loadAllPlugins();\n\n      return { \"*\": true };\n    }\n\n    var pluginMap = {};\n\n    if (pluginList.indexOf(\"flow\") >= 0) {\n      // ensure flow plugin loads last\n      pluginList = pluginList.filter(function (plugin) {\n        return plugin !== \"flow\";\n      });\n      pluginList.push(\"flow\");\n    }\n\n    if (pluginList.indexOf(\"estree\") >= 0) {\n      // ensure estree plugin loads first\n      pluginList = pluginList.filter(function (plugin) {\n        return plugin !== \"estree\";\n      });\n      pluginList.unshift(\"estree\");\n    }\n\n    for (var _iterator = pluginList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var name = _ref;\n\n      if (!pluginMap[name]) {\n        pluginMap[name] = true;\n\n        var plugin = plugins[name];\n        if (plugin) plugin(this);\n      }\n    }\n\n    return pluginMap;\n  };\n\n  Parser.prototype.parse = function parse() {\n    var file = this.startNode();\n    var program = this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(file, program);\n  };\n\n  return Parser;\n}(Tokenizer);\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\n// TODO\n\npp.addExtra = function (node, key, val) {\n  if (!node) return;\n\n  var extra = node.extra = node.extra || {};\n  extra[key] = val;\n};\n\n// TODO\n\npp.isRelational = function (op) {\n  return this.match(types.relational) && this.state.value === op;\n};\n\n// TODO\n\npp.expectRelational = function (op) {\n  if (this.isRelational(op)) {\n    this.next();\n  } else {\n    this.unexpected(null, types.relational);\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.match(types.name) && this.state.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.state.value === name && this.eat(types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name, message) {\n  if (!this.eatContextual(name)) this.unexpected(null, message);\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.match(types.eof) || this.match(types.braceR) || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n};\n\n// TODO\n\npp.isLineTerminator = function () {\n  return this.eat(types.semi) || this.canInsertSemicolon();\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error at given pos.\n\npp.expect = function (type, pos) {\n  return this.eat(type) || this.unexpected(pos, type);\n};\n\n// Raise an unexpected token error. Can take the expected token type\n// instead of a message string.\n\npp.unexpected = function (pos) {\n  var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Unexpected token\";\n\n  if (messageOrType && (typeof messageOrType === \"undefined\" ? \"undefined\" : _typeof(messageOrType)) === \"object\" && messageOrType.label) {\n    messageOrType = \"Unexpected token, expected \" + messageOrType.label;\n  }\n  this.raise(pos != null ? pos : this.state.start, messageOrType);\n};\n\n/* eslint max-len: 0 */\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function (file, program) {\n  program.sourceType = this.options.sourceType;\n\n  this.parseBlockBody(program, true, true, types.eof);\n\n  file.program = this.finishNode(program, \"Program\");\n  file.comments = this.state.comments;\n  file.tokens = this.state.tokens;\n\n  return this.finishNode(file, \"File\");\n};\n\nvar loopLabel = { kind: \"loop\" };\nvar switchLabel = { kind: \"switch\" };\n\n// TODO\n\npp$1.stmtToDirective = function (stmt) {\n  var expr = stmt.expression;\n\n  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n  var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n  var raw = this.input.slice(expr.start, expr.end);\n  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes\n\n  this.addExtra(directiveLiteral, \"raw\", raw);\n  this.addExtra(directiveLiteral, \"rawValue\", val);\n\n  directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n\n  return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function (declaration, topLevel) {\n  if (this.match(types.at)) {\n    this.parseDecorators(true);\n  }\n\n  var starttype = this.state.type;\n  var node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case types._break:case types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case types._debugger:\n      return this.parseDebuggerStatement(node);\n    case types._do:\n      return this.parseDoStatement(node);\n    case types._for:\n      return this.parseForStatement(node);\n    case types._function:\n      if (!declaration) this.unexpected();\n      return this.parseFunctionStatement(node);\n\n    case types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n\n    case types._if:\n      return this.parseIfStatement(node);\n    case types._return:\n      return this.parseReturnStatement(node);\n    case types._switch:\n      return this.parseSwitchStatement(node);\n    case types._throw:\n      return this.parseThrowStatement(node);\n    case types._try:\n      return this.parseTryStatement(node);\n\n    case types._let:\n    case types._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n\n    case types._var:\n      return this.parseVarStatement(node, starttype);\n\n    case types._while:\n      return this.parseWhileStatement(node);\n    case types._with:\n      return this.parseWithStatement(node);\n    case types.braceL:\n      return this.parseBlock();\n    case types.semi:\n      return this.parseEmptyStatement(node);\n    case types._export:\n    case types._import:\n      if (this.hasPlugin(\"dynamicImport\") && this.lookahead().type === types.parenL) break;\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) {\n          this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n        }\n\n        if (!this.inModule) {\n          this.raise(this.state.start, \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\");\n        }\n      }\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node);\n\n    case types.name:\n      if (this.state.value === \"async\") {\n        // peek ahead and see if next token is a function\n        var state = this.state.clone();\n        this.next();\n        if (this.match(types._function) && !this.canInsertSemicolon()) {\n          this.expect(types._function);\n          return this.parseFunction(node, true, false, true);\n        } else {\n          this.state = state;\n        }\n      }\n  }\n\n  // If the statement does not start with a statement keyword or a\n  // brace, it's an ExpressionStatement or LabeledStatement. We\n  // simply start parsing an expression, and afterwards, if the\n  // next token is a colon and the expression was a simple\n  // Identifier node, we switch to interpreting it as a label.\n  var maybeName = this.state.value;\n  var expr = this.parseExpression();\n\n  if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n    return this.parseLabeledStatement(node, maybeName, expr);\n  } else {\n    return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp$1.takeDecorators = function (node) {\n  if (this.state.decorators.length) {\n    node.decorators = this.state.decorators;\n    this.state.decorators = [];\n  }\n};\n\npp$1.parseDecorators = function (allowExport) {\n  while (this.match(types.at)) {\n    var decorator = this.parseDecorator();\n    this.state.decorators.push(decorator);\n  }\n\n  if (allowExport && this.match(types._export)) {\n    return;\n  }\n\n  if (!this.match(types._class)) {\n    this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n  }\n};\n\npp$1.parseDecorator = function () {\n  if (!this.hasPlugin(\"decorators\")) {\n    this.unexpected();\n  }\n  var node = this.startNode();\n  this.next();\n  node.expression = this.parseMaybeAssign();\n  return this.finishNode(node, \"Decorator\");\n};\n\npp$1.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n\n  if (this.isLineTerminator()) {\n    node.label = null;\n  } else if (!this.match(types.name)) {\n    this.unexpected();\n  } else {\n    node.label = this.parseIdentifier();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = void 0;\n  for (i = 0; i < this.state.labels.length; ++i) {\n    var lab = this.state.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.state.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp$1.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp$1.parseDoStatement = function (node) {\n  this.next();\n  this.state.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  this.eat(types.semi);\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function (node) {\n  this.next();\n  this.state.labels.push(loopLabel);\n\n  var forAwait = false;\n  if (this.hasPlugin(\"asyncGenerators\") && this.state.inAsync && this.isContextual(\"await\")) {\n    forAwait = true;\n    this.next();\n  }\n  this.expect(types.parenL);\n\n  if (this.match(types.semi)) {\n    if (forAwait) {\n      this.unexpected();\n    }\n    return this.parseFor(node, null);\n  }\n\n  if (this.match(types._var) || this.match(types._let) || this.match(types._const)) {\n    var _init = this.startNode();\n    var varKind = this.state.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      if (_init.declarations.length === 1 && !_init.declarations[0].init) {\n        return this.parseForIn(node, _init, forAwait);\n      }\n    }\n    if (forAwait) {\n      this.unexpected();\n    }\n    return this.parseFor(node, _init);\n  }\n\n  var refShorthandDefaultPos = { start: 0 };\n  var init = this.parseExpression(true, refShorthandDefaultPos);\n  if (this.match(types._in) || this.isContextual(\"of\")) {\n    var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n    this.toAssignable(init, undefined, description);\n    this.checkLVal(init, undefined, undefined, description);\n    return this.parseForIn(node, init, forAwait);\n  } else if (refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n  if (forAwait) {\n    this.unexpected();\n  }\n  return this.parseFor(node, init);\n};\n\npp$1.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp$1.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp$1.parseReturnStatement = function (node) {\n  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {\n    this.raise(this.state.start, \"'return' outside of function\");\n  }\n\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.isLineTerminator()) {\n    node.argument = null;\n  } else {\n    node.argument = this.parseExpression();\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp$1.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.state.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur = void 0;\n  for (var sawDefault; !this.match(types.braceR);) {\n    if (this.match(types._case) || this.match(types._default)) {\n      var isCase = this.match(types._case);\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types.colon);\n    } else {\n      if (cur) {\n        cur.consequent.push(this.parseStatement(true));\n      } else {\n        this.unexpected();\n      }\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.state.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp$1.parseThrowStatement = function (node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function (node) {\n  this.next();\n\n  node.block = this.parseBlock();\n  node.handler = null;\n\n  if (this.match(types._catch)) {\n    var clause = this.startNode();\n    this.next();\n\n    this.expect(types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true, Object.create(null), \"catch clause\");\n    this.expect(types.parenR);\n\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n\n  node.guardedHandlers = empty;\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n  if (!node.handler && !node.finalizer) {\n    this.raise(node.start, \"Missing catch or finally clause\");\n  }\n\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp$1.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp$1.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.state.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp$1.parseWithStatement = function (node) {\n  if (this.state.strict) this.raise(this.state.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp$1.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp$1.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var _iterator = this.state.labels, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _label = _ref;\n\n    if (_label.name === maybeName) {\n      this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    }\n  }\n\n  var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n  for (var i = this.state.labels.length - 1; i >= 0; i--) {\n    var label = this.state.labels[i];\n    if (label.statementStart === node.start) {\n      label.statementStart = this.state.start;\n      label.kind = kind;\n    } else {\n      break;\n    }\n  }\n\n  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });\n  node.body = this.parseStatement(true);\n  this.state.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp$1.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function (allowDirectives) {\n  var node = this.startNode();\n  this.expect(types.braceL);\n  this.parseBlockBody(node, allowDirectives, false, types.braceR);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\npp$1.isValidDirective = function (stmt) {\n  return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n};\n\npp$1.parseBlockBody = function (node, allowDirectives, topLevel, end) {\n  node.body = [];\n  node.directives = [];\n\n  var parsedNonDirective = false;\n  var oldStrict = void 0;\n  var octalPosition = void 0;\n\n  while (!this.eat(end)) {\n    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n      octalPosition = this.state.octalPosition;\n    }\n\n    var stmt = this.parseStatement(true, topLevel);\n\n    if (allowDirectives && !parsedNonDirective && this.isValidDirective(stmt)) {\n      var directive = this.stmtToDirective(stmt);\n      node.directives.push(directive);\n\n      if (oldStrict === undefined && directive.value.value === \"use strict\") {\n        oldStrict = this.state.strict;\n        this.setStrict(true);\n\n        if (octalPosition) {\n          this.raise(octalPosition, \"Octal literal in strict mode\");\n        }\n      }\n\n      continue;\n    }\n\n    parsedNonDirective = true;\n    node.body.push(stmt);\n  }\n\n  if (oldStrict === false) {\n    this.setStrict(false);\n  }\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.match(types.semi) ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.match(types.parenR) ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function (node, init, forAwait) {\n  var type = void 0;\n  if (forAwait) {\n    this.eatContextual(\"of\");\n    type = \"ForAwaitStatement\";\n  } else {\n    type = this.match(types._in) ? \"ForInStatement\" : \"ForOfStatement\";\n    this.next();\n  }\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarHead(decl);\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === types._const && !(this.match(types._in) || this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n      this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types.comma)) break;\n  }\n  return node;\n};\n\npp$1.parseVarHead = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true, undefined, \"variable declaration\");\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {\n  var oldInMethod = this.state.inMethod;\n  this.state.inMethod = false;\n\n  this.initFunction(node, isAsync);\n\n  if (this.match(types.star)) {\n    if (node.async && !this.hasPlugin(\"asyncGenerators\")) {\n      this.unexpected();\n    } else {\n      node.generator = true;\n      this.next();\n    }\n  }\n\n  if (isStatement && !optionalId && !this.match(types.name) && !this.match(types._yield)) {\n    this.unexpected();\n  }\n\n  if (this.match(types.name) || this.match(types._yield)) {\n    node.id = this.parseBindingIdentifier();\n  }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.state.inMethod = oldInMethod;\n\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp$1.parseFunctionParams = function (node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function (node, isStatement, optionalId) {\n  this.next();\n  this.takeDecorators(node);\n  this.parseClassId(node, isStatement, optionalId);\n  this.parseClassSuper(node);\n  this.parseClassBody(node);\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp$1.isClassProperty = function () {\n  return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n};\n\npp$1.isClassMethod = function () {\n  return this.match(types.parenL);\n};\n\npp$1.isNonstaticConstructor = function (method) {\n  return !method.computed && !method.static && (method.key.name === \"constructor\" || // Identifier\n  method.key.value === \"constructor\" // Literal\n  );\n};\n\npp$1.parseClassBody = function (node) {\n  // class bodies are implicitly strict\n  var oldStrict = this.state.strict;\n  this.state.strict = true;\n\n  var hadConstructorCall = false;\n  var hadConstructor = false;\n  var decorators = [];\n  var classBody = this.startNode();\n\n  classBody.body = [];\n\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (this.eat(types.semi)) {\n      if (decorators.length > 0) {\n        this.raise(this.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n      }\n      continue;\n    }\n\n    if (this.match(types.at)) {\n      decorators.push(this.parseDecorator());\n      continue;\n    }\n\n    var method = this.startNode();\n\n    // steal the decorators if there are any\n    if (decorators.length) {\n      method.decorators = decorators;\n      decorators = [];\n    }\n\n    method.static = false;\n    if (this.match(types.name) && this.state.value === \"static\") {\n      var key = this.parseIdentifier(true); // eats 'static'\n      if (this.isClassMethod()) {\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        this.parseClassMethod(classBody, method, false, false);\n        continue;\n      } else if (this.isClassProperty()) {\n        // a property named 'static'\n        method.computed = false;\n        method.key = key;\n        classBody.body.push(this.parseClassProperty(method));\n        continue;\n      }\n      // otherwise something static\n      method.static = true;\n    }\n\n    if (this.eat(types.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parsePropertyName(method);\n      if (this.isNonstaticConstructor(method)) {\n        this.raise(method.key.start, \"Constructor can't be a generator\");\n      }\n      if (!method.computed && method.static && (method.key.name === \"prototype\" || method.key.value === \"prototype\")) {\n        this.raise(method.key.start, \"Classes may not have static property named prototype\");\n      }\n      this.parseClassMethod(classBody, method, true, false);\n    } else {\n      var isSimple = this.match(types.name);\n      var _key = this.parsePropertyName(method);\n      if (!method.computed && method.static && (method.key.name === \"prototype\" || method.key.value === \"prototype\")) {\n        this.raise(method.key.start, \"Classes may not have static property named prototype\");\n      }\n      if (this.isClassMethod()) {\n        // a normal method\n        if (this.isNonstaticConstructor(method)) {\n          if (hadConstructor) {\n            this.raise(_key.start, \"Duplicate constructor in the same class\");\n          } else if (method.decorators) {\n            this.raise(method.start, \"You can't attach decorators to a class constructor\");\n          }\n          hadConstructor = true;\n          method.kind = \"constructor\";\n        } else {\n          method.kind = \"method\";\n        }\n        this.parseClassMethod(classBody, method, false, false);\n      } else if (this.isClassProperty()) {\n        // a normal property\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Classes may not have a non-static field named 'constructor'\");\n        }\n        classBody.body.push(this.parseClassProperty(method));\n      } else if (isSimple && _key.name === \"async\" && !this.isLineTerminator()) {\n        // an async method\n        var isGenerator = this.hasPlugin(\"asyncGenerators\") && this.eat(types.star);\n        method.kind = \"method\";\n        this.parsePropertyName(method);\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Constructor can't be an async function\");\n        }\n        this.parseClassMethod(classBody, method, isGenerator, true);\n      } else if (isSimple && (_key.name === \"get\" || _key.name === \"set\") && !(this.isLineTerminator() && this.match(types.star))) {\n        // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n        // a getter or setter\n        method.kind = _key.name;\n        this.parsePropertyName(method);\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Constructor can't have get/set modifier\");\n        }\n        this.parseClassMethod(classBody, method, false, false);\n        this.checkGetterSetterParamCount(method);\n      } else if (this.hasPlugin(\"classConstructorCall\") && isSimple && _key.name === \"call\" && this.match(types.name) && this.state.value === \"constructor\") {\n        // a (deprecated) call constructor\n        if (hadConstructorCall) {\n          this.raise(method.start, \"Duplicate constructor call in the same class\");\n        } else if (method.decorators) {\n          this.raise(method.start, \"You can't attach decorators to a class constructor\");\n        }\n        hadConstructorCall = true;\n        method.kind = \"constructorCall\";\n        this.parsePropertyName(method); // consume \"constructor\" and make it the method's name\n        this.parseClassMethod(classBody, method, false, false);\n      } else if (this.isLineTerminator()) {\n        // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Classes may not have a non-static field named 'constructor'\");\n        }\n        classBody.body.push(this.parseClassProperty(method));\n      } else {\n        this.unexpected();\n      }\n    }\n  }\n\n  if (decorators.length) {\n    this.raise(this.state.start, \"You have trailing decorators with no method\");\n  }\n\n  node.body = this.finishNode(classBody, \"ClassBody\");\n\n  this.state.strict = oldStrict;\n};\n\npp$1.parseClassProperty = function (node) {\n  this.state.inClassProperty = true;\n  if (this.match(types.eq)) {\n    if (!this.hasPlugin(\"classProperties\")) this.unexpected();\n    this.next();\n    node.value = this.parseMaybeAssign();\n  } else {\n    node.value = null;\n  }\n  this.semicolon();\n  this.state.inClassProperty = false;\n  return this.finishNode(node, \"ClassProperty\");\n};\n\npp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {\n  this.parseMethod(method, isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"ClassMethod\"));\n};\n\npp$1.parseClassId = function (node, isStatement, optionalId) {\n  if (this.match(types.name)) {\n    node.id = this.parseIdentifier();\n  } else {\n    if (optionalId || !isStatement) {\n      node.id = null;\n    } else {\n      this.unexpected();\n    }\n  }\n};\n\npp$1.parseClassSuper = function (node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.match(types.star)) {\n    var specifier = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"exportExtensions\") && this.eatContextual(\"as\")) {\n      specifier.exported = this.parseIdentifier();\n      node.specifiers = [this.finishNode(specifier, \"ExportNamespaceSpecifier\")];\n      this.parseExportSpecifiersMaybe(node);\n      this.parseExportFrom(node, true);\n    } else {\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n  } else if (this.hasPlugin(\"exportExtensions\") && this.isExportDefaultSpecifier()) {\n    var _specifier = this.startNode();\n    _specifier.exported = this.parseIdentifier(true);\n    node.specifiers = [this.finishNode(_specifier, \"ExportDefaultSpecifier\")];\n    if (this.match(types.comma) && this.lookahead().type === types.star) {\n      this.expect(types.comma);\n      var _specifier2 = this.startNode();\n      this.expect(types.star);\n      this.expectContextual(\"as\");\n      _specifier2.exported = this.parseIdentifier();\n      node.specifiers.push(this.finishNode(_specifier2, \"ExportNamespaceSpecifier\"));\n    } else {\n      this.parseExportSpecifiersMaybe(node);\n    }\n    this.parseExportFrom(node, true);\n  } else if (this.eat(types._default)) {\n    // export default ...\n    var expr = this.startNode();\n    var needsSemi = false;\n    if (this.eat(types._function)) {\n      expr = this.parseFunction(expr, true, false, false, true);\n    } else if (this.match(types._class)) {\n      expr = this.parseClass(expr, true, true);\n    } else {\n      needsSemi = true;\n      expr = this.parseMaybeAssign();\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    this.checkExport(node, true, true);\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  } else if (this.shouldParseExportDeclaration()) {\n    node.specifiers = [];\n    node.source = null;\n    node.declaration = this.parseExportDeclaration(node);\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    this.parseExportFrom(node);\n  }\n  this.checkExport(node, true);\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp$1.parseExportDeclaration = function () {\n  return this.parseStatement(true);\n};\n\npp$1.isExportDefaultSpecifier = function () {\n  if (this.match(types.name)) {\n    return this.state.value !== \"async\";\n  }\n\n  if (!this.match(types._default)) {\n    return false;\n  }\n\n  var lookahead = this.lookahead();\n  return lookahead.type === types.comma || lookahead.type === types.name && lookahead.value === \"from\";\n};\n\npp$1.parseExportSpecifiersMaybe = function (node) {\n  if (this.eat(types.comma)) {\n    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());\n  }\n};\n\npp$1.parseExportFrom = function (node, expect) {\n  if (this.eatContextual(\"from\")) {\n    node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n    this.checkExport(node);\n  } else {\n    if (expect) {\n      this.unexpected();\n    } else {\n      node.source = null;\n    }\n  }\n\n  this.semicolon();\n};\n\npp$1.shouldParseExportDeclaration = function () {\n  return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"let\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isContextual(\"async\");\n};\n\npp$1.checkExport = function (node, checkNames, isDefault) {\n  if (checkNames) {\n    // Check for duplicate exports\n    if (isDefault) {\n      // Default exports\n      this.checkDuplicateExports(node, \"default\");\n    } else if (node.specifiers && node.specifiers.length) {\n      // Named exports\n      for (var _iterator2 = node.specifiers, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var specifier = _ref2;\n\n        this.checkDuplicateExports(specifier, specifier.exported.name);\n      }\n    } else if (node.declaration) {\n      // Exported declarations\n      if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n        this.checkDuplicateExports(node, node.declaration.id.name);\n      } else if (node.declaration.type === \"VariableDeclaration\") {\n        for (var _iterator3 = node.declaration.declarations, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref3 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref3 = _i3.value;\n          }\n\n          var declaration = _ref3;\n\n          this.checkDeclaration(declaration.id);\n        }\n      }\n    }\n  }\n\n  if (this.state.decorators.length) {\n    var isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n    if (!node.declaration || !isClass) {\n      this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n    }\n    this.takeDecorators(node.declaration);\n  }\n};\n\npp$1.checkDeclaration = function (node) {\n  if (node.type === \"ObjectPattern\") {\n    for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var prop = _ref4;\n\n      this.checkDeclaration(prop);\n    }\n  } else if (node.type === \"ArrayPattern\") {\n    for (var _iterator5 = node.elements, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n      var _ref5;\n\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        _ref5 = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        _ref5 = _i5.value;\n      }\n\n      var elem = _ref5;\n\n      if (elem) {\n        this.checkDeclaration(elem);\n      }\n    }\n  } else if (node.type === \"ObjectProperty\") {\n    this.checkDeclaration(node.value);\n  } else if (node.type === \"RestElement\" || node.type === \"RestProperty\") {\n    this.checkDeclaration(node.argument);\n  } else if (node.type === \"Identifier\") {\n    this.checkDuplicateExports(node, node.name);\n  }\n};\n\npp$1.checkDuplicateExports = function (node, name) {\n  if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n    this.raiseDuplicateExportError(node, name);\n  }\n  this.state.exportedIdentifiers.push(name);\n};\n\npp$1.raiseDuplicateExportError = function (node, name) {\n  this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : \"`\" + name + \"` has already been exported. Exported identifiers must be unique.\");\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function () {\n  var nodes = [];\n  var first = true;\n  var needsFrom = void 0;\n\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    var isDefault = this.match(types._default);\n    if (isDefault && !needsFrom) needsFrom = true;\n\n    var node = this.startNode();\n    node.local = this.parseIdentifier(isDefault);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n\n  // https://github.com/ember-cli/ember-cli/pull/3739\n  if (needsFrom && !this.isContextual(\"from\")) {\n    this.unexpected();\n  }\n\n  return nodes;\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function (node) {\n  this.eat(types._import);\n\n  // import '...'\n  if (this.match(types.string)) {\n    node.specifiers = [];\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = [];\n    this.parseImportSpecifiers(node);\n    this.expectContextual(\"from\");\n    node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function (node) {\n  var first = true;\n  if (this.match(types.name)) {\n    // import defaultObj, { x, y as z } from '...'\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));\n    if (!this.eat(types.comma)) return;\n  }\n\n  if (this.match(types.star)) {\n    var specifier = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, true, undefined, \"import namespace specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportNamespaceSpecifier\"));\n    return;\n  }\n\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      // Detect an attempt to deep destructure\n      if (this.eat(types.colon)) {\n        this.unexpected(null, \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\");\n      }\n\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    this.parseImportSpecifier(node);\n  }\n};\n\npp$1.parseImportSpecifier = function (node) {\n  var specifier = this.startNode();\n  specifier.imported = this.parseIdentifier(true);\n  if (this.eatContextual(\"as\")) {\n    specifier.local = this.parseIdentifier();\n  } else {\n    this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n    specifier.local = specifier.imported.__clone();\n  }\n  this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n  node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n};\n\npp$1.parseImportSpecifierDefault = function (id, startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.local = id;\n  this.checkLVal(node.local, true, undefined, \"default import specifier\");\n  return this.finishNode(node, \"ImportDefaultSpecifier\");\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function (node, isBinding, contextDescription) {\n  if (node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var prop = _ref;\n\n          if (prop.type === \"ObjectMethod\") {\n            if (prop.kind === \"get\" || prop.kind === \"set\") {\n              this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n            } else {\n              this.raise(prop.key.start, \"Object pattern can't contain methods\");\n            }\n          } else {\n            this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isBinding, contextDescription);\n        break;\n\n      case \"SpreadProperty\":\n        node.type = \"RestProperty\";\n        var arg = node.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding, contextDescription);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        {\n          var message = \"Invalid left-hand side\" + (contextDescription ? \" in \" + contextDescription : /* istanbul ignore next */\"expression\");\n          this.raise(node.start, message);\n        }\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function (exprList, isBinding, contextDescription) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type === \"RestElement\") {\n      --end;\n    } else if (last && last.type === \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding, contextDescription);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") {\n        this.unexpected(arg.start);\n      }\n      --end;\n    }\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding, contextDescription);\n  }\n  return exprList;\n};\n\n// Convert list of expression atoms to a list of\n\npp$2.toReferencedList = function (exprList) {\n  return exprList;\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function (refShorthandDefaultPos) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp$2.parseRest = function () {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseBindingIdentifier();\n  return this.finishNode(node, \"RestElement\");\n};\n\npp$2.shouldAllowYieldIdentifier = function () {\n  return this.match(types._yield) && !this.state.strict && !this.state.inGenerator;\n};\n\npp$2.parseBindingIdentifier = function () {\n  return this.parseIdentifier(this.shouldAllowYieldIdentifier());\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function () {\n  switch (this.state.type) {\n    case types._yield:\n      if (this.state.strict || this.state.inGenerator) this.unexpected();\n    // fall-through\n    case types.name:\n      return this.parseIdentifier(true);\n\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$2.parseBindingList = function (close, allowEmpty) {\n  var elts = [];\n  var first = true;\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n    }\n    if (allowEmpty && this.match(types.comma)) {\n      elts.push(null);\n    } else if (this.eat(close)) {\n      break;\n    } else if (this.match(types.ellipsis)) {\n      elts.push(this.parseAssignableListItemTypes(this.parseRest()));\n      this.expect(close);\n      break;\n    } else {\n      var decorators = [];\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n      var left = this.parseMaybeDefault();\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n      this.parseAssignableListItemTypes(left);\n      elts.push(this.parseMaybeDefault(left.start, left.loc.start, left));\n    }\n  }\n  return elts;\n};\n\npp$2.parseAssignableListItemTypes = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function (startPos, startLoc, left) {\n  startLoc = startLoc || this.state.startLoc;\n  startPos = startPos || this.state.start;\n  left = left || this.parseBindingAtom();\n  if (!this.eat(types.eq)) return left;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp$2.checkLVal = function (expr, isBinding, checkClashes, contextDescription) {\n  switch (expr.type) {\n    case \"Identifier\":\n      this.checkReservedWord(expr.name, expr.start, false, true);\n\n      if (checkClashes) {\n        // we need to prefix this with an underscore for the cases where we have a key of\n        // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n        //\n        //   > var obj = Object.create(null);\n        //   undefined\n        //   > obj.__proto__\n        //   null\n        //   > obj.__proto__ = true;\n        //   true\n        //   > obj.__proto__\n        //   null\n        var key = \"_\" + expr.name;\n\n        if (checkClashes[key]) {\n          this.raise(expr.start, \"Argument name clash in strict mode\");\n        } else {\n          checkClashes[key] = true;\n        }\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var _iterator2 = expr.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var prop = _ref2;\n\n        if (prop.type === \"ObjectProperty\") prop = prop.value;\n        this.checkLVal(prop, isBinding, checkClashes, \"object destructuring pattern\");\n      }\n      break;\n\n    case \"ArrayPattern\":\n      for (var _iterator3 = expr.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var elem = _ref3;\n\n        if (elem) this.checkLVal(elem, isBinding, checkClashes, \"array destructuring pattern\");\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes, \"assignment pattern\");\n      break;\n\n    case \"RestProperty\":\n      this.checkLVal(expr.argument, isBinding, checkClashes, \"rest property\");\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes, \"rest element\");\n      break;\n\n    default:\n      {\n        var message = (isBinding ? /* istanbul ignore next */\"Binding invalid\" : \"Invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : /* istanbul ignore next */\"expression\");\n        this.raise(expr.start, message);\n      }\n  }\n};\n\n/* eslint max-len: 0 */\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function (prop, propHash) {\n  if (prop.computed || prop.kind) return;\n\n  var key = prop.key;\n  // It is either an Identifier or a String/NumericLiteral\n  var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n  if (name === \"__proto__\") {\n    if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n    propHash.proto = true;\n  }\n};\n\n// Convenience method to parse an Expression only\npp$3.getExpression = function () {\n  this.nextToken();\n  var expr = this.parseExpression();\n  if (!this.match(types.eof)) {\n    this.unexpected();\n  }\n  return expr;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function (s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initialization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n  if (this.match(types.comma)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) {\n      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n    }\n    this.toReferencedList(node.expressions);\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n\n  if (this.match(types._yield) && this.state.inGenerator) {\n    var _left = this.parseYield();\n    if (afterLeftParse) _left = afterLeftParse.call(this, _left, startPos, startLoc);\n    return _left;\n  }\n\n  var failOnShorthandAssign = void 0;\n  if (refShorthandDefaultPos) {\n    failOnShorthandAssign = false;\n  } else {\n    refShorthandDefaultPos = { start: 0 };\n    failOnShorthandAssign = true;\n  }\n\n  if (this.match(types.parenL) || this.match(types.name)) {\n    this.state.potentialArrowAt = this.state.start;\n  }\n\n  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.state.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.state.value;\n    node.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly\n\n    this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n    if (left.extra && left.extra.parenthesized) {\n      var errorMsg = void 0;\n      if (left.type === \"ObjectPattern\") {\n        errorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n      } else if (left.type === \"ArrayPattern\") {\n        errorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n      }\n      if (errorMsg) {\n        this.raise(left.start, \"You're trying to assign to a parenthesized expression, eg. instead of \" + errorMsg);\n      }\n    }\n\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function (noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n  return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n};\n\npp$3.parseConditional = function (expr, noIn, startPos, startLoc) {\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseMaybeUnary(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n    return expr;\n  } else {\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.state.type.binop;\n  if (prec != null && (!noIn || !this.match(types._in))) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.state.value;\n\n      if (node.operator === \"**\" && left.type === \"UnaryExpression\" && left.extra && !left.extra.parenthesizedArgument && !left.extra.parenthesized) {\n        this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n      }\n\n      var op = this.state.type;\n      this.next();\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n\n      this.finishNode(node, op === types.logicalOR || op === types.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function (refShorthandDefaultPos) {\n  if (this.state.type.prefix) {\n    var node = this.startNode();\n    var update = this.match(types.incDec);\n    node.operator = this.state.value;\n    node.prefix = true;\n    this.next();\n\n    var argType = this.state.type;\n    node.argument = this.parseMaybeUnary();\n\n    this.addExtra(node, \"parenthesizedArgument\", argType === types.parenL && (!node.argument.extra || !node.argument.extra.parenthesized));\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n    } else if (this.state.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") {\n      this.raise(node.start, \"Deleting local variable in strict mode\");\n    }\n\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseExprSubscripts(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n  while (this.state.type.postfix && !this.canInsertSemicolon()) {\n    var _node = this.startNodeAt(startPos, startLoc);\n    _node.operator = this.state.value;\n    _node.prefix = false;\n    _node.argument = expr;\n    this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n    this.next();\n    expr = this.finishNode(_node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function (refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var potentialArrowAt = this.state.potentialArrowAt;\n  var expr = this.parseExprAtom(refShorthandDefaultPos);\n\n  if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n    return expr;\n  }\n\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n    return expr;\n  }\n\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    } else if (this.eat(types.dot)) {\n      var _node2 = this.startNodeAt(startPos, startLoc);\n      _node2.object = base;\n      _node2.property = this.parseIdentifier(true);\n      _node2.computed = false;\n      base = this.finishNode(_node2, \"MemberExpression\");\n    } else if (this.eat(types.bracketL)) {\n      var _node3 = this.startNodeAt(startPos, startLoc);\n      _node3.object = base;\n      _node3.property = this.parseExpression();\n      _node3.computed = true;\n      this.expect(types.bracketR);\n      base = this.finishNode(_node3, \"MemberExpression\");\n    } else if (!noCalls && this.match(types.parenL)) {\n      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n      this.next();\n\n      var _node4 = this.startNodeAt(startPos, startLoc);\n      _node4.callee = base;\n      _node4.arguments = this.parseCallExpressionArguments(types.parenR, possibleAsync);\n      if (_node4.callee.type === \"Import\" && _node4.arguments.length !== 1) {\n        this.raise(_node4.start, \"import() requires exactly one argument\");\n      }\n      base = this.finishNode(_node4, \"CallExpression\");\n\n      if (possibleAsync && this.shouldParseAsyncArrow()) {\n        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node4);\n      } else {\n        this.toReferencedList(_node4.arguments);\n      }\n    } else if (this.match(types.backQuote)) {\n      var _node5 = this.startNodeAt(startPos, startLoc);\n      _node5.tag = base;\n      _node5.quasi = this.parseTemplate(true);\n      base = this.finishNode(_node5, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\npp$3.parseCallExpressionArguments = function (close, possibleAsyncArrow) {\n  var elts = [];\n  var innerParenStart = void 0;\n  var first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(close)) break;\n    }\n\n    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params\n    if (this.match(types.parenL) && !innerParenStart) {\n      innerParenStart = this.state.start;\n    }\n\n    elts.push(this.parseExprListItem(false, possibleAsyncArrow ? { start: 0 } : undefined, possibleAsyncArrow ? { start: 0 } : undefined));\n  }\n\n  // we found an async arrow function so let's not allow any inner parens\n  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n    this.unexpected();\n  }\n\n  return elts;\n};\n\npp$3.shouldParseAsyncArrow = function () {\n  return this.match(types.arrow);\n};\n\npp$3.parseAsyncArrowFromCallExpression = function (node, call) {\n  this.expect(types.arrow);\n  return this.parseArrowExpression(node, call.arguments, true);\n};\n\n// Parse a no-call expression (like argument of `new` or `::` operators).\n\npp$3.parseNoCallExpr = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function (refShorthandDefaultPos) {\n  var canBeArrow = this.state.potentialArrowAt === this.state.start;\n  var node = void 0;\n\n  switch (this.state.type) {\n    case types._super:\n      if (!this.state.inMethod && !this.state.inClassProperty && !this.options.allowSuperOutsideMethod) {\n        this.raise(this.state.start, \"'super' outside of function or class\");\n      }\n\n      node = this.startNode();\n      this.next();\n      if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n        this.unexpected();\n      }\n      if (this.match(types.parenL) && this.state.inMethod !== \"constructor\" && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, \"super() outside of class constructor\");\n      }\n      return this.finishNode(node, \"Super\");\n\n    case types._import:\n      if (!this.hasPlugin(\"dynamicImport\")) this.unexpected();\n\n      node = this.startNode();\n      this.next();\n      if (!this.match(types.parenL)) {\n        this.unexpected(null, types.parenL);\n      }\n      return this.finishNode(node, \"Import\");\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\");\n\n    case types._yield:\n      if (this.state.inGenerator) this.unexpected();\n\n    case types.name:\n      node = this.startNode();\n      var allowAwait = this.state.value === \"await\" && this.state.inAsync;\n      var allowYield = this.shouldAllowYieldIdentifier();\n      var id = this.parseIdentifier(allowAwait || allowYield);\n\n      if (id.name === \"await\") {\n        if (this.state.inAsync || this.inModule) {\n          return this.parseAwait(node);\n        }\n      } else if (id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n        this.next();\n        return this.parseFunction(node, false, false, true);\n      } else if (canBeArrow && id.name === \"async\" && this.match(types.name)) {\n        var params = [this.parseIdentifier()];\n        this.expect(types.arrow);\n        // let foo = bar => {};\n        return this.parseArrowExpression(node, params, true);\n      }\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        return this.parseArrowExpression(node, [id]);\n      }\n\n      return id;\n\n    case types._do:\n      if (this.hasPlugin(\"doExpressions\")) {\n        var _node6 = this.startNode();\n        this.next();\n        var oldInFunction = this.state.inFunction;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.state.inFunction = false;\n        _node6.body = this.parseBlock(false, true);\n        this.state.inFunction = oldInFunction;\n        this.state.labels = oldLabels;\n        return this.finishNode(_node6, \"DoExpression\");\n      }\n\n    case types.regexp:\n      var value = this.state.value;\n      node = this.parseLiteral(value.value, \"RegExpLiteral\");\n      node.pattern = value.pattern;\n      node.flags = value.flags;\n      return node;\n\n    case types.num:\n      return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n    case types.string:\n      return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n    case types._null:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"NullLiteral\");\n\n    case types._true:case types._false:\n      node = this.startNode();\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n\n    case types.parenL:\n      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos);\n      this.toReferencedList(node.elements);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case types.braceL:\n      return this.parseObj(false, refShorthandDefaultPos);\n\n    case types._function:\n      return this.parseFunctionExpression();\n\n    case types.at:\n      this.parseDecorators();\n\n    case types._class:\n      node = this.startNode();\n      this.takeDecorators(node);\n      return this.parseClass(node, false);\n\n    case types._new:\n      return this.parseNew();\n\n    case types.backQuote:\n      return this.parseTemplate(false);\n\n    case types.doubleColon:\n      node = this.startNode();\n      this.next();\n      node.object = null;\n      var callee = node.callee = this.parseNoCallExpr();\n      if (callee.type === \"MemberExpression\") {\n        return this.finishNode(node, \"BindExpression\");\n      } else {\n        this.raise(callee.start, \"Binding should be performed on object property.\");\n      }\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$3.parseFunctionExpression = function () {\n  var node = this.startNode();\n  var meta = this.parseIdentifier(true);\n  if (this.state.inGenerator && this.eat(types.dot) && this.hasPlugin(\"functionSent\")) {\n    return this.parseMetaProperty(node, meta, \"sent\");\n  } else {\n    return this.parseFunction(node, false);\n  }\n};\n\npp$3.parseMetaProperty = function (node, meta, propertyName) {\n  node.meta = meta;\n  node.property = this.parseIdentifier(true);\n\n  if (node.property.name !== propertyName) {\n    this.raise(node.property.start, \"The only valid meta property for new is \" + meta.name + \".\" + propertyName);\n  }\n\n  return this.finishNode(node, \"MetaProperty\");\n};\n\npp$3.parseLiteral = function (value, type, startPos, startLoc) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  this.addExtra(node, \"rawValue\", value);\n  this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n  node.value = value;\n  this.next();\n  return this.finishNode(node, type);\n};\n\npp$3.parseParenExpression = function () {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val;\n};\n\npp$3.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n\n  var val = void 0;\n  this.expect(types.parenL);\n\n  var innerStartPos = this.state.start;\n  var innerStartLoc = this.state.startLoc;\n  var exprList = [];\n  var refShorthandDefaultPos = { start: 0 };\n  var refNeedsArrowPos = { start: 0 };\n  var first = true;\n  var spreadStart = void 0;\n  var optionalCommaStart = void 0;\n\n  while (!this.match(types.parenR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma, refNeedsArrowPos.start || null);\n      if (this.match(types.parenR)) {\n        optionalCommaStart = this.state.start;\n        break;\n      }\n    }\n\n    if (this.match(types.ellipsis)) {\n      var spreadNodeStartPos = this.state.start;\n      var spreadNodeStartLoc = this.state.startLoc;\n      spreadStart = this.state.start;\n      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartPos, spreadNodeStartLoc));\n      break;\n    } else {\n      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n    }\n  }\n\n  var innerEndPos = this.state.start;\n  var innerEndLoc = this.state.startLoc;\n  this.expect(types.parenR);\n\n  var arrowNode = this.startNodeAt(startPos, startLoc);\n  if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n    for (var _iterator = exprList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var param = _ref;\n\n      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);\n    }\n\n    return this.parseArrowExpression(arrowNode, exprList);\n  }\n\n  if (!exprList.length) {\n    this.unexpected(this.state.lastTokStart);\n  }\n  if (optionalCommaStart) this.unexpected(optionalCommaStart);\n  if (spreadStart) this.unexpected(spreadStart);\n  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);\n  if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n  if (exprList.length > 1) {\n    val = this.startNodeAt(innerStartPos, innerStartLoc);\n    val.expressions = exprList;\n    this.toReferencedList(val.expressions);\n    this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n  } else {\n    val = exprList[0];\n  }\n\n  this.addExtra(val, \"parenthesized\", true);\n  this.addExtra(val, \"parenStart\", startPos);\n\n  return val;\n};\n\npp$3.shouldParseArrow = function () {\n  return !this.canInsertSemicolon();\n};\n\npp$3.parseArrow = function (node) {\n  if (this.eat(types.arrow)) {\n    return node;\n  }\n};\n\npp$3.parseParenItem = function (node) {\n  return node;\n};\n\n// New's precedence is slightly tricky. It must allow its argument\n// to be a `[]` or dot subscript expression, but not a call — at\n// least, not without wrapping it in parentheses. Thus, it uses the\n\npp$3.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdentifier(true);\n\n  if (this.eat(types.dot)) {\n    var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n    if (!this.state.inFunction) {\n      this.raise(metaProp.property.start, \"new.target can only be used in functions\");\n    }\n\n    return metaProp;\n  }\n\n  node.callee = this.parseNoCallExpr();\n\n  if (this.eat(types.parenL)) {\n    node.arguments = this.parseExprList(types.parenR);\n    this.toReferencedList(node.arguments);\n  } else {\n    node.arguments = [];\n  }\n\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function (isTagged) {\n  var elem = this.startNode();\n  if (this.state.value === null) {\n    if (!isTagged || !this.hasPlugin(\"templateInvalidEscapes\")) {\n      this.raise(this.state.invalidTemplateEscapePosition, \"Invalid escape sequence in template\");\n    } else {\n      this.state.invalidTemplateEscapePosition = null;\n    }\n  }\n  elem.value = {\n    raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n    cooked: this.state.value\n  };\n  this.next();\n  elem.tail = this.match(types.backQuote);\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp$3.parseTemplate = function (isTagged) {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement(isTagged);\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function (isPattern, refShorthandDefaultPos) {\n  var decorators = [];\n  var propHash = Object.create(null);\n  var first = true;\n  var node = this.startNode();\n\n  node.properties = [];\n  this.next();\n\n  var firstRestLocation = null;\n\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    while (this.match(types.at)) {\n      decorators.push(this.parseDecorator());\n    }\n\n    var prop = this.startNode(),\n        isGenerator = false,\n        isAsync = false,\n        startPos = void 0,\n        startLoc = void 0;\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    if (this.hasPlugin(\"objectRestSpread\") && this.match(types.ellipsis)) {\n      prop = this.parseSpread(isPattern ? { start: 0 } : undefined);\n      prop.type = isPattern ? \"RestProperty\" : \"SpreadProperty\";\n      if (isPattern) this.toAssignable(prop.argument, true, \"object pattern\");\n      node.properties.push(prop);\n      if (isPattern) {\n        var position = this.state.start;\n        if (firstRestLocation !== null) {\n          this.unexpected(firstRestLocation, \"Cannot have multiple rest elements when destructuring\");\n        } else if (this.eat(types.braceR)) {\n          break;\n        } else if (this.match(types.comma) && this.lookahead().type === types.braceR) {\n          // TODO: temporary rollback\n          // this.unexpected(position, \"A trailing comma is not permitted after the rest element\");\n          continue;\n        } else {\n          firstRestLocation = position;\n          continue;\n        }\n      } else {\n        continue;\n      }\n    }\n\n    prop.method = false;\n    prop.shorthand = false;\n\n    if (isPattern || refShorthandDefaultPos) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    if (!isPattern && this.isContextual(\"async\")) {\n      if (isGenerator) this.unexpected();\n\n      var asyncId = this.parseIdentifier();\n      if (this.match(types.colon) || this.match(types.parenL) || this.match(types.braceR) || this.match(types.eq) || this.match(types.comma)) {\n        prop.key = asyncId;\n        prop.computed = false;\n      } else {\n        isAsync = true;\n        if (this.hasPlugin(\"asyncGenerators\")) isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop);\n      }\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);\n    this.checkPropClash(prop, propHash);\n\n    if (prop.shorthand) {\n      this.addExtra(prop, \"shorthand\", true);\n    }\n\n    node.properties.push(prop);\n  }\n\n  if (firstRestLocation !== null) {\n    this.unexpected(firstRestLocation, \"The rest element has to be the last element when destructuring\");\n  }\n\n  if (decorators.length) {\n    this.raise(this.state.start, \"You have trailing decorators with no property\");\n  }\n\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp$3.isGetterOrSetterMethod = function (prop, isPattern) {\n  return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || // get \"string\"() {}\n  this.match(types.num) || // get 1() {}\n  this.match(types.bracketL) || // get [\"string\"]() {}\n  this.match(types.name) || // get foo() {}\n  this.state.type.keyword // get debugger() {}\n  );\n};\n\n// get methods aren't allowed to have any parameters\n// set methods must have exactly 1 parameter\npp$3.checkGetterSetterParamCount = function (method) {\n  var paramCount = method.kind === \"get\" ? 0 : 1;\n  if (method.params.length !== paramCount) {\n    var start = method.start;\n    if (method.kind === \"get\") {\n      this.raise(start, \"getter should have no params\");\n    } else {\n      this.raise(start, \"setter should have exactly one param\");\n    }\n  }\n};\n\npp$3.parseObjectMethod = function (prop, isGenerator, isAsync, isPattern) {\n  if (isAsync || isGenerator || this.match(types.parenL)) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"method\";\n    prop.method = true;\n    this.parseMethod(prop, isGenerator, isAsync);\n\n    return this.finishNode(prop, \"ObjectMethod\");\n  }\n\n  if (this.isGetterOrSetterMethod(prop, isPattern)) {\n    if (isGenerator || isAsync) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    this.parseMethod(prop);\n    this.checkGetterSetterParamCount(prop);\n\n    return this.finishNode(prop, \"ObjectMethod\");\n  }\n};\n\npp$3.parseObjectProperty = function (prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n\n    return this.finishNode(prop, \"ObjectProperty\");\n  }\n\n  if (!prop.computed && prop.key.type === \"Identifier\") {\n    this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n    } else if (this.match(types.eq) && refShorthandDefaultPos) {\n      if (!refShorthandDefaultPos.start) {\n        refShorthandDefaultPos.start = this.state.start;\n      }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n    } else {\n      prop.value = prop.key.__clone();\n    }\n    prop.shorthand = true;\n\n    return this.finishNode(prop, \"ObjectProperty\");\n  }\n};\n\npp$3.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {\n  var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n  if (!node) this.unexpected();\n\n  return node;\n};\n\npp$3.parsePropertyName = function (prop) {\n  if (this.eat(types.bracketL)) {\n    prop.computed = true;\n    prop.key = this.parseMaybeAssign();\n    this.expect(types.bracketR);\n  } else {\n    prop.computed = false;\n    var oldInPropertyName = this.state.inPropertyName;\n    this.state.inPropertyName = true;\n    prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    this.state.inPropertyName = oldInPropertyName;\n  }\n  return prop.key;\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function (node, isAsync) {\n  node.id = null;\n  node.generator = false;\n  node.expression = false;\n  node.async = !!isAsync;\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function (node, isGenerator, isAsync) {\n  var oldInMethod = this.state.inMethod;\n  this.state.inMethod = node.kind || true;\n  this.initFunction(node, isAsync);\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR);\n  node.generator = !!isGenerator;\n  this.parseFunctionBody(node);\n  this.state.inMethod = oldInMethod;\n  return node;\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function (node, params, isAsync) {\n  this.initFunction(node, isAsync);\n  node.params = this.toAssignableList(params, true, \"arrow function parameters\");\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\npp$3.isStrictBody = function (node, isExpression) {\n  if (!isExpression && node.body.directives.length) {\n    for (var _iterator2 = node.body.directives, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var directive = _ref2;\n\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n// Parse function body and check parameters.\npp$3.parseFunctionBody = function (node, allowExpression) {\n  var isExpression = allowExpression && !this.match(types.braceL);\n\n  var oldInAsync = this.state.inAsync;\n  this.state.inAsync = node.async;\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.state.inFunction;\n    var oldInGen = this.state.inGenerator;\n    var oldLabels = this.state.labels;\n    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;\n  }\n  this.state.inAsync = oldInAsync;\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  var isStrict = this.isStrictBody(node, isExpression);\n  // Also check when allowExpression === true for arrow functions\n  var checkLVal = this.state.strict || allowExpression || isStrict;\n\n  if (isStrict && node.id && node.id.type === \"Identifier\" && node.id.name === \"yield\") {\n    this.raise(node.id.start, \"Binding yield in strict mode\");\n  }\n\n  if (checkLVal) {\n    var nameHash = Object.create(null);\n    var oldStrict = this.state.strict;\n    if (isStrict) this.state.strict = true;\n    if (node.id) {\n      this.checkLVal(node.id, true, undefined, \"function name\");\n    }\n    for (var _iterator3 = node.params, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var param = _ref3;\n\n      if (isStrict && param.type !== \"Identifier\") {\n        this.raise(param.start, \"Non-simple parameter in strict mode\");\n      }\n      this.checkLVal(param, true, nameHash, \"function parameter list\");\n    }\n    this.state.strict = oldStrict;\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function (close, allowEmpty, refShorthandDefaultPos) {\n  var elts = [];\n  var first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(close)) break;\n    }\n\n    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n  }\n  return elts;\n};\n\npp$3.parseExprListItem = function (allowEmpty, refShorthandDefaultPos, refNeedsArrowPos) {\n  var elt = void 0;\n  if (allowEmpty && this.match(types.comma)) {\n    elt = null;\n  } else if (this.match(types.ellipsis)) {\n    elt = this.parseSpread(refShorthandDefaultPos);\n  } else {\n    elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n  }\n  return elt;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdentifier = function (liberal) {\n  var node = this.startNode();\n  if (!liberal) {\n    this.checkReservedWord(this.state.value, this.state.start, !!this.state.type.keyword, false);\n  }\n\n  if (this.match(types.name)) {\n    node.name = this.state.value;\n  } else if (this.state.type.keyword) {\n    node.name = this.state.type.keyword;\n  } else {\n    this.unexpected();\n  }\n\n  if (!liberal && node.name === \"await\" && this.state.inAsync) {\n    this.raise(node.start, \"invalid use of await inside of an async function\");\n  }\n\n  node.loc.identifierName = node.name;\n\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\npp$3.checkReservedWord = function (word, startLoc, checkKeywords, isBinding) {\n  if (this.isReservedWord(word) || checkKeywords && this.isKeyword(word)) {\n    this.raise(startLoc, word + \" is a reserved word\");\n  }\n\n  if (this.state.strict && (reservedWords.strict(word) || isBinding && reservedWords.strictBind(word))) {\n    this.raise(startLoc, word + \" is a reserved word in strict mode\");\n  }\n};\n\n// Parses await expression inside async function.\n\npp$3.parseAwait = function (node) {\n  // istanbul ignore next: this condition is checked at the call site so won't be hit here\n  if (!this.state.inAsync) {\n    this.unexpected();\n  }\n  if (this.match(types.star)) {\n    this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n  }\n  node.argument = this.parseMaybeUnary();\n  return this.finishNode(node, \"AwaitExpression\");\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.match(types.semi) || this.canInsertSemicolon() || !this.match(types.star) && !this.state.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$4 = Parser.prototype;\nvar commentKeys = [\"leadingComments\", \"trailingComments\", \"innerComments\"];\n\nvar Node = function () {\n  function Node(pos, loc, filename) {\n    classCallCheck(this, Node);\n\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (filename) this.loc.filename = filename;\n  }\n\n  Node.prototype.__clone = function __clone() {\n    var node2 = new Node();\n    for (var key in this) {\n      // Do not clone comments that are already attached to the node\n      if (commentKeys.indexOf(key) < 0) {\n        node2[key] = this[key];\n      }\n    }\n\n    return node2;\n  };\n\n  return Node;\n}();\n\npp$4.startNode = function () {\n  return new Node(this.state.start, this.state.startLoc, this.filename);\n};\n\npp$4.startNodeAt = function (pos, loc) {\n  return new Node(pos, loc, this.filename);\n};\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  node.loc.end = loc;\n  this.processComment(node);\n  return node;\n}\n\n// Finish an AST node, adding `type` and `end` properties.\n\npp$4.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp$4.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\nvar pp$5 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$5.raise = function (pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;\n  err.loc = loc;\n  throw err;\n};\n\n/* eslint max-len: 0 */\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nvar pp$6 = Parser.prototype;\n\npp$6.addComment = function (comment) {\n  if (this.filename) comment.loc.filename = this.filename;\n  this.state.trailingComments.push(comment);\n  this.state.leadingComments.push(comment);\n};\n\npp$6.processComment = function (node) {\n  if (node.type === \"Program\" && node.body.length > 0) return;\n\n  var stack = this.state.commentStack;\n\n  var firstChild = void 0,\n      lastChild = void 0,\n      trailingComments = void 0,\n      i = void 0,\n      j = void 0;\n\n  if (this.state.trailingComments.length > 0) {\n    // If the first comment in trailingComments comes after the\n    // current node, then we're good - all comments in the array will\n    // come after the node and so it's safe to add them as official\n    // trailingComments.\n    if (this.state.trailingComments[0].start >= node.end) {\n      trailingComments = this.state.trailingComments;\n      this.state.trailingComments = [];\n    } else {\n      // Otherwise, if the first comment doesn't come after the\n      // current node, that means we have a mix of leading and trailing\n      // comments in the array and that leadingComments contains the\n      // same items as trailingComments. Reset trailingComments to\n      // zero items and we'll handle this by evaluating leadingComments\n      // later.\n      this.state.trailingComments.length = 0;\n    }\n  } else {\n    var lastInStack = last(stack);\n    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n      trailingComments = lastInStack.trailingComments;\n      lastInStack.trailingComments = null;\n    }\n  }\n\n  // Eating the stack.\n  if (stack.length > 0 && last(stack).start >= node.start) {\n    firstChild = stack.pop();\n  }\n\n  while (stack.length > 0 && last(stack).start >= node.start) {\n    lastChild = stack.pop();\n  }\n\n  if (!lastChild && firstChild) lastChild = firstChild;\n\n  // Attach comments that follow a trailing comma on the last\n  // property in an object literal or a trailing comma in function arguments\n  // as trailing comments\n  if (firstChild && this.state.leadingComments.length > 0) {\n    var lastComment = last(this.state.leadingComments);\n\n    if (firstChild.type === \"ObjectProperty\") {\n      if (lastComment.start >= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n\n          if (this.state.leadingComments.length > 0) {\n            firstChild.trailingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        }\n      }\n    } else if (node.type === \"CallExpression\" && node.arguments && node.arguments.length) {\n      var lastArg = last(node.arguments);\n\n      if (lastArg && lastComment.start >= lastArg.start && lastComment.end <= node.end) {\n        if (this.state.commentPreviousNode) {\n          if (this.state.leadingComments.length > 0) {\n            lastArg.trailingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        }\n      }\n    }\n  }\n\n  if (lastChild) {\n    if (lastChild.leadingComments) {\n      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {\n        node.leadingComments = lastChild.leadingComments;\n        lastChild.leadingComments = null;\n      } else {\n        // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n        // so this takes back the leading comment.\n        // See also: https://github.com/eslint/espree/issues/158\n        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n          if (lastChild.leadingComments[i].end <= node.start) {\n            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n            break;\n          }\n        }\n      }\n    }\n  } else if (this.state.leadingComments.length > 0) {\n    if (last(this.state.leadingComments).end <= node.start) {\n      if (this.state.commentPreviousNode) {\n        for (j = 0; j < this.state.leadingComments.length; j++) {\n          if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n            this.state.leadingComments.splice(j, 1);\n            j--;\n          }\n        }\n      }\n      if (this.state.leadingComments.length > 0) {\n        node.leadingComments = this.state.leadingComments;\n        this.state.leadingComments = [];\n      }\n    } else {\n      // https://github.com/eslint/espree/issues/2\n      //\n      // In special cases, such as return (without a value) and\n      // debugger, all comments will end up as leadingComments and\n      // will otherwise be eliminated. This step runs when the\n      // commentStack is empty and there are comments left\n      // in leadingComments.\n      //\n      // This loop figures out the stopping point between the actual\n      // leading and trailing comments by finding the location of the\n      // first comment that comes after the given node.\n      for (i = 0; i < this.state.leadingComments.length; i++) {\n        if (this.state.leadingComments[i].end > node.start) {\n          break;\n        }\n      }\n\n      // Split the array based on the location of the first comment\n      // that comes after the node. Keep in mind that this could\n      // result in an empty array, and if so, the array must be\n      // deleted.\n      node.leadingComments = this.state.leadingComments.slice(0, i);\n      if (node.leadingComments.length === 0) {\n        node.leadingComments = null;\n      }\n\n      // Similarly, trailing comments are attached later. The variable\n      // must be reset to null if there are no trailing comments.\n      trailingComments = this.state.leadingComments.slice(i);\n      if (trailingComments.length === 0) {\n        trailingComments = null;\n      }\n    }\n  }\n\n  this.state.commentPreviousNode = node;\n\n  if (trailingComments) {\n    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n      node.innerComments = trailingComments;\n    } else {\n      node.trailingComments = trailingComments;\n    }\n  }\n\n  stack.push(node);\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.estreeParseRegExpLiteral = function (_ref) {\n  var pattern = _ref.pattern,\n      flags = _ref.flags;\n\n  var regex = null;\n  try {\n    regex = new RegExp(pattern, flags);\n  } catch (e) {\n    // In environments that don't support these flags value will\n    // be null as the regex can't be represented natively.\n  }\n  var node = this.estreeParseLiteral(regex);\n  node.regex = { pattern: pattern, flags: flags };\n\n  return node;\n};\n\npp$7.estreeParseLiteral = function (value) {\n  return this.parseLiteral(value, \"Literal\");\n};\n\npp$7.directiveToStmt = function (directive) {\n  var directiveLiteral = directive.value;\n\n  var stmt = this.startNodeAt(directive.start, directive.loc.start);\n  var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n\n  expression.value = directiveLiteral.value;\n  expression.raw = directiveLiteral.extra.raw;\n\n  stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n  stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n  return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n};\n\nfunction isSimpleProperty(node) {\n  return node && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estreePlugin = function (instance) {\n  instance.extend(\"checkDeclaration\", function (inner) {\n    return function (node) {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(node.value);\n      } else {\n        inner.call(this, node);\n      }\n    };\n  });\n\n  instance.extend(\"checkGetterSetterParamCount\", function () {\n    return function (prop) {\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.start;\n        if (prop.kind === \"get\") {\n          this.raise(start, \"getter should have no params\");\n        } else {\n          this.raise(start, \"setter should have exactly one param\");\n        }\n      }\n    };\n  });\n\n  instance.extend(\"checkLVal\", function (inner) {\n    return function (expr, isBinding, checkClashes) {\n      var _this = this;\n\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(function (prop) {\n            _this.checkLVal(prop.type === \"Property\" ? prop.value : prop, isBinding, checkClashes, \"object destructuring pattern\");\n          });\n          break;\n        default:\n          for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n            args[_key - 3] = arguments[_key];\n          }\n\n          inner.call.apply(inner, [this, expr, isBinding, checkClashes].concat(args));\n      }\n    };\n  });\n\n  instance.extend(\"checkPropClash\", function () {\n    return function (prop, propHash) {\n      if (prop.computed || !isSimpleProperty(prop)) return;\n\n      var key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\") {\n        if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n        propHash.proto = true;\n      }\n    };\n  });\n\n  instance.extend(\"isStrictBody\", function () {\n    return function (node, isExpression) {\n      if (!isExpression && node.body.body.length > 0) {\n        for (var _iterator = node.body.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          var directive = _ref2;\n\n          if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n            if (directive.expression.value === \"use strict\") return true;\n          } else {\n            // Break for the first non literal expression\n            break;\n          }\n        }\n      }\n\n      return false;\n    };\n  });\n\n  instance.extend(\"isValidDirective\", function () {\n    return function (stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n    };\n  });\n\n  instance.extend(\"stmtToDirective\", function (inner) {\n    return function (stmt) {\n      var directive = inner.call(this, stmt);\n      var value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    };\n  });\n\n  instance.extend(\"parseBlockBody\", function (inner) {\n    return function (node) {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      inner.call.apply(inner, [this, node].concat(args));\n\n      node.directives.reverse().forEach(function (directive) {\n        node.body.unshift(_this2.directiveToStmt(directive));\n      });\n      delete node.directives;\n    };\n  });\n\n  instance.extend(\"parseClassMethod\", function () {\n    return function (classBody, method, isGenerator, isAsync) {\n      this.parseMethod(method, isGenerator, isAsync);\n      if (method.typeParameters) {\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n    };\n  });\n\n  instance.extend(\"parseExprAtom\", function (inner) {\n    return function () {\n      switch (this.state.type) {\n        case types.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case types.num:\n        case types.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case types._null:\n          return this.estreeParseLiteral(null);\n\n        case types._true:\n          return this.estreeParseLiteral(true);\n\n        case types._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          return inner.call.apply(inner, [this].concat(args));\n      }\n    };\n  });\n\n  instance.extend(\"parseLiteral\", function (inner) {\n    return function () {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseMethod\", function (inner) {\n    return function (node) {\n      var funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so inner method correctly sets state\n\n      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      funcNode = inner.call.apply(inner, [this, funcNode].concat(args));\n      delete funcNode.kind;\n      node.value = this.finishNode(funcNode, \"FunctionExpression\");\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseObjectMethod\", function (inner) {\n    return function () {\n      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n\n      if (node) {\n        if (node.kind === \"method\") node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseObjectProperty\", function (inner) {\n    return function () {\n      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"toAssignable\", function (inner) {\n    return function (node, isBinding) {\n      for (var _len8 = arguments.length, args = Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n        args[_key8 - 2] = arguments[_key8];\n      }\n\n      if (isSimpleProperty(node)) {\n        this.toAssignable.apply(this, [node.value, isBinding].concat(args));\n\n        return node;\n      } else if (node.type === \"ObjectExpression\") {\n        node.type = \"ObjectPattern\";\n        for (var _iterator2 = node.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref3 = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref3 = _i2.value;\n          }\n\n          var prop = _ref3;\n\n          if (prop.kind === \"get\" || prop.kind === \"set\") {\n            this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          } else if (prop.method) {\n            this.raise(prop.key.start, \"Object pattern can't contain methods\");\n          } else {\n            this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n          }\n        }\n\n        return node;\n      }\n\n      return inner.call.apply(inner, [this, node, isBinding].concat(args));\n    };\n  });\n};\n\n/* eslint max-len: 0 */\n\nvar primitiveTypes = [\"any\", \"mixed\", \"empty\", \"bool\", \"boolean\", \"number\", \"string\", \"void\", \"null\"];\n\nvar pp$8 = Parser.prototype;\n\npp$8.flowParseTypeInitialiser = function (tok) {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  this.expect(tok || types.colon);\n\n  var type = this.flowParseType();\n  this.state.inType = oldInType;\n  return type;\n};\n\npp$8.flowParsePredicate = function () {\n  var node = this.startNode();\n  var moduloLoc = this.state.startLoc;\n  var moduloPos = this.state.start;\n  this.expect(types.modulo);\n  var checksLoc = this.state.startLoc;\n  this.expectContextual(\"checks\");\n  // Force '%' and 'checks' to be adjacent\n  if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n    this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n  }\n  if (this.eat(types.parenL)) {\n    node.expression = this.parseExpression();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"DeclaredPredicate\");\n  } else {\n    return this.finishNode(node, \"InferredPredicate\");\n  }\n};\n\npp$8.flowParseTypeAndPredicateInitialiser = function () {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  this.expect(types.colon);\n  var type = null;\n  var predicate = null;\n  if (this.match(types.modulo)) {\n    this.state.inType = oldInType;\n    predicate = this.flowParsePredicate();\n  } else {\n    type = this.flowParseType();\n    this.state.inType = oldInType;\n    if (this.match(types.modulo)) {\n      predicate = this.flowParsePredicate();\n    }\n  }\n  return [type, predicate];\n};\n\npp$8.flowParseDeclareClass = function (node) {\n  this.next();\n  this.flowParseInterfaceish(node, true);\n  return this.finishNode(node, \"DeclareClass\");\n};\n\npp$8.flowParseDeclareFunction = function (node) {\n  this.next();\n\n  var id = node.id = this.parseIdentifier();\n\n  var typeNode = this.startNode();\n  var typeContainer = this.startNode();\n\n  if (this.isRelational(\"<\")) {\n    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    typeNode.typeParameters = null;\n  }\n\n  this.expect(types.parenL);\n  var tmp = this.flowParseFunctionTypeParams();\n  typeNode.params = tmp.params;\n  typeNode.rest = tmp.rest;\n  this.expect(types.parenR);\n  var predicate = null;\n\n  var _flowParseTypeAndPred = this.flowParseTypeAndPredicateInitialiser();\n\n  typeNode.returnType = _flowParseTypeAndPred[0];\n  predicate = _flowParseTypeAndPred[1];\n\n  typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n  typeContainer.predicate = predicate;\n  id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n  this.finishNode(id, id.type);\n\n  this.semicolon();\n\n  return this.finishNode(node, \"DeclareFunction\");\n};\n\npp$8.flowParseDeclare = function (node) {\n  if (this.match(types._class)) {\n    return this.flowParseDeclareClass(node);\n  } else if (this.match(types._function)) {\n    return this.flowParseDeclareFunction(node);\n  } else if (this.match(types._var)) {\n    return this.flowParseDeclareVariable(node);\n  } else if (this.isContextual(\"module\")) {\n    if (this.lookahead().type === types.dot) {\n      return this.flowParseDeclareModuleExports(node);\n    } else {\n      return this.flowParseDeclareModule(node);\n    }\n  } else if (this.isContextual(\"type\")) {\n    return this.flowParseDeclareTypeAlias(node);\n  } else if (this.isContextual(\"opaque\")) {\n    return this.flowParseDeclareOpaqueType(node);\n  } else if (this.isContextual(\"interface\")) {\n    return this.flowParseDeclareInterface(node);\n  } else if (this.match(types._export)) {\n    return this.flowParseDeclareExportDeclaration(node);\n  } else {\n    this.unexpected();\n  }\n};\n\npp$8.flowParseDeclareExportDeclaration = function (node) {\n  this.expect(types._export);\n  if (this.isContextual(\"opaque\") // declare export opaque ...\n  ) {\n      node.declaration = this.flowParseDeclare(this.startNode());\n      node.default = false;\n\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    }\n\n  throw this.unexpected();\n};\n\npp$8.flowParseDeclareVariable = function (node) {\n  this.next();\n  node.id = this.flowParseTypeAnnotatableIdentifier();\n  this.semicolon();\n  return this.finishNode(node, \"DeclareVariable\");\n};\n\npp$8.flowParseDeclareModule = function (node) {\n  this.next();\n\n  if (this.match(types.string)) {\n    node.id = this.parseExprAtom();\n  } else {\n    node.id = this.parseIdentifier();\n  }\n\n  var bodyNode = node.body = this.startNode();\n  var body = bodyNode.body = [];\n  this.expect(types.braceL);\n  while (!this.match(types.braceR)) {\n    var _bodyNode = this.startNode();\n\n    if (this.match(types._import)) {\n      var lookahead = this.lookahead();\n      if (lookahead.value !== \"type\" && lookahead.value !== \"typeof\") {\n        this.unexpected(null, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n      }\n\n      this.parseImport(_bodyNode);\n    } else {\n      this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n\n      _bodyNode = this.flowParseDeclare(_bodyNode, true);\n    }\n\n    body.push(_bodyNode);\n  }\n  this.expect(types.braceR);\n\n  this.finishNode(bodyNode, \"BlockStatement\");\n  return this.finishNode(node, \"DeclareModule\");\n};\n\npp$8.flowParseDeclareModuleExports = function (node) {\n  this.expectContextual(\"module\");\n  this.expect(types.dot);\n  this.expectContextual(\"exports\");\n  node.typeAnnotation = this.flowParseTypeAnnotation();\n  this.semicolon();\n\n  return this.finishNode(node, \"DeclareModuleExports\");\n};\n\npp$8.flowParseDeclareTypeAlias = function (node) {\n  this.next();\n  this.flowParseTypeAlias(node);\n  return this.finishNode(node, \"DeclareTypeAlias\");\n};\n\npp$8.flowParseDeclareOpaqueType = function (node) {\n  this.next();\n  this.flowParseOpaqueType(node, true);\n  return this.finishNode(node, \"DeclareOpaqueType\");\n};\n\npp$8.flowParseDeclareInterface = function (node) {\n  this.next();\n  this.flowParseInterfaceish(node);\n  return this.finishNode(node, \"DeclareInterface\");\n};\n\n// Interfaces\n\npp$8.flowParseInterfaceish = function (node) {\n  node.id = this.parseIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  node.extends = [];\n  node.mixins = [];\n\n  if (this.eat(types._extends)) {\n    do {\n      node.extends.push(this.flowParseInterfaceExtends());\n    } while (this.eat(types.comma));\n  }\n\n  if (this.isContextual(\"mixins\")) {\n    this.next();\n    do {\n      node.mixins.push(this.flowParseInterfaceExtends());\n    } while (this.eat(types.comma));\n  }\n\n  node.body = this.flowParseObjectType(true, false, false);\n};\n\npp$8.flowParseInterfaceExtends = function () {\n  var node = this.startNode();\n\n  node.id = this.flowParseQualifiedTypeIdentifier();\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterInstantiation();\n  } else {\n    node.typeParameters = null;\n  }\n\n  return this.finishNode(node, \"InterfaceExtends\");\n};\n\npp$8.flowParseInterface = function (node) {\n  this.flowParseInterfaceish(node, false);\n  return this.finishNode(node, \"InterfaceDeclaration\");\n};\n\npp$8.flowParseRestrictedIdentifier = function (liberal) {\n  if (primitiveTypes.indexOf(this.state.value) > -1) {\n    this.raise(this.state.start, \"Cannot overwrite primitive type \" + this.state.value);\n  }\n\n  return this.parseIdentifier(liberal);\n};\n\n// Type aliases\n\npp$8.flowParseTypeAlias = function (node) {\n  node.id = this.flowParseRestrictedIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  node.right = this.flowParseTypeInitialiser(types.eq);\n  this.semicolon();\n\n  return this.finishNode(node, \"TypeAlias\");\n};\n\n// Opaque type aliases\n\npp$8.flowParseOpaqueType = function (node, declare) {\n  this.expectContextual(\"type\");\n  node.id = this.flowParseRestrictedIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  // Parse the supertype\n  node.supertype = null;\n  if (this.match(types.colon)) {\n    node.supertype = this.flowParseTypeInitialiser(types.colon);\n  }\n\n  node.impltype = null;\n  if (!declare) {\n    node.impltype = this.flowParseTypeInitialiser(types.eq);\n  }\n  this.semicolon();\n\n  return this.finishNode(node, \"OpaqueType\");\n};\n\n// Type annotations\n\npp$8.flowParseTypeParameter = function () {\n  var node = this.startNode();\n\n  var variance = this.flowParseVariance();\n\n  var ident = this.flowParseTypeAnnotatableIdentifier();\n  node.name = ident.name;\n  node.variance = variance;\n  node.bound = ident.typeAnnotation;\n\n  if (this.match(types.eq)) {\n    this.eat(types.eq);\n    node.default = this.flowParseType();\n  }\n\n  return this.finishNode(node, \"TypeParameter\");\n};\n\npp$8.flowParseTypeParameterDeclaration = function () {\n  var oldInType = this.state.inType;\n  var node = this.startNode();\n  node.params = [];\n\n  this.state.inType = true;\n\n  // istanbul ignore else: this condition is already checked at all call sites\n  if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n    this.next();\n  } else {\n    this.unexpected();\n  }\n\n  do {\n    node.params.push(this.flowParseTypeParameter());\n    if (!this.isRelational(\">\")) {\n      this.expect(types.comma);\n    }\n  } while (!this.isRelational(\">\"));\n  this.expectRelational(\">\");\n\n  this.state.inType = oldInType;\n\n  return this.finishNode(node, \"TypeParameterDeclaration\");\n};\n\npp$8.flowParseTypeParameterInstantiation = function () {\n  var node = this.startNode();\n  var oldInType = this.state.inType;\n  node.params = [];\n\n  this.state.inType = true;\n\n  this.expectRelational(\"<\");\n  while (!this.isRelational(\">\")) {\n    node.params.push(this.flowParseType());\n    if (!this.isRelational(\">\")) {\n      this.expect(types.comma);\n    }\n  }\n  this.expectRelational(\">\");\n\n  this.state.inType = oldInType;\n\n  return this.finishNode(node, \"TypeParameterInstantiation\");\n};\n\npp$8.flowParseObjectPropertyKey = function () {\n  return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n};\n\npp$8.flowParseObjectTypeIndexer = function (node, isStatic, variance) {\n  node.static = isStatic;\n\n  this.expect(types.bracketL);\n  if (this.lookahead().type === types.colon) {\n    node.id = this.flowParseObjectPropertyKey();\n    node.key = this.flowParseTypeInitialiser();\n  } else {\n    node.id = null;\n    node.key = this.flowParseType();\n  }\n  this.expect(types.bracketR);\n  node.value = this.flowParseTypeInitialiser();\n  node.variance = variance;\n\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeIndexer\");\n};\n\npp$8.flowParseObjectTypeMethodish = function (node) {\n  node.params = [];\n  node.rest = null;\n  node.typeParameters = null;\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  }\n\n  this.expect(types.parenL);\n  while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n    node.params.push(this.flowParseFunctionTypeParam());\n    if (!this.match(types.parenR)) {\n      this.expect(types.comma);\n    }\n  }\n\n  if (this.eat(types.ellipsis)) {\n    node.rest = this.flowParseFunctionTypeParam();\n  }\n  this.expect(types.parenR);\n  node.returnType = this.flowParseTypeInitialiser();\n\n  return this.finishNode(node, \"FunctionTypeAnnotation\");\n};\n\npp$8.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));\n  node.static = isStatic;\n  node.key = key;\n  node.optional = false;\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeProperty\");\n};\n\npp$8.flowParseObjectTypeCallProperty = function (node, isStatic) {\n  var valueNode = this.startNode();\n  node.static = isStatic;\n  node.value = this.flowParseObjectTypeMethodish(valueNode);\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeCallProperty\");\n};\n\npp$8.flowParseObjectType = function (allowStatic, allowExact, allowSpread) {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n\n  var nodeStart = this.startNode();\n  var node = void 0;\n  var propertyKey = void 0;\n  var isStatic = false;\n\n  nodeStart.callProperties = [];\n  nodeStart.properties = [];\n  nodeStart.indexers = [];\n\n  var endDelim = void 0;\n  var exact = void 0;\n  if (allowExact && this.match(types.braceBarL)) {\n    this.expect(types.braceBarL);\n    endDelim = types.braceBarR;\n    exact = true;\n  } else {\n    this.expect(types.braceL);\n    endDelim = types.braceR;\n    exact = false;\n  }\n\n  nodeStart.exact = exact;\n\n  while (!this.match(endDelim)) {\n    var optional = false;\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    node = this.startNode();\n    if (allowStatic && this.isContextual(\"static\") && this.lookahead().type !== types.colon) {\n      this.next();\n      isStatic = true;\n    }\n\n    var variancePos = this.state.start;\n    var variance = this.flowParseVariance();\n\n    if (this.match(types.bracketL)) {\n      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n    } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      if (variance) {\n        this.unexpected(variancePos);\n      }\n      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n    } else {\n      if (this.match(types.ellipsis)) {\n        if (!allowSpread) {\n          this.unexpected(null, \"Spread operator cannot appear in class or interface definitions\");\n        }\n        if (variance) {\n          this.unexpected(variance.start, \"Spread properties cannot have variance\");\n        }\n        this.expect(types.ellipsis);\n        node.argument = this.flowParseType();\n        this.flowObjectTypeSemicolon();\n        nodeStart.properties.push(this.finishNode(node, \"ObjectTypeSpreadProperty\"));\n      } else {\n        propertyKey = this.flowParseObjectPropertyKey();\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          // This is a method property\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));\n        } else {\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n          node.key = propertyKey;\n          node.value = this.flowParseTypeInitialiser();\n          node.optional = optional;\n          node.static = isStatic;\n          node.variance = variance;\n          this.flowObjectTypeSemicolon();\n          nodeStart.properties.push(this.finishNode(node, \"ObjectTypeProperty\"));\n        }\n      }\n    }\n\n    isStatic = false;\n  }\n\n  this.expect(endDelim);\n\n  var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n  this.state.inType = oldInType;\n\n  return out;\n};\n\npp$8.flowObjectTypeSemicolon = function () {\n  if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n    this.unexpected();\n  }\n};\n\npp$8.flowParseQualifiedTypeIdentifier = function (startPos, startLoc, id) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n  var node = id || this.parseIdentifier();\n\n  while (this.eat(types.dot)) {\n    var node2 = this.startNodeAt(startPos, startLoc);\n    node2.qualification = node;\n    node2.id = this.parseIdentifier();\n    node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n  }\n\n  return node;\n};\n\npp$8.flowParseGenericType = function (startPos, startLoc, id) {\n  var node = this.startNodeAt(startPos, startLoc);\n\n  node.typeParameters = null;\n  node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterInstantiation();\n  }\n\n  return this.finishNode(node, \"GenericTypeAnnotation\");\n};\n\npp$8.flowParseTypeofType = function () {\n  var node = this.startNode();\n  this.expect(types._typeof);\n  node.argument = this.flowParsePrimaryType();\n  return this.finishNode(node, \"TypeofTypeAnnotation\");\n};\n\npp$8.flowParseTupleType = function () {\n  var node = this.startNode();\n  node.types = [];\n  this.expect(types.bracketL);\n  // We allow trailing commas\n  while (this.state.pos < this.input.length && !this.match(types.bracketR)) {\n    node.types.push(this.flowParseType());\n    if (this.match(types.bracketR)) break;\n    this.expect(types.comma);\n  }\n  this.expect(types.bracketR);\n  return this.finishNode(node, \"TupleTypeAnnotation\");\n};\n\npp$8.flowParseFunctionTypeParam = function () {\n  var name = null;\n  var optional = false;\n  var typeAnnotation = null;\n  var node = this.startNode();\n  var lh = this.lookahead();\n  if (lh.type === types.colon || lh.type === types.question) {\n    name = this.parseIdentifier();\n    if (this.eat(types.question)) {\n      optional = true;\n    }\n    typeAnnotation = this.flowParseTypeInitialiser();\n  } else {\n    typeAnnotation = this.flowParseType();\n  }\n  node.name = name;\n  node.optional = optional;\n  node.typeAnnotation = typeAnnotation;\n  return this.finishNode(node, \"FunctionTypeParam\");\n};\n\npp$8.reinterpretTypeAsFunctionTypeParam = function (type) {\n  var node = this.startNodeAt(type.start, type.loc.start);\n  node.name = null;\n  node.optional = false;\n  node.typeAnnotation = type;\n  return this.finishNode(node, \"FunctionTypeParam\");\n};\n\npp$8.flowParseFunctionTypeParams = function () {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var ret = { params: params, rest: null };\n  while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n    ret.params.push(this.flowParseFunctionTypeParam());\n    if (!this.match(types.parenR)) {\n      this.expect(types.comma);\n    }\n  }\n  if (this.eat(types.ellipsis)) {\n    ret.rest = this.flowParseFunctionTypeParam();\n  }\n  return ret;\n};\n\npp$8.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {\n  switch (id.name) {\n    case \"any\":\n      return this.finishNode(node, \"AnyTypeAnnotation\");\n\n    case \"void\":\n      return this.finishNode(node, \"VoidTypeAnnotation\");\n\n    case \"bool\":\n    case \"boolean\":\n      return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n    case \"mixed\":\n      return this.finishNode(node, \"MixedTypeAnnotation\");\n\n    case \"empty\":\n      return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n    case \"number\":\n      return this.finishNode(node, \"NumberTypeAnnotation\");\n\n    case \"string\":\n      return this.finishNode(node, \"StringTypeAnnotation\");\n\n    default:\n      return this.flowParseGenericType(startPos, startLoc, id);\n  }\n};\n\n// The parsing of types roughly parallels the parsing of expressions, and\n// primary types are kind of like primary expressions...they're the\n// primitives with which other types are constructed.\npp$8.flowParsePrimaryType = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var node = this.startNode();\n  var tmp = void 0;\n  var type = void 0;\n  var isGroupedType = false;\n  var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n  switch (this.state.type) {\n    case types.name:\n      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n    case types.braceL:\n      return this.flowParseObjectType(false, false, true);\n\n    case types.braceBarL:\n      return this.flowParseObjectType(false, true, true);\n\n    case types.bracketL:\n      return this.flowParseTupleType();\n\n    case types.relational:\n      if (this.state.value === \"<\") {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(types.parenL);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n\n        this.expect(types.arrow);\n\n        node.returnType = this.flowParseType();\n\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      break;\n\n    case types.parenL:\n      this.next();\n\n      // Check to see if this is actually a grouped type\n      if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        if (this.match(types.name)) {\n          var token = this.lookahead().type;\n          isGroupedType = token !== types.question && token !== types.colon;\n        } else {\n          isGroupedType = true;\n        }\n      }\n\n      if (isGroupedType) {\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n        // A `,` or a `) =>` means this is an anonymous function type\n        if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n          this.expect(types.parenR);\n          return type;\n        } else {\n          // Eat a comma if there is one\n          this.eat(types.comma);\n        }\n      }\n\n      if (type) {\n        tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n      } else {\n        tmp = this.flowParseFunctionTypeParams();\n      }\n\n      node.params = tmp.params;\n      node.rest = tmp.rest;\n\n      this.expect(types.parenR);\n\n      this.expect(types.arrow);\n\n      node.returnType = this.flowParseType();\n\n      node.typeParameters = null;\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n    case types.string:\n      return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n    case types._true:case types._false:\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n    case types.plusMin:\n      if (this.state.value === \"-\") {\n        this.next();\n        if (!this.match(types.num)) this.unexpected(null, \"Unexpected token, expected number\");\n\n        return this.parseLiteral(-this.state.value, \"NumericLiteralTypeAnnotation\", node.start, node.loc.start);\n      }\n\n      this.unexpected();\n    case types.num:\n      return this.parseLiteral(this.state.value, \"NumericLiteralTypeAnnotation\");\n\n    case types._null:\n      node.value = this.match(types._null);\n      this.next();\n      return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n    case types._this:\n      node.value = this.match(types._this);\n      this.next();\n      return this.finishNode(node, \"ThisTypeAnnotation\");\n\n    case types.star:\n      this.next();\n      return this.finishNode(node, \"ExistentialTypeParam\");\n\n    default:\n      if (this.state.type.keyword === \"typeof\") {\n        return this.flowParseTypeofType();\n      }\n  }\n\n  this.unexpected();\n};\n\npp$8.flowParsePostfixType = function () {\n  var startPos = this.state.start,\n      startLoc = this.state.startLoc;\n  var type = this.flowParsePrimaryType();\n  while (!this.canInsertSemicolon() && this.match(types.bracketL)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.elementType = type;\n    this.expect(types.bracketL);\n    this.expect(types.bracketR);\n    type = this.finishNode(node, \"ArrayTypeAnnotation\");\n  }\n  return type;\n};\n\npp$8.flowParsePrefixType = function () {\n  var node = this.startNode();\n  if (this.eat(types.question)) {\n    node.typeAnnotation = this.flowParsePrefixType();\n    return this.finishNode(node, \"NullableTypeAnnotation\");\n  } else {\n    return this.flowParsePostfixType();\n  }\n};\n\npp$8.flowParseAnonFunctionWithoutParens = function () {\n  var param = this.flowParsePrefixType();\n  if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n    var node = this.startNodeAt(param.start, param.loc.start);\n    node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n    node.rest = null;\n    node.returnType = this.flowParseType();\n    node.typeParameters = null;\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  return param;\n};\n\npp$8.flowParseIntersectionType = function () {\n  var node = this.startNode();\n  this.eat(types.bitwiseAND);\n  var type = this.flowParseAnonFunctionWithoutParens();\n  node.types = [type];\n  while (this.eat(types.bitwiseAND)) {\n    node.types.push(this.flowParseAnonFunctionWithoutParens());\n  }\n  return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n};\n\npp$8.flowParseUnionType = function () {\n  var node = this.startNode();\n  this.eat(types.bitwiseOR);\n  var type = this.flowParseIntersectionType();\n  node.types = [type];\n  while (this.eat(types.bitwiseOR)) {\n    node.types.push(this.flowParseIntersectionType());\n  }\n  return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n};\n\npp$8.flowParseType = function () {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  var type = this.flowParseUnionType();\n  this.state.inType = oldInType;\n  return type;\n};\n\npp$8.flowParseTypeAnnotation = function () {\n  var node = this.startNode();\n  node.typeAnnotation = this.flowParseTypeInitialiser();\n  return this.finishNode(node, \"TypeAnnotation\");\n};\n\npp$8.flowParseTypeAndPredicateAnnotation = function () {\n  var node = this.startNode();\n\n  var _flowParseTypeAndPred2 = this.flowParseTypeAndPredicateInitialiser();\n\n  node.typeAnnotation = _flowParseTypeAndPred2[0];\n  node.predicate = _flowParseTypeAndPred2[1];\n\n  return this.finishNode(node, \"TypeAnnotation\");\n};\n\npp$8.flowParseTypeAnnotatableIdentifier = function () {\n  var ident = this.flowParseRestrictedIdentifier();\n  if (this.match(types.colon)) {\n    ident.typeAnnotation = this.flowParseTypeAnnotation();\n    this.finishNode(ident, ident.type);\n  }\n  return ident;\n};\n\npp$8.typeCastToParameter = function (node) {\n  node.expression.typeAnnotation = node.typeAnnotation;\n\n  return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n};\n\npp$8.flowParseVariance = function () {\n  var variance = null;\n  if (this.match(types.plusMin)) {\n    if (this.state.value === \"+\") {\n      variance = \"plus\";\n    } else if (this.state.value === \"-\") {\n      variance = \"minus\";\n    }\n    this.next();\n  }\n  return variance;\n};\n\nvar flowPlugin = function (instance) {\n  // plain function return types: function name(): string {}\n  instance.extend(\"parseFunctionBody\", function (inner) {\n    return function (node, allowExpression) {\n      if (this.match(types.colon) && !allowExpression) {\n        // if allowExpression is true then we're parsing an arrow function and if\n        // there's a return type then it's been handled elsewhere\n        node.returnType = this.flowParseTypeAndPredicateAnnotation();\n      }\n\n      return inner.call(this, node, allowExpression);\n    };\n  });\n\n  // interfaces\n  instance.extend(\"parseStatement\", function (inner) {\n    return function (declaration, topLevel) {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        var node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else {\n        return inner.call(this, declaration, topLevel);\n      }\n    };\n  });\n\n  // declares, interfaces and type aliases\n  instance.extend(\"parseExpressionStatement\", function (inner) {\n    return function (node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return inner.call(this, node, expr);\n    };\n  });\n\n  // export type\n  instance.extend(\"shouldParseExportDeclaration\", function (inner) {\n    return function () {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || inner.call(this);\n    };\n  });\n\n  instance.extend(\"isExportDefaultSpecifier\", function (inner) {\n    return function () {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\")) {\n        return false;\n      }\n\n      return inner.call(this);\n    };\n  });\n\n  instance.extend(\"parseConditional\", function (inner) {\n    return function (expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos && this.match(types.question)) {\n        var state = this.state.clone();\n        try {\n          return inner.call(this, expr, noIn, startPos, startLoc);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n            refNeedsArrowPos.start = err.pos || this.state.start;\n            return expr;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return inner.call(this, expr, noIn, startPos, startLoc);\n    };\n  });\n\n  instance.extend(\"parseParenItem\", function (inner) {\n    return function (node, startPos, startLoc) {\n      node = inner.call(this, node, startPos, startLoc);\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        var typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseExport\", function (inner) {\n    return function (node) {\n      node = inner.call(this, node);\n      if (node.type === \"ExportNamedDeclaration\") {\n        node.exportKind = node.exportKind || \"value\";\n      }\n      return node;\n    };\n  });\n\n  instance.extend(\"parseExportDeclaration\", function (inner) {\n    return function (node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        var declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        var _declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(_declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        var _declarationNode2 = this.startNode();\n        this.next();\n        return this.flowParseInterface(_declarationNode2);\n      } else {\n        return inner.call(this, node);\n      }\n    };\n  });\n\n  instance.extend(\"parseClassId\", function (inner) {\n    return function (node) {\n      inner.apply(this, arguments);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    };\n  });\n\n  // don't consider `void` to be a keyword as then it'll use the void token type\n  // and set startExpr\n  instance.extend(\"isKeyword\", function (inner) {\n    return function (name) {\n      if (this.state.inType && name === \"void\") {\n        return false;\n      } else {\n        return inner.call(this, name);\n      }\n    };\n  });\n\n  // ensure that inside flow types, we bypass the jsx parser plugin\n  instance.extend(\"readToken\", function (inner) {\n    return function (code) {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else {\n        return inner.call(this, code);\n      }\n    };\n  });\n\n  // don't lex any token as a jsx one inside a flow type\n  instance.extend(\"jsx_readToken\", function (inner) {\n    return function () {\n      if (!this.state.inType) return inner.call(this);\n    };\n  });\n\n  instance.extend(\"toAssignable\", function (inner) {\n    return function (node, isBinding, contextDescription) {\n      if (node.type === \"TypeCastExpression\") {\n        return inner.call(this, this.typeCastToParameter(node), isBinding, contextDescription);\n      } else {\n        return inner.call(this, node, isBinding, contextDescription);\n      }\n    };\n  });\n\n  // turn type casts that we found in function parameter head into type annotated params\n  instance.extend(\"toAssignableList\", function (inner) {\n    return function (exprList, isBinding, contextDescription) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return inner.call(this, exprList, isBinding, contextDescription);\n    };\n  });\n\n  // this is a list of nodes, from something like a call expression, we need to filter the\n  // type casts that we've found that are illegal in this context\n  instance.extend(\"toReferencedList\", function () {\n    return function (exprList) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n        if (expr && expr._exprListItem && expr.type === \"TypeCastExpression\") {\n          this.raise(expr.start, \"Unexpected type cast\");\n        }\n      }\n\n      return exprList;\n    };\n  });\n\n  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents\n  // the position where this function is called\n  instance.extend(\"parseExprListItem\", function (inner) {\n    return function () {\n      var container = this.startNode();\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n      if (this.match(types.colon)) {\n        container._exprListItem = true;\n        container.expression = node;\n        container.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(container, \"TypeCastExpression\");\n      } else {\n        return node;\n      }\n    };\n  });\n\n  instance.extend(\"checkLVal\", function (inner) {\n    return function (node) {\n      if (node.type !== \"TypeCastExpression\") {\n        return inner.apply(this, arguments);\n      }\n    };\n  });\n\n  // parse class property type annotations\n  instance.extend(\"parseClassProperty\", function (inner) {\n    return function (node) {\n      delete node.variancePos;\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return inner.call(this, node);\n    };\n  });\n\n  // determine whether or not we're currently in the position where a class method would appear\n  instance.extend(\"isClassMethod\", function (inner) {\n    return function () {\n      return this.isRelational(\"<\") || inner.call(this);\n    };\n  });\n\n  // determine whether or not we're currently in the position where a class property would appear\n  instance.extend(\"isClassProperty\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n\n  instance.extend(\"isNonstaticConstructor\", function (inner) {\n    return function (method) {\n      return !this.match(types.colon) && inner.call(this, method);\n    };\n  });\n\n  // parse type parameters for class methods\n  instance.extend(\"parseClassMethod\", function (inner) {\n    return function (classBody, method) {\n      if (method.variance) {\n        this.unexpected(method.variancePos);\n      }\n      delete method.variance;\n      delete method.variancePos;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      inner.call.apply(inner, [this, classBody, method].concat(args));\n    };\n  });\n\n  // parse a the super class type parameters and implements\n  instance.extend(\"parseClassSuper\", function (inner) {\n    return function (node, isStatement) {\n      inner.call(this, node, isStatement);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        var implemented = node.implements = [];\n        do {\n          var _node = this.startNode();\n          _node.id = this.parseIdentifier();\n          if (this.isRelational(\"<\")) {\n            _node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            _node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(_node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    };\n  });\n\n  instance.extend(\"parsePropertyName\", function (inner) {\n    return function (node) {\n      var variancePos = this.state.start;\n      var variance = this.flowParseVariance();\n      var key = inner.call(this, node);\n      node.variance = variance;\n      node.variancePos = variancePos;\n      return key;\n    };\n  });\n\n  // parse type parameters for object method shorthand\n  instance.extend(\"parseObjPropValue\", function (inner) {\n    return function (prop) {\n      if (prop.variance) {\n        this.unexpected(prop.variancePos);\n      }\n      delete prop.variance;\n      delete prop.variancePos;\n\n      var typeParameters = void 0;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      inner.apply(this, arguments);\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    };\n  });\n\n  instance.extend(\"parseAssignableListItemTypes\", function () {\n    return function (param) {\n      if (this.eat(types.question)) {\n        param.optional = true;\n      }\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.finishNode(param, param.type);\n      return param;\n    };\n  });\n\n  instance.extend(\"parseMaybeDefault\", function (inner) {\n    return function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var node = inner.apply(this, args);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\");\n      }\n\n      return node;\n    };\n  });\n\n  // parse typeof and type imports\n  instance.extend(\"parseImportSpecifiers\", function (inner) {\n    return function (node) {\n      node.importKind = \"value\";\n\n      var kind = null;\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        var lh = this.lookahead();\n        if (lh.type === types.name && lh.value !== \"from\" || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      inner.call(this, node);\n    };\n  });\n\n  // parse import-type/typeof shorthand\n  instance.extend(\"parseImportSpecifier\", function () {\n    return function (node) {\n      var specifier = this.startNode();\n      var firstIdentLoc = this.state.start;\n      var firstIdent = this.parseIdentifier(true);\n\n      var specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      var isBinding = false;\n      if (this.isContextual(\"as\")) {\n        var as_ident = this.parseIdentifier(true);\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      if ((node.importKind === \"type\" || node.importKind === \"typeof\") && (specifier.importKind === \"type\" || specifier.importKind === \"typeof\")) {\n        this.raise(firstIdentLoc, \"`The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements`\");\n      }\n\n      if (isBinding) this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n\n      this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    };\n  });\n\n  // parse function type parameters - function foo<T>() {}\n  instance.extend(\"parseFunctionParams\", function (inner) {\n    return function (node) {\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      inner.call(this, node);\n    };\n  });\n\n  // parse flow type annotations on variable declarator heads - let foo: string = bar\n  instance.extend(\"parseVarHead\", function (inner) {\n    return function (decl) {\n      inner.call(this, decl);\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.finishNode(decl.id, decl.id.type);\n      }\n    };\n  });\n\n  // parse the return type of an async arrow function - let foo = (async (): number => {});\n  instance.extend(\"parseAsyncArrowFromCallExpression\", function (inner) {\n    return function (node, call) {\n      if (this.match(types.colon)) {\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return inner.call(this, node, call);\n    };\n  });\n\n  // todo description\n  instance.extend(\"shouldParseAsyncArrow\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n\n  // We need to support type parameter declarations for arrow functions. This\n  // is tricky. There are three situations we need to handle\n  //\n  // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n  //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n  //    error.\n  // 2. This is an arrow function. We'll parse the type parameter declaration,\n  //    parse the rest, make sure the rest is an arrow function, and go from\n  //    there\n  // 3. This is neither. Just call the inner function\n  instance.extend(\"parseMaybeAssign\", function (inner) {\n    return function () {\n      var jsxError = null;\n\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      if (types.jsxTagStart && this.match(types.jsxTagStart)) {\n        var state = this.state.clone();\n        try {\n          return inner.apply(this, args);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n\n            // Remove `tc.j_expr` and `tc.j_oTag` from context added\n            // by parsing `jsxTagStart` to stop the JSX plugin from\n            // messing with the tokens\n            this.state.context.length -= 2;\n\n            jsxError = err;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      if (jsxError != null || this.isRelational(\"<\")) {\n        var arrowExpression = void 0;\n        var typeParameters = void 0;\n        try {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          arrowExpression = inner.apply(this, args);\n          arrowExpression.typeParameters = typeParameters;\n          arrowExpression.start = typeParameters.start;\n          arrowExpression.loc.start = typeParameters.loc.start;\n        } catch (err) {\n          throw jsxError || err;\n        }\n\n        if (arrowExpression.type === \"ArrowFunctionExpression\") {\n          return arrowExpression;\n        } else if (jsxError != null) {\n          throw jsxError;\n        } else {\n          this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n        }\n      }\n\n      return inner.apply(this, args);\n    };\n  });\n\n  // handle return types for arrow functions\n  instance.extend(\"parseArrow\", function (inner) {\n    return function (node) {\n      if (this.match(types.colon)) {\n        var state = this.state.clone();\n        try {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          var returnType = this.flowParseTypeAndPredicateAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          // assign after it is clear it is an arrow\n          node.returnType = returnType;\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return inner.call(this, node);\n    };\n  });\n\n  instance.extend(\"shouldParseArrow\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n};\n\n// Adapted from String.fromcodepoint to export the function without modifying String\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\n\n// The MIT License (MIT)\n// Copyright (c) Mathias Bynens\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n// associated documentation files (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge, publish, distribute,\n// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or\n// substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar fromCodePoint = String.fromCodePoint;\n\nif (!fromCodePoint) {\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  fromCodePoint = function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate = void 0;\n    var lowSurrogate = void 0;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return \"\";\n    }\n    var result = \"\";\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 || // not a valid Unicode code point\n      codePoint > 0x10FFFF || // not a valid Unicode code point\n      floor(codePoint) != codePoint // not an integer\n      ) {\n          throw RangeError(\"Invalid code point: \" + codePoint);\n        }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = codePoint % 0x400 + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  };\n}\n\nvar fromCodePoint$1 = fromCodePoint;\n\nvar XHTMLEntities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  \"int\": \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\n\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(types$1.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  var out = this.state.context.pop();\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nvar pp$9 = Parser.prototype;\n\n// Reads inline JSX contents token.\n\npp$9.jsxReadToken = function () {\n  var out = \"\";\n  var chunkStart = this.state.pos;\n  for (;;) {\n    if (this.state.pos >= this.input.length) {\n      this.raise(this.state.start, \"Unterminated JSX contents\");\n    }\n\n    var ch = this.input.charCodeAt(this.state.pos);\n\n    switch (ch) {\n      case 60: // \"<\"\n      case 123:\n        // \"{\"\n        if (this.state.pos === this.state.start) {\n          if (ch === 60 && this.state.exprAllowed) {\n            ++this.state.pos;\n            return this.finishToken(types.jsxTagStart);\n          }\n          return this.getTokenFromCode(ch);\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        return this.finishToken(types.jsxText, out);\n\n      case 38:\n        // \"&\"\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n        break;\n\n      default:\n        if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(true);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n    }\n  }\n};\n\npp$9.jsxReadNewLine = function (normalizeCRLF) {\n  var ch = this.input.charCodeAt(this.state.pos);\n  var out = void 0;\n  ++this.state.pos;\n  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n    ++this.state.pos;\n    out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n  } else {\n    out = String.fromCharCode(ch);\n  }\n  ++this.state.curLine;\n  this.state.lineStart = this.state.pos;\n\n  return out;\n};\n\npp$9.jsxReadString = function (quote) {\n  var out = \"\";\n  var chunkStart = ++this.state.pos;\n  for (;;) {\n    if (this.state.pos >= this.input.length) {\n      this.raise(this.state.start, \"Unterminated string constant\");\n    }\n\n    var ch = this.input.charCodeAt(this.state.pos);\n    if (ch === quote) break;\n    if (ch === 38) {\n      // \"&\"\n      out += this.input.slice(chunkStart, this.state.pos);\n      out += this.jsxReadEntity();\n      chunkStart = this.state.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.state.pos);\n      out += this.jsxReadNewLine(false);\n      chunkStart = this.state.pos;\n    } else {\n      ++this.state.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.state.pos++);\n  return this.finishToken(types.string, out);\n};\n\npp$9.jsxReadEntity = function () {\n  var str = \"\";\n  var count = 0;\n  var entity = void 0;\n  var ch = this.input[this.state.pos];\n\n  var startPos = ++this.state.pos;\n  while (this.state.pos < this.input.length && count++ < 10) {\n    ch = this.input[this.state.pos++];\n    if (ch === \";\") {\n      if (str[0] === \"#\") {\n        if (str[1] === \"x\") {\n          str = str.substr(2);\n          if (HEX_NUMBER.test(str)) entity = fromCodePoint$1(parseInt(str, 16));\n        } else {\n          str = str.substr(1);\n          if (DECIMAL_NUMBER.test(str)) entity = fromCodePoint$1(parseInt(str, 10));\n        }\n      } else {\n        entity = XHTMLEntities[str];\n      }\n      break;\n    }\n    str += ch;\n  }\n  if (!entity) {\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  return entity;\n};\n\n// Read a JSX identifier (valid tag or attribute name).\n//\n// Optimized version since JSX identifiers can\"t contain\n// escape characters and so can be read as single slice.\n// Also assumes that first character was already checked\n// by isIdentifierStart in readToken.\n\npp$9.jsxReadWord = function () {\n  var ch = void 0;\n  var start = this.state.pos;\n  do {\n    ch = this.input.charCodeAt(++this.state.pos);\n  } while (isIdentifierChar(ch) || ch === 45); // \"-\"\n  return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n};\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n}\n\n// Parse next token as JSX identifier\n\npp$9.jsxParseIdentifier = function () {\n  var node = this.startNode();\n  if (this.match(types.jsxName)) {\n    node.name = this.state.value;\n  } else if (this.state.type.keyword) {\n    node.name = this.state.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"JSXIdentifier\");\n};\n\n// Parse namespaced identifier.\n\npp$9.jsxParseNamespacedName = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var name = this.jsxParseIdentifier();\n  if (!this.eat(types.colon)) return name;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.namespace = name;\n  node.name = this.jsxParseIdentifier();\n  return this.finishNode(node, \"JSXNamespacedName\");\n};\n\n// Parses element name in any form - namespaced, member\n// or single identifier.\n\npp$9.jsxParseElementName = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var node = this.jsxParseNamespacedName();\n  while (this.eat(types.dot)) {\n    var newNode = this.startNodeAt(startPos, startLoc);\n    newNode.object = node;\n    newNode.property = this.jsxParseIdentifier();\n    node = this.finishNode(newNode, \"JSXMemberExpression\");\n  }\n  return node;\n};\n\n// Parses any type of JSX attribute value.\n\npp$9.jsxParseAttributeValue = function () {\n  var node = void 0;\n  switch (this.state.type) {\n    case types.braceL:\n      node = this.jsxParseExpressionContainer();\n      if (node.expression.type === \"JSXEmptyExpression\") {\n        this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n      } else {\n        return node;\n      }\n\n    case types.jsxTagStart:\n    case types.string:\n      node = this.parseExprAtom();\n      node.extra = null;\n      return node;\n\n    default:\n      this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n  }\n};\n\n// JSXEmptyExpression is unique type since it doesn't actually parse anything,\n// and so it should start at the end of last read token (left brace) and finish\n// at the beginning of the next one (right brace).\n\npp$9.jsxParseEmptyExpression = function () {\n  var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n  return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n};\n\n// Parse JSX spread child\n\npp$9.jsxParseSpreadChild = function () {\n  var node = this.startNode();\n  this.expect(types.braceL);\n  this.expect(types.ellipsis);\n  node.expression = this.parseExpression();\n  this.expect(types.braceR);\n\n  return this.finishNode(node, \"JSXSpreadChild\");\n};\n\n// Parses JSX expression enclosed into curly brackets.\n\n\npp$9.jsxParseExpressionContainer = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.match(types.braceR)) {\n    node.expression = this.jsxParseEmptyExpression();\n  } else {\n    node.expression = this.parseExpression();\n  }\n  this.expect(types.braceR);\n  return this.finishNode(node, \"JSXExpressionContainer\");\n};\n\n// Parses following JSX attribute name-value pair.\n\npp$9.jsxParseAttribute = function () {\n  var node = this.startNode();\n  if (this.eat(types.braceL)) {\n    this.expect(types.ellipsis);\n    node.argument = this.parseMaybeAssign();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadAttribute\");\n  }\n  node.name = this.jsxParseNamespacedName();\n  node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n  return this.finishNode(node, \"JSXAttribute\");\n};\n\n// Parses JSX opening tag starting after \"<\".\n\npp$9.jsxParseOpeningElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.attributes = [];\n  node.name = this.jsxParseElementName();\n  while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n    node.attributes.push(this.jsxParseAttribute());\n  }\n  node.selfClosing = this.eat(types.slash);\n  this.expect(types.jsxTagEnd);\n  return this.finishNode(node, \"JSXOpeningElement\");\n};\n\n// Parses JSX closing tag starting after \"</\".\n\npp$9.jsxParseClosingElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.name = this.jsxParseElementName();\n  this.expect(types.jsxTagEnd);\n  return this.finishNode(node, \"JSXClosingElement\");\n};\n\n// Parses entire JSX element, including it\"s opening tag\n// (starting after \"<\"), attributes, contents and closing tag.\n\npp$9.jsxParseElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  var children = [];\n  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n  var closingElement = null;\n\n  if (!openingElement.selfClosing) {\n    contents: for (;;) {\n      switch (this.state.type) {\n        case types.jsxTagStart:\n          startPos = this.state.start;startLoc = this.state.startLoc;\n          this.next();\n          if (this.eat(types.slash)) {\n            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n            break contents;\n          }\n          children.push(this.jsxParseElementAt(startPos, startLoc));\n          break;\n\n        case types.jsxText:\n          children.push(this.parseExprAtom());\n          break;\n\n        case types.braceL:\n          if (this.lookahead().type === types.ellipsis) {\n            children.push(this.jsxParseSpreadChild());\n          } else {\n            children.push(this.jsxParseExpressionContainer());\n          }\n\n          break;\n\n        // istanbul ignore next - should never happen\n        default:\n          this.unexpected();\n      }\n    }\n\n    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n      this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n    }\n  }\n\n  node.openingElement = openingElement;\n  node.closingElement = closingElement;\n  node.children = children;\n  if (this.match(types.relational) && this.state.value === \"<\") {\n    this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n  }\n  return this.finishNode(node, \"JSXElement\");\n};\n\n// Parses entire JSX element from current position.\n\npp$9.jsxParseElement = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  this.next();\n  return this.jsxParseElementAt(startPos, startLoc);\n};\n\nvar jsxPlugin = function (instance) {\n  instance.extend(\"parseExprAtom\", function (inner) {\n    return function (refShortHandDefaultPos) {\n      if (this.match(types.jsxText)) {\n        var node = this.parseLiteral(this.state.value, \"JSXText\");\n        // https://github.com/babel/babel/issues/2078\n        node.extra = null;\n        return node;\n      } else if (this.match(types.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else {\n        return inner.call(this, refShortHandDefaultPos);\n      }\n    };\n  });\n\n  instance.extend(\"readToken\", function (inner) {\n    return function (code) {\n      if (this.state.inPropertyName) return inner.call(this, code);\n\n      var context = this.curContext();\n\n      if (context === types$1.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === types$1.j_oTag || context === types$1.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === 62) {\n          ++this.state.pos;\n          return this.finishToken(types.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (code === 60 && this.state.exprAllowed) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagStart);\n      }\n\n      return inner.call(this, code);\n    };\n  });\n\n  instance.extend(\"updateContext\", function (inner) {\n    return function (prevType) {\n      if (this.match(types.braceL)) {\n        var curContext = this.curContext();\n        if (curContext === types$1.j_oTag) {\n          this.state.context.push(types$1.braceExpression);\n        } else if (curContext === types$1.j_expr) {\n          this.state.context.push(types$1.templateQuasi);\n        } else {\n          inner.call(this, prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(types$1.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return inner.call(this, prevType);\n      }\n    };\n  });\n};\n\nplugins.estree = estreePlugin;\nplugins.flow = flowPlugin;\nplugins.jsx = jsxPlugin;\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse();\n}\n\nfunction parseExpression(input, options) {\n  var parser = new Parser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1159,"column":0},"generated":{"line":1159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1160,"column":0},"generated":{"line":1160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1161,"column":0},"generated":{"line":1161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1162,"column":0},"generated":{"line":1162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1163,"column":0},"generated":{"line":1163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1164,"column":0},"generated":{"line":1164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1165,"column":0},"generated":{"line":1165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1166,"column":0},"generated":{"line":1166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1167,"column":0},"generated":{"line":1167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1168,"column":0},"generated":{"line":1168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1169,"column":0},"generated":{"line":1169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1170,"column":0},"generated":{"line":1170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1171,"column":0},"generated":{"line":1171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1172,"column":0},"generated":{"line":1172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1173,"column":0},"generated":{"line":1173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1174,"column":0},"generated":{"line":1174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1175,"column":0},"generated":{"line":1175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1176,"column":0},"generated":{"line":1176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1177,"column":0},"generated":{"line":1177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1178,"column":0},"generated":{"line":1178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1179,"column":0},"generated":{"line":1179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1180,"column":0},"generated":{"line":1180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1181,"column":0},"generated":{"line":1181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1182,"column":0},"generated":{"line":1182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1183,"column":0},"generated":{"line":1183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1184,"column":0},"generated":{"line":1184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1185,"column":0},"generated":{"line":1185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1186,"column":0},"generated":{"line":1186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1187,"column":0},"generated":{"line":1187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1188,"column":0},"generated":{"line":1188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1189,"column":0},"generated":{"line":1189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1190,"column":0},"generated":{"line":1190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1191,"column":0},"generated":{"line":1191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1192,"column":0},"generated":{"line":1192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1193,"column":0},"generated":{"line":1193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1194,"column":0},"generated":{"line":1194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1195,"column":0},"generated":{"line":1195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1196,"column":0},"generated":{"line":1196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1197,"column":0},"generated":{"line":1197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1198,"column":0},"generated":{"line":1198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1199,"column":0},"generated":{"line":1199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1200,"column":0},"generated":{"line":1200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1201,"column":0},"generated":{"line":1201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1202,"column":0},"generated":{"line":1202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1203,"column":0},"generated":{"line":1203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1204,"column":0},"generated":{"line":1204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1205,"column":0},"generated":{"line":1205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1206,"column":0},"generated":{"line":1206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1207,"column":0},"generated":{"line":1207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1208,"column":0},"generated":{"line":1208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1209,"column":0},"generated":{"line":1209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1210,"column":0},"generated":{"line":1210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1211,"column":0},"generated":{"line":1211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1212,"column":0},"generated":{"line":1212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1213,"column":0},"generated":{"line":1213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1214,"column":0},"generated":{"line":1214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1215,"column":0},"generated":{"line":1215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1216,"column":0},"generated":{"line":1216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1217,"column":0},"generated":{"line":1217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1218,"column":0},"generated":{"line":1218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1219,"column":0},"generated":{"line":1219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1220,"column":0},"generated":{"line":1220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1221,"column":0},"generated":{"line":1221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1222,"column":0},"generated":{"line":1222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1223,"column":0},"generated":{"line":1223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1224,"column":0},"generated":{"line":1224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1225,"column":0},"generated":{"line":1225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1226,"column":0},"generated":{"line":1226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1227,"column":0},"generated":{"line":1227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1228,"column":0},"generated":{"line":1228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1229,"column":0},"generated":{"line":1229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1230,"column":0},"generated":{"line":1230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1231,"column":0},"generated":{"line":1231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1232,"column":0},"generated":{"line":1232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1233,"column":0},"generated":{"line":1233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1234,"column":0},"generated":{"line":1234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1235,"column":0},"generated":{"line":1235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1236,"column":0},"generated":{"line":1236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1237,"column":0},"generated":{"line":1237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1238,"column":0},"generated":{"line":1238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1239,"column":0},"generated":{"line":1239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1240,"column":0},"generated":{"line":1240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1241,"column":0},"generated":{"line":1241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1242,"column":0},"generated":{"line":1242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1243,"column":0},"generated":{"line":1243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1244,"column":0},"generated":{"line":1244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1245,"column":0},"generated":{"line":1245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1246,"column":0},"generated":{"line":1246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1247,"column":0},"generated":{"line":1247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1248,"column":0},"generated":{"line":1248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1249,"column":0},"generated":{"line":1249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1250,"column":0},"generated":{"line":1250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1251,"column":0},"generated":{"line":1251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1252,"column":0},"generated":{"line":1252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1253,"column":0},"generated":{"line":1253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1254,"column":0},"generated":{"line":1254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1255,"column":0},"generated":{"line":1255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1256,"column":0},"generated":{"line":1256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1257,"column":0},"generated":{"line":1257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1258,"column":0},"generated":{"line":1258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1259,"column":0},"generated":{"line":1259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1260,"column":0},"generated":{"line":1260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1261,"column":0},"generated":{"line":1261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1262,"column":0},"generated":{"line":1262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1263,"column":0},"generated":{"line":1263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1264,"column":0},"generated":{"line":1264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1265,"column":0},"generated":{"line":1265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1266,"column":0},"generated":{"line":1266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1267,"column":0},"generated":{"line":1267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1268,"column":0},"generated":{"line":1268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1269,"column":0},"generated":{"line":1269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1270,"column":0},"generated":{"line":1270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1271,"column":0},"generated":{"line":1271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1272,"column":0},"generated":{"line":1272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1273,"column":0},"generated":{"line":1273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1274,"column":0},"generated":{"line":1274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1275,"column":0},"generated":{"line":1275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1276,"column":0},"generated":{"line":1276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1277,"column":0},"generated":{"line":1277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1278,"column":0},"generated":{"line":1278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1279,"column":0},"generated":{"line":1279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1280,"column":0},"generated":{"line":1280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1281,"column":0},"generated":{"line":1281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1282,"column":0},"generated":{"line":1282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1283,"column":0},"generated":{"line":1283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1284,"column":0},"generated":{"line":1284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1285,"column":0},"generated":{"line":1285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1286,"column":0},"generated":{"line":1286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1287,"column":0},"generated":{"line":1287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1288,"column":0},"generated":{"line":1288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1289,"column":0},"generated":{"line":1289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1290,"column":0},"generated":{"line":1290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1291,"column":0},"generated":{"line":1291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1292,"column":0},"generated":{"line":1292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1293,"column":0},"generated":{"line":1293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1294,"column":0},"generated":{"line":1294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1295,"column":0},"generated":{"line":1295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1296,"column":0},"generated":{"line":1296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1297,"column":0},"generated":{"line":1297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1298,"column":0},"generated":{"line":1298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1299,"column":0},"generated":{"line":1299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1300,"column":0},"generated":{"line":1300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1301,"column":0},"generated":{"line":1301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1302,"column":0},"generated":{"line":1302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1303,"column":0},"generated":{"line":1303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1304,"column":0},"generated":{"line":1304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1305,"column":0},"generated":{"line":1305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1306,"column":0},"generated":{"line":1306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1307,"column":0},"generated":{"line":1307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1308,"column":0},"generated":{"line":1308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1309,"column":0},"generated":{"line":1309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1310,"column":0},"generated":{"line":1310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1311,"column":0},"generated":{"line":1311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1312,"column":0},"generated":{"line":1312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1313,"column":0},"generated":{"line":1313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1314,"column":0},"generated":{"line":1314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1315,"column":0},"generated":{"line":1315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1316,"column":0},"generated":{"line":1316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1317,"column":0},"generated":{"line":1317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1318,"column":0},"generated":{"line":1318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1319,"column":0},"generated":{"line":1319,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1320,"column":0},"generated":{"line":1320,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1321,"column":0},"generated":{"line":1321,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1322,"column":0},"generated":{"line":1322,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1323,"column":0},"generated":{"line":1323,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1324,"column":0},"generated":{"line":1324,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1325,"column":0},"generated":{"line":1325,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1326,"column":0},"generated":{"line":1326,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1327,"column":0},"generated":{"line":1327,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1328,"column":0},"generated":{"line":1328,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1329,"column":0},"generated":{"line":1329,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1330,"column":0},"generated":{"line":1330,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1331,"column":0},"generated":{"line":1331,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1332,"column":0},"generated":{"line":1332,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1333,"column":0},"generated":{"line":1333,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1334,"column":0},"generated":{"line":1334,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1335,"column":0},"generated":{"line":1335,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1336,"column":0},"generated":{"line":1336,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1337,"column":0},"generated":{"line":1337,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1338,"column":0},"generated":{"line":1338,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1339,"column":0},"generated":{"line":1339,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1340,"column":0},"generated":{"line":1340,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1341,"column":0},"generated":{"line":1341,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1342,"column":0},"generated":{"line":1342,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1343,"column":0},"generated":{"line":1343,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1344,"column":0},"generated":{"line":1344,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1345,"column":0},"generated":{"line":1345,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1346,"column":0},"generated":{"line":1346,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1347,"column":0},"generated":{"line":1347,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1348,"column":0},"generated":{"line":1348,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1349,"column":0},"generated":{"line":1349,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1350,"column":0},"generated":{"line":1350,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1351,"column":0},"generated":{"line":1351,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1352,"column":0},"generated":{"line":1352,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1353,"column":0},"generated":{"line":1353,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1354,"column":0},"generated":{"line":1354,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1355,"column":0},"generated":{"line":1355,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1356,"column":0},"generated":{"line":1356,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1357,"column":0},"generated":{"line":1357,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1358,"column":0},"generated":{"line":1358,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1359,"column":0},"generated":{"line":1359,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1360,"column":0},"generated":{"line":1360,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1361,"column":0},"generated":{"line":1361,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1362,"column":0},"generated":{"line":1362,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1363,"column":0},"generated":{"line":1363,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1364,"column":0},"generated":{"line":1364,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1365,"column":0},"generated":{"line":1365,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1366,"column":0},"generated":{"line":1366,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1367,"column":0},"generated":{"line":1367,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1368,"column":0},"generated":{"line":1368,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1369,"column":0},"generated":{"line":1369,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1370,"column":0},"generated":{"line":1370,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1371,"column":0},"generated":{"line":1371,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1372,"column":0},"generated":{"line":1372,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1373,"column":0},"generated":{"line":1373,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1374,"column":0},"generated":{"line":1374,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1375,"column":0},"generated":{"line":1375,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1376,"column":0},"generated":{"line":1376,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1377,"column":0},"generated":{"line":1377,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1378,"column":0},"generated":{"line":1378,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1379,"column":0},"generated":{"line":1379,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1380,"column":0},"generated":{"line":1380,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1381,"column":0},"generated":{"line":1381,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1382,"column":0},"generated":{"line":1382,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1383,"column":0},"generated":{"line":1383,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1384,"column":0},"generated":{"line":1384,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1385,"column":0},"generated":{"line":1385,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1386,"column":0},"generated":{"line":1386,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1387,"column":0},"generated":{"line":1387,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1388,"column":0},"generated":{"line":1388,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1389,"column":0},"generated":{"line":1389,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1390,"column":0},"generated":{"line":1390,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1391,"column":0},"generated":{"line":1391,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1392,"column":0},"generated":{"line":1392,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1393,"column":0},"generated":{"line":1393,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1394,"column":0},"generated":{"line":1394,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1395,"column":0},"generated":{"line":1395,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1396,"column":0},"generated":{"line":1396,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1397,"column":0},"generated":{"line":1397,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1398,"column":0},"generated":{"line":1398,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1399,"column":0},"generated":{"line":1399,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1400,"column":0},"generated":{"line":1400,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1401,"column":0},"generated":{"line":1401,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1402,"column":0},"generated":{"line":1402,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1403,"column":0},"generated":{"line":1403,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1404,"column":0},"generated":{"line":1404,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1405,"column":0},"generated":{"line":1405,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1406,"column":0},"generated":{"line":1406,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1407,"column":0},"generated":{"line":1407,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1408,"column":0},"generated":{"line":1408,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1409,"column":0},"generated":{"line":1409,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1410,"column":0},"generated":{"line":1410,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1411,"column":0},"generated":{"line":1411,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1412,"column":0},"generated":{"line":1412,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1413,"column":0},"generated":{"line":1413,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1414,"column":0},"generated":{"line":1414,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1415,"column":0},"generated":{"line":1415,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1416,"column":0},"generated":{"line":1416,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1417,"column":0},"generated":{"line":1417,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1418,"column":0},"generated":{"line":1418,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1419,"column":0},"generated":{"line":1419,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1420,"column":0},"generated":{"line":1420,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1421,"column":0},"generated":{"line":1421,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1422,"column":0},"generated":{"line":1422,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1423,"column":0},"generated":{"line":1423,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1424,"column":0},"generated":{"line":1424,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1425,"column":0},"generated":{"line":1425,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1426,"column":0},"generated":{"line":1426,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1427,"column":0},"generated":{"line":1427,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1428,"column":0},"generated":{"line":1428,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1429,"column":0},"generated":{"line":1429,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1430,"column":0},"generated":{"line":1430,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1431,"column":0},"generated":{"line":1431,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1432,"column":0},"generated":{"line":1432,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1433,"column":0},"generated":{"line":1433,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1434,"column":0},"generated":{"line":1434,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1435,"column":0},"generated":{"line":1435,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1436,"column":0},"generated":{"line":1436,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1437,"column":0},"generated":{"line":1437,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1438,"column":0},"generated":{"line":1438,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1439,"column":0},"generated":{"line":1439,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1440,"column":0},"generated":{"line":1440,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1441,"column":0},"generated":{"line":1441,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1442,"column":0},"generated":{"line":1442,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1443,"column":0},"generated":{"line":1443,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1444,"column":0},"generated":{"line":1444,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1445,"column":0},"generated":{"line":1445,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1446,"column":0},"generated":{"line":1446,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1447,"column":0},"generated":{"line":1447,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1448,"column":0},"generated":{"line":1448,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1449,"column":0},"generated":{"line":1449,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1450,"column":0},"generated":{"line":1450,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1451,"column":0},"generated":{"line":1451,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1452,"column":0},"generated":{"line":1452,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1453,"column":0},"generated":{"line":1453,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1454,"column":0},"generated":{"line":1454,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1455,"column":0},"generated":{"line":1455,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1456,"column":0},"generated":{"line":1456,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1457,"column":0},"generated":{"line":1457,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1458,"column":0},"generated":{"line":1458,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1459,"column":0},"generated":{"line":1459,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1460,"column":0},"generated":{"line":1460,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1461,"column":0},"generated":{"line":1461,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1462,"column":0},"generated":{"line":1462,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1463,"column":0},"generated":{"line":1463,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1464,"column":0},"generated":{"line":1464,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1465,"column":0},"generated":{"line":1465,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1466,"column":0},"generated":{"line":1466,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1467,"column":0},"generated":{"line":1467,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1468,"column":0},"generated":{"line":1468,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1469,"column":0},"generated":{"line":1469,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1470,"column":0},"generated":{"line":1470,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1471,"column":0},"generated":{"line":1471,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1472,"column":0},"generated":{"line":1472,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1473,"column":0},"generated":{"line":1473,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1474,"column":0},"generated":{"line":1474,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1475,"column":0},"generated":{"line":1475,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1476,"column":0},"generated":{"line":1476,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1477,"column":0},"generated":{"line":1477,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1478,"column":0},"generated":{"line":1478,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1479,"column":0},"generated":{"line":1479,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1480,"column":0},"generated":{"line":1480,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1481,"column":0},"generated":{"line":1481,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1482,"column":0},"generated":{"line":1482,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1483,"column":0},"generated":{"line":1483,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1484,"column":0},"generated":{"line":1484,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1485,"column":0},"generated":{"line":1485,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1486,"column":0},"generated":{"line":1486,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1487,"column":0},"generated":{"line":1487,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1488,"column":0},"generated":{"line":1488,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1489,"column":0},"generated":{"line":1489,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1490,"column":0},"generated":{"line":1490,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1491,"column":0},"generated":{"line":1491,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1492,"column":0},"generated":{"line":1492,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1493,"column":0},"generated":{"line":1493,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1494,"column":0},"generated":{"line":1494,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1495,"column":0},"generated":{"line":1495,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1496,"column":0},"generated":{"line":1496,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1497,"column":0},"generated":{"line":1497,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1498,"column":0},"generated":{"line":1498,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1499,"column":0},"generated":{"line":1499,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1500,"column":0},"generated":{"line":1500,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1501,"column":0},"generated":{"line":1501,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1502,"column":0},"generated":{"line":1502,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1503,"column":0},"generated":{"line":1503,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1504,"column":0},"generated":{"line":1504,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1505,"column":0},"generated":{"line":1505,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1506,"column":0},"generated":{"line":1506,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1507,"column":0},"generated":{"line":1507,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1508,"column":0},"generated":{"line":1508,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1509,"column":0},"generated":{"line":1509,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1510,"column":0},"generated":{"line":1510,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1511,"column":0},"generated":{"line":1511,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1512,"column":0},"generated":{"line":1512,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1513,"column":0},"generated":{"line":1513,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1514,"column":0},"generated":{"line":1514,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1515,"column":0},"generated":{"line":1515,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1516,"column":0},"generated":{"line":1516,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1517,"column":0},"generated":{"line":1517,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1518,"column":0},"generated":{"line":1518,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1519,"column":0},"generated":{"line":1519,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1520,"column":0},"generated":{"line":1520,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1521,"column":0},"generated":{"line":1521,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1522,"column":0},"generated":{"line":1522,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1523,"column":0},"generated":{"line":1523,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1524,"column":0},"generated":{"line":1524,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1525,"column":0},"generated":{"line":1525,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1526,"column":0},"generated":{"line":1526,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1527,"column":0},"generated":{"line":1527,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1528,"column":0},"generated":{"line":1528,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1529,"column":0},"generated":{"line":1529,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1530,"column":0},"generated":{"line":1530,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1531,"column":0},"generated":{"line":1531,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1532,"column":0},"generated":{"line":1532,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1533,"column":0},"generated":{"line":1533,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1534,"column":0},"generated":{"line":1534,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1535,"column":0},"generated":{"line":1535,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1536,"column":0},"generated":{"line":1536,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1537,"column":0},"generated":{"line":1537,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1538,"column":0},"generated":{"line":1538,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1539,"column":0},"generated":{"line":1539,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1540,"column":0},"generated":{"line":1540,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1541,"column":0},"generated":{"line":1541,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1542,"column":0},"generated":{"line":1542,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1543,"column":0},"generated":{"line":1543,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1544,"column":0},"generated":{"line":1544,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1545,"column":0},"generated":{"line":1545,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1546,"column":0},"generated":{"line":1546,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1547,"column":0},"generated":{"line":1547,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1548,"column":0},"generated":{"line":1548,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1549,"column":0},"generated":{"line":1549,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1550,"column":0},"generated":{"line":1550,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1551,"column":0},"generated":{"line":1551,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1552,"column":0},"generated":{"line":1552,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1553,"column":0},"generated":{"line":1553,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1554,"column":0},"generated":{"line":1554,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1555,"column":0},"generated":{"line":1555,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1556,"column":0},"generated":{"line":1556,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1557,"column":0},"generated":{"line":1557,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1558,"column":0},"generated":{"line":1558,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1559,"column":0},"generated":{"line":1559,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1560,"column":0},"generated":{"line":1560,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1561,"column":0},"generated":{"line":1561,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1562,"column":0},"generated":{"line":1562,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1563,"column":0},"generated":{"line":1563,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1564,"column":0},"generated":{"line":1564,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1565,"column":0},"generated":{"line":1565,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1566,"column":0},"generated":{"line":1566,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1567,"column":0},"generated":{"line":1567,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1568,"column":0},"generated":{"line":1568,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1569,"column":0},"generated":{"line":1569,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1570,"column":0},"generated":{"line":1570,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1571,"column":0},"generated":{"line":1571,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1572,"column":0},"generated":{"line":1572,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1573,"column":0},"generated":{"line":1573,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1574,"column":0},"generated":{"line":1574,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1575,"column":0},"generated":{"line":1575,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1576,"column":0},"generated":{"line":1576,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1577,"column":0},"generated":{"line":1577,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1578,"column":0},"generated":{"line":1578,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1579,"column":0},"generated":{"line":1579,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1580,"column":0},"generated":{"line":1580,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1581,"column":0},"generated":{"line":1581,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1582,"column":0},"generated":{"line":1582,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1583,"column":0},"generated":{"line":1583,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1584,"column":0},"generated":{"line":1584,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1585,"column":0},"generated":{"line":1585,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1586,"column":0},"generated":{"line":1586,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1587,"column":0},"generated":{"line":1587,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1588,"column":0},"generated":{"line":1588,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1589,"column":0},"generated":{"line":1589,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1590,"column":0},"generated":{"line":1590,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1591,"column":0},"generated":{"line":1591,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1592,"column":0},"generated":{"line":1592,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1593,"column":0},"generated":{"line":1593,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1594,"column":0},"generated":{"line":1594,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1595,"column":0},"generated":{"line":1595,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1596,"column":0},"generated":{"line":1596,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1597,"column":0},"generated":{"line":1597,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1598,"column":0},"generated":{"line":1598,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1599,"column":0},"generated":{"line":1599,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1600,"column":0},"generated":{"line":1600,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1601,"column":0},"generated":{"line":1601,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1602,"column":0},"generated":{"line":1602,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1603,"column":0},"generated":{"line":1603,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1604,"column":0},"generated":{"line":1604,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1605,"column":0},"generated":{"line":1605,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1606,"column":0},"generated":{"line":1606,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1607,"column":0},"generated":{"line":1607,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1608,"column":0},"generated":{"line":1608,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1609,"column":0},"generated":{"line":1609,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1610,"column":0},"generated":{"line":1610,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1611,"column":0},"generated":{"line":1611,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1612,"column":0},"generated":{"line":1612,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1613,"column":0},"generated":{"line":1613,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1614,"column":0},"generated":{"line":1614,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1615,"column":0},"generated":{"line":1615,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1616,"column":0},"generated":{"line":1616,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1617,"column":0},"generated":{"line":1617,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1618,"column":0},"generated":{"line":1618,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1619,"column":0},"generated":{"line":1619,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1620,"column":0},"generated":{"line":1620,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1621,"column":0},"generated":{"line":1621,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1622,"column":0},"generated":{"line":1622,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1623,"column":0},"generated":{"line":1623,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1624,"column":0},"generated":{"line":1624,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1625,"column":0},"generated":{"line":1625,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1626,"column":0},"generated":{"line":1626,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1627,"column":0},"generated":{"line":1627,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1628,"column":0},"generated":{"line":1628,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1629,"column":0},"generated":{"line":1629,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1630,"column":0},"generated":{"line":1630,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1631,"column":0},"generated":{"line":1631,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1632,"column":0},"generated":{"line":1632,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1633,"column":0},"generated":{"line":1633,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1634,"column":0},"generated":{"line":1634,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1635,"column":0},"generated":{"line":1635,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1636,"column":0},"generated":{"line":1636,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1637,"column":0},"generated":{"line":1637,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1638,"column":0},"generated":{"line":1638,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1639,"column":0},"generated":{"line":1639,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1640,"column":0},"generated":{"line":1640,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1641,"column":0},"generated":{"line":1641,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1642,"column":0},"generated":{"line":1642,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1643,"column":0},"generated":{"line":1643,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1644,"column":0},"generated":{"line":1644,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1645,"column":0},"generated":{"line":1645,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1646,"column":0},"generated":{"line":1646,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1647,"column":0},"generated":{"line":1647,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1648,"column":0},"generated":{"line":1648,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1649,"column":0},"generated":{"line":1649,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1650,"column":0},"generated":{"line":1650,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1651,"column":0},"generated":{"line":1651,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1652,"column":0},"generated":{"line":1652,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1653,"column":0},"generated":{"line":1653,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1654,"column":0},"generated":{"line":1654,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1655,"column":0},"generated":{"line":1655,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1656,"column":0},"generated":{"line":1656,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1657,"column":0},"generated":{"line":1657,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1658,"column":0},"generated":{"line":1658,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1659,"column":0},"generated":{"line":1659,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1660,"column":0},"generated":{"line":1660,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1661,"column":0},"generated":{"line":1661,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1662,"column":0},"generated":{"line":1662,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1663,"column":0},"generated":{"line":1663,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1664,"column":0},"generated":{"line":1664,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1665,"column":0},"generated":{"line":1665,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1666,"column":0},"generated":{"line":1666,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1667,"column":0},"generated":{"line":1667,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1668,"column":0},"generated":{"line":1668,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1669,"column":0},"generated":{"line":1669,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1670,"column":0},"generated":{"line":1670,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1671,"column":0},"generated":{"line":1671,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1672,"column":0},"generated":{"line":1672,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1673,"column":0},"generated":{"line":1673,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1674,"column":0},"generated":{"line":1674,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1675,"column":0},"generated":{"line":1675,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1676,"column":0},"generated":{"line":1676,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1677,"column":0},"generated":{"line":1677,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1678,"column":0},"generated":{"line":1678,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1679,"column":0},"generated":{"line":1679,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1680,"column":0},"generated":{"line":1680,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1681,"column":0},"generated":{"line":1681,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1682,"column":0},"generated":{"line":1682,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1683,"column":0},"generated":{"line":1683,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1684,"column":0},"generated":{"line":1684,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1685,"column":0},"generated":{"line":1685,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1686,"column":0},"generated":{"line":1686,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1687,"column":0},"generated":{"line":1687,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1688,"column":0},"generated":{"line":1688,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1689,"column":0},"generated":{"line":1689,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1690,"column":0},"generated":{"line":1690,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1691,"column":0},"generated":{"line":1691,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1692,"column":0},"generated":{"line":1692,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1693,"column":0},"generated":{"line":1693,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1694,"column":0},"generated":{"line":1694,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1695,"column":0},"generated":{"line":1695,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1696,"column":0},"generated":{"line":1696,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1697,"column":0},"generated":{"line":1697,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1698,"column":0},"generated":{"line":1698,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1699,"column":0},"generated":{"line":1699,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1700,"column":0},"generated":{"line":1700,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1701,"column":0},"generated":{"line":1701,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1702,"column":0},"generated":{"line":1702,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1703,"column":0},"generated":{"line":1703,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1704,"column":0},"generated":{"line":1704,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1705,"column":0},"generated":{"line":1705,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1706,"column":0},"generated":{"line":1706,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1707,"column":0},"generated":{"line":1707,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1708,"column":0},"generated":{"line":1708,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1709,"column":0},"generated":{"line":1709,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1710,"column":0},"generated":{"line":1710,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1711,"column":0},"generated":{"line":1711,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1712,"column":0},"generated":{"line":1712,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1713,"column":0},"generated":{"line":1713,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1714,"column":0},"generated":{"line":1714,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1715,"column":0},"generated":{"line":1715,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1716,"column":0},"generated":{"line":1716,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1717,"column":0},"generated":{"line":1717,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1718,"column":0},"generated":{"line":1718,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1719,"column":0},"generated":{"line":1719,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1720,"column":0},"generated":{"line":1720,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1721,"column":0},"generated":{"line":1721,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1722,"column":0},"generated":{"line":1722,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1723,"column":0},"generated":{"line":1723,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1724,"column":0},"generated":{"line":1724,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1725,"column":0},"generated":{"line":1725,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1726,"column":0},"generated":{"line":1726,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1727,"column":0},"generated":{"line":1727,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1728,"column":0},"generated":{"line":1728,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1729,"column":0},"generated":{"line":1729,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1730,"column":0},"generated":{"line":1730,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1731,"column":0},"generated":{"line":1731,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1732,"column":0},"generated":{"line":1732,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1733,"column":0},"generated":{"line":1733,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1734,"column":0},"generated":{"line":1734,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1735,"column":0},"generated":{"line":1735,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1736,"column":0},"generated":{"line":1736,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1737,"column":0},"generated":{"line":1737,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1738,"column":0},"generated":{"line":1738,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1739,"column":0},"generated":{"line":1739,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1740,"column":0},"generated":{"line":1740,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1741,"column":0},"generated":{"line":1741,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1742,"column":0},"generated":{"line":1742,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1743,"column":0},"generated":{"line":1743,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1744,"column":0},"generated":{"line":1744,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1745,"column":0},"generated":{"line":1745,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1746,"column":0},"generated":{"line":1746,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1747,"column":0},"generated":{"line":1747,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1748,"column":0},"generated":{"line":1748,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1749,"column":0},"generated":{"line":1749,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1750,"column":0},"generated":{"line":1750,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1751,"column":0},"generated":{"line":1751,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1752,"column":0},"generated":{"line":1752,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1753,"column":0},"generated":{"line":1753,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1754,"column":0},"generated":{"line":1754,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1755,"column":0},"generated":{"line":1755,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1756,"column":0},"generated":{"line":1756,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1757,"column":0},"generated":{"line":1757,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1758,"column":0},"generated":{"line":1758,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1759,"column":0},"generated":{"line":1759,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1760,"column":0},"generated":{"line":1760,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1761,"column":0},"generated":{"line":1761,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1762,"column":0},"generated":{"line":1762,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1763,"column":0},"generated":{"line":1763,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1764,"column":0},"generated":{"line":1764,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1765,"column":0},"generated":{"line":1765,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1766,"column":0},"generated":{"line":1766,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1767,"column":0},"generated":{"line":1767,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1768,"column":0},"generated":{"line":1768,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1769,"column":0},"generated":{"line":1769,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1770,"column":0},"generated":{"line":1770,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1771,"column":0},"generated":{"line":1771,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1772,"column":0},"generated":{"line":1772,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1773,"column":0},"generated":{"line":1773,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1774,"column":0},"generated":{"line":1774,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1775,"column":0},"generated":{"line":1775,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1776,"column":0},"generated":{"line":1776,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1777,"column":0},"generated":{"line":1777,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1778,"column":0},"generated":{"line":1778,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1779,"column":0},"generated":{"line":1779,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1780,"column":0},"generated":{"line":1780,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1781,"column":0},"generated":{"line":1781,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1782,"column":0},"generated":{"line":1782,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1783,"column":0},"generated":{"line":1783,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1784,"column":0},"generated":{"line":1784,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1785,"column":0},"generated":{"line":1785,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1786,"column":0},"generated":{"line":1786,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1787,"column":0},"generated":{"line":1787,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1788,"column":0},"generated":{"line":1788,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1789,"column":0},"generated":{"line":1789,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1790,"column":0},"generated":{"line":1790,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1791,"column":0},"generated":{"line":1791,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1792,"column":0},"generated":{"line":1792,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1793,"column":0},"generated":{"line":1793,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1794,"column":0},"generated":{"line":1794,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1795,"column":0},"generated":{"line":1795,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1796,"column":0},"generated":{"line":1796,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1797,"column":0},"generated":{"line":1797,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1798,"column":0},"generated":{"line":1798,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1799,"column":0},"generated":{"line":1799,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1800,"column":0},"generated":{"line":1800,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1801,"column":0},"generated":{"line":1801,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1802,"column":0},"generated":{"line":1802,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1803,"column":0},"generated":{"line":1803,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1804,"column":0},"generated":{"line":1804,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1805,"column":0},"generated":{"line":1805,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1806,"column":0},"generated":{"line":1806,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1807,"column":0},"generated":{"line":1807,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1808,"column":0},"generated":{"line":1808,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1809,"column":0},"generated":{"line":1809,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1810,"column":0},"generated":{"line":1810,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1811,"column":0},"generated":{"line":1811,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1812,"column":0},"generated":{"line":1812,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1813,"column":0},"generated":{"line":1813,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1814,"column":0},"generated":{"line":1814,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1815,"column":0},"generated":{"line":1815,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1816,"column":0},"generated":{"line":1816,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1817,"column":0},"generated":{"line":1817,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1818,"column":0},"generated":{"line":1818,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1819,"column":0},"generated":{"line":1819,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1820,"column":0},"generated":{"line":1820,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1821,"column":0},"generated":{"line":1821,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1822,"column":0},"generated":{"line":1822,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1823,"column":0},"generated":{"line":1823,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1824,"column":0},"generated":{"line":1824,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1825,"column":0},"generated":{"line":1825,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1826,"column":0},"generated":{"line":1826,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1827,"column":0},"generated":{"line":1827,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1828,"column":0},"generated":{"line":1828,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1829,"column":0},"generated":{"line":1829,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1830,"column":0},"generated":{"line":1830,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1831,"column":0},"generated":{"line":1831,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1832,"column":0},"generated":{"line":1832,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1833,"column":0},"generated":{"line":1833,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1834,"column":0},"generated":{"line":1834,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1835,"column":0},"generated":{"line":1835,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1836,"column":0},"generated":{"line":1836,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1837,"column":0},"generated":{"line":1837,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1838,"column":0},"generated":{"line":1838,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1839,"column":0},"generated":{"line":1839,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1840,"column":0},"generated":{"line":1840,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1841,"column":0},"generated":{"line":1841,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1842,"column":0},"generated":{"line":1842,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1843,"column":0},"generated":{"line":1843,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1844,"column":0},"generated":{"line":1844,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1845,"column":0},"generated":{"line":1845,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1846,"column":0},"generated":{"line":1846,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1847,"column":0},"generated":{"line":1847,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1848,"column":0},"generated":{"line":1848,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1849,"column":0},"generated":{"line":1849,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1850,"column":0},"generated":{"line":1850,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1851,"column":0},"generated":{"line":1851,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1852,"column":0},"generated":{"line":1852,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1853,"column":0},"generated":{"line":1853,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1854,"column":0},"generated":{"line":1854,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1855,"column":0},"generated":{"line":1855,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1856,"column":0},"generated":{"line":1856,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1857,"column":0},"generated":{"line":1857,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1858,"column":0},"generated":{"line":1858,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1859,"column":0},"generated":{"line":1859,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1860,"column":0},"generated":{"line":1860,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1861,"column":0},"generated":{"line":1861,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1862,"column":0},"generated":{"line":1862,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1863,"column":0},"generated":{"line":1863,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1864,"column":0},"generated":{"line":1864,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1865,"column":0},"generated":{"line":1865,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1866,"column":0},"generated":{"line":1866,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1867,"column":0},"generated":{"line":1867,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1868,"column":0},"generated":{"line":1868,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1869,"column":0},"generated":{"line":1869,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1870,"column":0},"generated":{"line":1870,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1871,"column":0},"generated":{"line":1871,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1872,"column":0},"generated":{"line":1872,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1873,"column":0},"generated":{"line":1873,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1874,"column":0},"generated":{"line":1874,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1875,"column":0},"generated":{"line":1875,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1876,"column":0},"generated":{"line":1876,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1877,"column":0},"generated":{"line":1877,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1878,"column":0},"generated":{"line":1878,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1879,"column":0},"generated":{"line":1879,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1880,"column":0},"generated":{"line":1880,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1881,"column":0},"generated":{"line":1881,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1882,"column":0},"generated":{"line":1882,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1883,"column":0},"generated":{"line":1883,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1884,"column":0},"generated":{"line":1884,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1885,"column":0},"generated":{"line":1885,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1886,"column":0},"generated":{"line":1886,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1887,"column":0},"generated":{"line":1887,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1888,"column":0},"generated":{"line":1888,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1889,"column":0},"generated":{"line":1889,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1890,"column":0},"generated":{"line":1890,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1891,"column":0},"generated":{"line":1891,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1892,"column":0},"generated":{"line":1892,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1893,"column":0},"generated":{"line":1893,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1894,"column":0},"generated":{"line":1894,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1895,"column":0},"generated":{"line":1895,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1896,"column":0},"generated":{"line":1896,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1897,"column":0},"generated":{"line":1897,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1898,"column":0},"generated":{"line":1898,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1899,"column":0},"generated":{"line":1899,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1900,"column":0},"generated":{"line":1900,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1901,"column":0},"generated":{"line":1901,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1902,"column":0},"generated":{"line":1902,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1903,"column":0},"generated":{"line":1903,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1904,"column":0},"generated":{"line":1904,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1905,"column":0},"generated":{"line":1905,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1906,"column":0},"generated":{"line":1906,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1907,"column":0},"generated":{"line":1907,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1908,"column":0},"generated":{"line":1908,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1909,"column":0},"generated":{"line":1909,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1910,"column":0},"generated":{"line":1910,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1911,"column":0},"generated":{"line":1911,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1912,"column":0},"generated":{"line":1912,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1913,"column":0},"generated":{"line":1913,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1914,"column":0},"generated":{"line":1914,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1915,"column":0},"generated":{"line":1915,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1916,"column":0},"generated":{"line":1916,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1917,"column":0},"generated":{"line":1917,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1918,"column":0},"generated":{"line":1918,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1919,"column":0},"generated":{"line":1919,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1920,"column":0},"generated":{"line":1920,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1921,"column":0},"generated":{"line":1921,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1922,"column":0},"generated":{"line":1922,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1923,"column":0},"generated":{"line":1923,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1924,"column":0},"generated":{"line":1924,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1925,"column":0},"generated":{"line":1925,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1926,"column":0},"generated":{"line":1926,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1927,"column":0},"generated":{"line":1927,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1928,"column":0},"generated":{"line":1928,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1929,"column":0},"generated":{"line":1929,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1930,"column":0},"generated":{"line":1930,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1931,"column":0},"generated":{"line":1931,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1932,"column":0},"generated":{"line":1932,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1933,"column":0},"generated":{"line":1933,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1934,"column":0},"generated":{"line":1934,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1935,"column":0},"generated":{"line":1935,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1936,"column":0},"generated":{"line":1936,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1937,"column":0},"generated":{"line":1937,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1938,"column":0},"generated":{"line":1938,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1939,"column":0},"generated":{"line":1939,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1940,"column":0},"generated":{"line":1940,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1941,"column":0},"generated":{"line":1941,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1942,"column":0},"generated":{"line":1942,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1943,"column":0},"generated":{"line":1943,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1944,"column":0},"generated":{"line":1944,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1945,"column":0},"generated":{"line":1945,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1946,"column":0},"generated":{"line":1946,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1947,"column":0},"generated":{"line":1947,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1948,"column":0},"generated":{"line":1948,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1949,"column":0},"generated":{"line":1949,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1950,"column":0},"generated":{"line":1950,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1951,"column":0},"generated":{"line":1951,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1952,"column":0},"generated":{"line":1952,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1953,"column":0},"generated":{"line":1953,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1954,"column":0},"generated":{"line":1954,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1955,"column":0},"generated":{"line":1955,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1956,"column":0},"generated":{"line":1956,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1957,"column":0},"generated":{"line":1957,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1958,"column":0},"generated":{"line":1958,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1959,"column":0},"generated":{"line":1959,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1960,"column":0},"generated":{"line":1960,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1961,"column":0},"generated":{"line":1961,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1962,"column":0},"generated":{"line":1962,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1963,"column":0},"generated":{"line":1963,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1964,"column":0},"generated":{"line":1964,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1965,"column":0},"generated":{"line":1965,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1966,"column":0},"generated":{"line":1966,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1967,"column":0},"generated":{"line":1967,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1968,"column":0},"generated":{"line":1968,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1969,"column":0},"generated":{"line":1969,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1970,"column":0},"generated":{"line":1970,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1971,"column":0},"generated":{"line":1971,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1972,"column":0},"generated":{"line":1972,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1973,"column":0},"generated":{"line":1973,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1974,"column":0},"generated":{"line":1974,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1975,"column":0},"generated":{"line":1975,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1976,"column":0},"generated":{"line":1976,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1977,"column":0},"generated":{"line":1977,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1978,"column":0},"generated":{"line":1978,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1979,"column":0},"generated":{"line":1979,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1980,"column":0},"generated":{"line":1980,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1981,"column":0},"generated":{"line":1981,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1982,"column":0},"generated":{"line":1982,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1983,"column":0},"generated":{"line":1983,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1984,"column":0},"generated":{"line":1984,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1985,"column":0},"generated":{"line":1985,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1986,"column":0},"generated":{"line":1986,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1987,"column":0},"generated":{"line":1987,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1988,"column":0},"generated":{"line":1988,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1989,"column":0},"generated":{"line":1989,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1990,"column":0},"generated":{"line":1990,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1991,"column":0},"generated":{"line":1991,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1992,"column":0},"generated":{"line":1992,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1993,"column":0},"generated":{"line":1993,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1994,"column":0},"generated":{"line":1994,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1995,"column":0},"generated":{"line":1995,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1996,"column":0},"generated":{"line":1996,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1997,"column":0},"generated":{"line":1997,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1998,"column":0},"generated":{"line":1998,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":1999,"column":0},"generated":{"line":1999,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2000,"column":0},"generated":{"line":2000,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2001,"column":0},"generated":{"line":2001,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2002,"column":0},"generated":{"line":2002,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2003,"column":0},"generated":{"line":2003,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2004,"column":0},"generated":{"line":2004,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2005,"column":0},"generated":{"line":2005,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2006,"column":0},"generated":{"line":2006,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2007,"column":0},"generated":{"line":2007,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2008,"column":0},"generated":{"line":2008,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2009,"column":0},"generated":{"line":2009,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2010,"column":0},"generated":{"line":2010,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2011,"column":0},"generated":{"line":2011,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2012,"column":0},"generated":{"line":2012,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2013,"column":0},"generated":{"line":2013,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2014,"column":0},"generated":{"line":2014,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2015,"column":0},"generated":{"line":2015,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2016,"column":0},"generated":{"line":2016,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2017,"column":0},"generated":{"line":2017,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2018,"column":0},"generated":{"line":2018,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2019,"column":0},"generated":{"line":2019,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2020,"column":0},"generated":{"line":2020,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2021,"column":0},"generated":{"line":2021,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2022,"column":0},"generated":{"line":2022,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2023,"column":0},"generated":{"line":2023,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2024,"column":0},"generated":{"line":2024,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2025,"column":0},"generated":{"line":2025,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2026,"column":0},"generated":{"line":2026,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2027,"column":0},"generated":{"line":2027,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2028,"column":0},"generated":{"line":2028,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2029,"column":0},"generated":{"line":2029,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2030,"column":0},"generated":{"line":2030,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2031,"column":0},"generated":{"line":2031,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2032,"column":0},"generated":{"line":2032,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2033,"column":0},"generated":{"line":2033,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2034,"column":0},"generated":{"line":2034,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2035,"column":0},"generated":{"line":2035,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2036,"column":0},"generated":{"line":2036,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2037,"column":0},"generated":{"line":2037,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2038,"column":0},"generated":{"line":2038,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2039,"column":0},"generated":{"line":2039,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2040,"column":0},"generated":{"line":2040,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2041,"column":0},"generated":{"line":2041,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2042,"column":0},"generated":{"line":2042,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2043,"column":0},"generated":{"line":2043,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2044,"column":0},"generated":{"line":2044,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2045,"column":0},"generated":{"line":2045,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2046,"column":0},"generated":{"line":2046,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2047,"column":0},"generated":{"line":2047,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2048,"column":0},"generated":{"line":2048,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2049,"column":0},"generated":{"line":2049,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2050,"column":0},"generated":{"line":2050,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2051,"column":0},"generated":{"line":2051,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2052,"column":0},"generated":{"line":2052,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2053,"column":0},"generated":{"line":2053,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2054,"column":0},"generated":{"line":2054,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2055,"column":0},"generated":{"line":2055,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2056,"column":0},"generated":{"line":2056,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2057,"column":0},"generated":{"line":2057,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2058,"column":0},"generated":{"line":2058,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2059,"column":0},"generated":{"line":2059,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2060,"column":0},"generated":{"line":2060,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2061,"column":0},"generated":{"line":2061,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2062,"column":0},"generated":{"line":2062,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2063,"column":0},"generated":{"line":2063,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2064,"column":0},"generated":{"line":2064,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2065,"column":0},"generated":{"line":2065,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2066,"column":0},"generated":{"line":2066,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2067,"column":0},"generated":{"line":2067,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2068,"column":0},"generated":{"line":2068,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2069,"column":0},"generated":{"line":2069,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2070,"column":0},"generated":{"line":2070,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2071,"column":0},"generated":{"line":2071,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2072,"column":0},"generated":{"line":2072,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2073,"column":0},"generated":{"line":2073,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2074,"column":0},"generated":{"line":2074,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2075,"column":0},"generated":{"line":2075,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2076,"column":0},"generated":{"line":2076,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2077,"column":0},"generated":{"line":2077,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2078,"column":0},"generated":{"line":2078,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2079,"column":0},"generated":{"line":2079,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2080,"column":0},"generated":{"line":2080,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2081,"column":0},"generated":{"line":2081,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2082,"column":0},"generated":{"line":2082,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2083,"column":0},"generated":{"line":2083,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2084,"column":0},"generated":{"line":2084,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2085,"column":0},"generated":{"line":2085,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2086,"column":0},"generated":{"line":2086,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2087,"column":0},"generated":{"line":2087,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2088,"column":0},"generated":{"line":2088,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2089,"column":0},"generated":{"line":2089,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2090,"column":0},"generated":{"line":2090,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2091,"column":0},"generated":{"line":2091,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2092,"column":0},"generated":{"line":2092,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2093,"column":0},"generated":{"line":2093,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2094,"column":0},"generated":{"line":2094,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2095,"column":0},"generated":{"line":2095,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2096,"column":0},"generated":{"line":2096,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2097,"column":0},"generated":{"line":2097,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2098,"column":0},"generated":{"line":2098,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2099,"column":0},"generated":{"line":2099,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2100,"column":0},"generated":{"line":2100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2101,"column":0},"generated":{"line":2101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2102,"column":0},"generated":{"line":2102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2103,"column":0},"generated":{"line":2103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2104,"column":0},"generated":{"line":2104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2105,"column":0},"generated":{"line":2105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2106,"column":0},"generated":{"line":2106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2107,"column":0},"generated":{"line":2107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2108,"column":0},"generated":{"line":2108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2109,"column":0},"generated":{"line":2109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2110,"column":0},"generated":{"line":2110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2111,"column":0},"generated":{"line":2111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2112,"column":0},"generated":{"line":2112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2113,"column":0},"generated":{"line":2113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2114,"column":0},"generated":{"line":2114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2115,"column":0},"generated":{"line":2115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2116,"column":0},"generated":{"line":2116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2117,"column":0},"generated":{"line":2117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2118,"column":0},"generated":{"line":2118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2119,"column":0},"generated":{"line":2119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2120,"column":0},"generated":{"line":2120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2121,"column":0},"generated":{"line":2121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2122,"column":0},"generated":{"line":2122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2123,"column":0},"generated":{"line":2123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2124,"column":0},"generated":{"line":2124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2125,"column":0},"generated":{"line":2125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2126,"column":0},"generated":{"line":2126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2127,"column":0},"generated":{"line":2127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2128,"column":0},"generated":{"line":2128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2129,"column":0},"generated":{"line":2129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2130,"column":0},"generated":{"line":2130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2131,"column":0},"generated":{"line":2131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2132,"column":0},"generated":{"line":2132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2133,"column":0},"generated":{"line":2133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2134,"column":0},"generated":{"line":2134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2135,"column":0},"generated":{"line":2135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2136,"column":0},"generated":{"line":2136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2137,"column":0},"generated":{"line":2137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2138,"column":0},"generated":{"line":2138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2139,"column":0},"generated":{"line":2139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2140,"column":0},"generated":{"line":2140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2141,"column":0},"generated":{"line":2141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2142,"column":0},"generated":{"line":2142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2143,"column":0},"generated":{"line":2143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2144,"column":0},"generated":{"line":2144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2145,"column":0},"generated":{"line":2145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2146,"column":0},"generated":{"line":2146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2147,"column":0},"generated":{"line":2147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2148,"column":0},"generated":{"line":2148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2149,"column":0},"generated":{"line":2149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2150,"column":0},"generated":{"line":2150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2151,"column":0},"generated":{"line":2151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2152,"column":0},"generated":{"line":2152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2153,"column":0},"generated":{"line":2153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2154,"column":0},"generated":{"line":2154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2155,"column":0},"generated":{"line":2155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2156,"column":0},"generated":{"line":2156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2157,"column":0},"generated":{"line":2157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2158,"column":0},"generated":{"line":2158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2159,"column":0},"generated":{"line":2159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2160,"column":0},"generated":{"line":2160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2161,"column":0},"generated":{"line":2161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2162,"column":0},"generated":{"line":2162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2163,"column":0},"generated":{"line":2163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2164,"column":0},"generated":{"line":2164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2165,"column":0},"generated":{"line":2165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2166,"column":0},"generated":{"line":2166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2167,"column":0},"generated":{"line":2167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2168,"column":0},"generated":{"line":2168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2169,"column":0},"generated":{"line":2169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2170,"column":0},"generated":{"line":2170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2171,"column":0},"generated":{"line":2171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2172,"column":0},"generated":{"line":2172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2173,"column":0},"generated":{"line":2173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2174,"column":0},"generated":{"line":2174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2175,"column":0},"generated":{"line":2175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2176,"column":0},"generated":{"line":2176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2177,"column":0},"generated":{"line":2177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2178,"column":0},"generated":{"line":2178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2179,"column":0},"generated":{"line":2179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2180,"column":0},"generated":{"line":2180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2181,"column":0},"generated":{"line":2181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2182,"column":0},"generated":{"line":2182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2183,"column":0},"generated":{"line":2183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2184,"column":0},"generated":{"line":2184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2185,"column":0},"generated":{"line":2185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2186,"column":0},"generated":{"line":2186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2187,"column":0},"generated":{"line":2187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2188,"column":0},"generated":{"line":2188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2189,"column":0},"generated":{"line":2189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2190,"column":0},"generated":{"line":2190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2191,"column":0},"generated":{"line":2191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2192,"column":0},"generated":{"line":2192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2193,"column":0},"generated":{"line":2193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2194,"column":0},"generated":{"line":2194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2195,"column":0},"generated":{"line":2195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2196,"column":0},"generated":{"line":2196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2197,"column":0},"generated":{"line":2197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2198,"column":0},"generated":{"line":2198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2199,"column":0},"generated":{"line":2199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2200,"column":0},"generated":{"line":2200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2201,"column":0},"generated":{"line":2201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2202,"column":0},"generated":{"line":2202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2203,"column":0},"generated":{"line":2203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2204,"column":0},"generated":{"line":2204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2205,"column":0},"generated":{"line":2205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2206,"column":0},"generated":{"line":2206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2207,"column":0},"generated":{"line":2207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2208,"column":0},"generated":{"line":2208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2209,"column":0},"generated":{"line":2209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2210,"column":0},"generated":{"line":2210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2211,"column":0},"generated":{"line":2211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2212,"column":0},"generated":{"line":2212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2213,"column":0},"generated":{"line":2213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2214,"column":0},"generated":{"line":2214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2215,"column":0},"generated":{"line":2215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2216,"column":0},"generated":{"line":2216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2217,"column":0},"generated":{"line":2217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2218,"column":0},"generated":{"line":2218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2219,"column":0},"generated":{"line":2219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2220,"column":0},"generated":{"line":2220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2221,"column":0},"generated":{"line":2221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2222,"column":0},"generated":{"line":2222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2223,"column":0},"generated":{"line":2223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2224,"column":0},"generated":{"line":2224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2225,"column":0},"generated":{"line":2225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2226,"column":0},"generated":{"line":2226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2227,"column":0},"generated":{"line":2227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2228,"column":0},"generated":{"line":2228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2229,"column":0},"generated":{"line":2229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2230,"column":0},"generated":{"line":2230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2231,"column":0},"generated":{"line":2231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2232,"column":0},"generated":{"line":2232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2233,"column":0},"generated":{"line":2233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2234,"column":0},"generated":{"line":2234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2235,"column":0},"generated":{"line":2235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2236,"column":0},"generated":{"line":2236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2237,"column":0},"generated":{"line":2237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2238,"column":0},"generated":{"line":2238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2239,"column":0},"generated":{"line":2239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2240,"column":0},"generated":{"line":2240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2241,"column":0},"generated":{"line":2241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2242,"column":0},"generated":{"line":2242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2243,"column":0},"generated":{"line":2243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2244,"column":0},"generated":{"line":2244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2245,"column":0},"generated":{"line":2245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2246,"column":0},"generated":{"line":2246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2247,"column":0},"generated":{"line":2247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2248,"column":0},"generated":{"line":2248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2249,"column":0},"generated":{"line":2249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2250,"column":0},"generated":{"line":2250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2251,"column":0},"generated":{"line":2251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2252,"column":0},"generated":{"line":2252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2253,"column":0},"generated":{"line":2253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2254,"column":0},"generated":{"line":2254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2255,"column":0},"generated":{"line":2255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2256,"column":0},"generated":{"line":2256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2257,"column":0},"generated":{"line":2257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2258,"column":0},"generated":{"line":2258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2259,"column":0},"generated":{"line":2259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2260,"column":0},"generated":{"line":2260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2261,"column":0},"generated":{"line":2261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2262,"column":0},"generated":{"line":2262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2263,"column":0},"generated":{"line":2263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2264,"column":0},"generated":{"line":2264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2265,"column":0},"generated":{"line":2265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2266,"column":0},"generated":{"line":2266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2267,"column":0},"generated":{"line":2267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2268,"column":0},"generated":{"line":2268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2269,"column":0},"generated":{"line":2269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2270,"column":0},"generated":{"line":2270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2271,"column":0},"generated":{"line":2271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2272,"column":0},"generated":{"line":2272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2273,"column":0},"generated":{"line":2273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2274,"column":0},"generated":{"line":2274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2275,"column":0},"generated":{"line":2275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2276,"column":0},"generated":{"line":2276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2277,"column":0},"generated":{"line":2277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2278,"column":0},"generated":{"line":2278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2279,"column":0},"generated":{"line":2279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2280,"column":0},"generated":{"line":2280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2281,"column":0},"generated":{"line":2281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2282,"column":0},"generated":{"line":2282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2283,"column":0},"generated":{"line":2283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2284,"column":0},"generated":{"line":2284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2285,"column":0},"generated":{"line":2285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2286,"column":0},"generated":{"line":2286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2287,"column":0},"generated":{"line":2287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2288,"column":0},"generated":{"line":2288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2289,"column":0},"generated":{"line":2289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2290,"column":0},"generated":{"line":2290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2291,"column":0},"generated":{"line":2291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2292,"column":0},"generated":{"line":2292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2293,"column":0},"generated":{"line":2293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2294,"column":0},"generated":{"line":2294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2295,"column":0},"generated":{"line":2295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2296,"column":0},"generated":{"line":2296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2297,"column":0},"generated":{"line":2297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2298,"column":0},"generated":{"line":2298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2299,"column":0},"generated":{"line":2299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2300,"column":0},"generated":{"line":2300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2301,"column":0},"generated":{"line":2301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2302,"column":0},"generated":{"line":2302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2303,"column":0},"generated":{"line":2303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2304,"column":0},"generated":{"line":2304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2305,"column":0},"generated":{"line":2305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2306,"column":0},"generated":{"line":2306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2307,"column":0},"generated":{"line":2307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2308,"column":0},"generated":{"line":2308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2309,"column":0},"generated":{"line":2309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2310,"column":0},"generated":{"line":2310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2311,"column":0},"generated":{"line":2311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2312,"column":0},"generated":{"line":2312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2313,"column":0},"generated":{"line":2313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2314,"column":0},"generated":{"line":2314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2315,"column":0},"generated":{"line":2315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2316,"column":0},"generated":{"line":2316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2317,"column":0},"generated":{"line":2317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2318,"column":0},"generated":{"line":2318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2319,"column":0},"generated":{"line":2319,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2320,"column":0},"generated":{"line":2320,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2321,"column":0},"generated":{"line":2321,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2322,"column":0},"generated":{"line":2322,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2323,"column":0},"generated":{"line":2323,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2324,"column":0},"generated":{"line":2324,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2325,"column":0},"generated":{"line":2325,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2326,"column":0},"generated":{"line":2326,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2327,"column":0},"generated":{"line":2327,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2328,"column":0},"generated":{"line":2328,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2329,"column":0},"generated":{"line":2329,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2330,"column":0},"generated":{"line":2330,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2331,"column":0},"generated":{"line":2331,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2332,"column":0},"generated":{"line":2332,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2333,"column":0},"generated":{"line":2333,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2334,"column":0},"generated":{"line":2334,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2335,"column":0},"generated":{"line":2335,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2336,"column":0},"generated":{"line":2336,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2337,"column":0},"generated":{"line":2337,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2338,"column":0},"generated":{"line":2338,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2339,"column":0},"generated":{"line":2339,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2340,"column":0},"generated":{"line":2340,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2341,"column":0},"generated":{"line":2341,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2342,"column":0},"generated":{"line":2342,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2343,"column":0},"generated":{"line":2343,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2344,"column":0},"generated":{"line":2344,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2345,"column":0},"generated":{"line":2345,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2346,"column":0},"generated":{"line":2346,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2347,"column":0},"generated":{"line":2347,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2348,"column":0},"generated":{"line":2348,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2349,"column":0},"generated":{"line":2349,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2350,"column":0},"generated":{"line":2350,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2351,"column":0},"generated":{"line":2351,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2352,"column":0},"generated":{"line":2352,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2353,"column":0},"generated":{"line":2353,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2354,"column":0},"generated":{"line":2354,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2355,"column":0},"generated":{"line":2355,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2356,"column":0},"generated":{"line":2356,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2357,"column":0},"generated":{"line":2357,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2358,"column":0},"generated":{"line":2358,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2359,"column":0},"generated":{"line":2359,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2360,"column":0},"generated":{"line":2360,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2361,"column":0},"generated":{"line":2361,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2362,"column":0},"generated":{"line":2362,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2363,"column":0},"generated":{"line":2363,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2364,"column":0},"generated":{"line":2364,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2365,"column":0},"generated":{"line":2365,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2366,"column":0},"generated":{"line":2366,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2367,"column":0},"generated":{"line":2367,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2368,"column":0},"generated":{"line":2368,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2369,"column":0},"generated":{"line":2369,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2370,"column":0},"generated":{"line":2370,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2371,"column":0},"generated":{"line":2371,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2372,"column":0},"generated":{"line":2372,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2373,"column":0},"generated":{"line":2373,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2374,"column":0},"generated":{"line":2374,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2375,"column":0},"generated":{"line":2375,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2376,"column":0},"generated":{"line":2376,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2377,"column":0},"generated":{"line":2377,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2378,"column":0},"generated":{"line":2378,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2379,"column":0},"generated":{"line":2379,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2380,"column":0},"generated":{"line":2380,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2381,"column":0},"generated":{"line":2381,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2382,"column":0},"generated":{"line":2382,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2383,"column":0},"generated":{"line":2383,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2384,"column":0},"generated":{"line":2384,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2385,"column":0},"generated":{"line":2385,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2386,"column":0},"generated":{"line":2386,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2387,"column":0},"generated":{"line":2387,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2388,"column":0},"generated":{"line":2388,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2389,"column":0},"generated":{"line":2389,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2390,"column":0},"generated":{"line":2390,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2391,"column":0},"generated":{"line":2391,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2392,"column":0},"generated":{"line":2392,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2393,"column":0},"generated":{"line":2393,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2394,"column":0},"generated":{"line":2394,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2395,"column":0},"generated":{"line":2395,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2396,"column":0},"generated":{"line":2396,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2397,"column":0},"generated":{"line":2397,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2398,"column":0},"generated":{"line":2398,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2399,"column":0},"generated":{"line":2399,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2400,"column":0},"generated":{"line":2400,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2401,"column":0},"generated":{"line":2401,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2402,"column":0},"generated":{"line":2402,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2403,"column":0},"generated":{"line":2403,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2404,"column":0},"generated":{"line":2404,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2405,"column":0},"generated":{"line":2405,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2406,"column":0},"generated":{"line":2406,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2407,"column":0},"generated":{"line":2407,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2408,"column":0},"generated":{"line":2408,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2409,"column":0},"generated":{"line":2409,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2410,"column":0},"generated":{"line":2410,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2411,"column":0},"generated":{"line":2411,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2412,"column":0},"generated":{"line":2412,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2413,"column":0},"generated":{"line":2413,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2414,"column":0},"generated":{"line":2414,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2415,"column":0},"generated":{"line":2415,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2416,"column":0},"generated":{"line":2416,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2417,"column":0},"generated":{"line":2417,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2418,"column":0},"generated":{"line":2418,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2419,"column":0},"generated":{"line":2419,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2420,"column":0},"generated":{"line":2420,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2421,"column":0},"generated":{"line":2421,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2422,"column":0},"generated":{"line":2422,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2423,"column":0},"generated":{"line":2423,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2424,"column":0},"generated":{"line":2424,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2425,"column":0},"generated":{"line":2425,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2426,"column":0},"generated":{"line":2426,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2427,"column":0},"generated":{"line":2427,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2428,"column":0},"generated":{"line":2428,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2429,"column":0},"generated":{"line":2429,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2430,"column":0},"generated":{"line":2430,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2431,"column":0},"generated":{"line":2431,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2432,"column":0},"generated":{"line":2432,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2433,"column":0},"generated":{"line":2433,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2434,"column":0},"generated":{"line":2434,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2435,"column":0},"generated":{"line":2435,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2436,"column":0},"generated":{"line":2436,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2437,"column":0},"generated":{"line":2437,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2438,"column":0},"generated":{"line":2438,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2439,"column":0},"generated":{"line":2439,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2440,"column":0},"generated":{"line":2440,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2441,"column":0},"generated":{"line":2441,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2442,"column":0},"generated":{"line":2442,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2443,"column":0},"generated":{"line":2443,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2444,"column":0},"generated":{"line":2444,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2445,"column":0},"generated":{"line":2445,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2446,"column":0},"generated":{"line":2446,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2447,"column":0},"generated":{"line":2447,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2448,"column":0},"generated":{"line":2448,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2449,"column":0},"generated":{"line":2449,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2450,"column":0},"generated":{"line":2450,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2451,"column":0},"generated":{"line":2451,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2452,"column":0},"generated":{"line":2452,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2453,"column":0},"generated":{"line":2453,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2454,"column":0},"generated":{"line":2454,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2455,"column":0},"generated":{"line":2455,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2456,"column":0},"generated":{"line":2456,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2457,"column":0},"generated":{"line":2457,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2458,"column":0},"generated":{"line":2458,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2459,"column":0},"generated":{"line":2459,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2460,"column":0},"generated":{"line":2460,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2461,"column":0},"generated":{"line":2461,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2462,"column":0},"generated":{"line":2462,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2463,"column":0},"generated":{"line":2463,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2464,"column":0},"generated":{"line":2464,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2465,"column":0},"generated":{"line":2465,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2466,"column":0},"generated":{"line":2466,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2467,"column":0},"generated":{"line":2467,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2468,"column":0},"generated":{"line":2468,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2469,"column":0},"generated":{"line":2469,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2470,"column":0},"generated":{"line":2470,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2471,"column":0},"generated":{"line":2471,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2472,"column":0},"generated":{"line":2472,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2473,"column":0},"generated":{"line":2473,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2474,"column":0},"generated":{"line":2474,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2475,"column":0},"generated":{"line":2475,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2476,"column":0},"generated":{"line":2476,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2477,"column":0},"generated":{"line":2477,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2478,"column":0},"generated":{"line":2478,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2479,"column":0},"generated":{"line":2479,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2480,"column":0},"generated":{"line":2480,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2481,"column":0},"generated":{"line":2481,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2482,"column":0},"generated":{"line":2482,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2483,"column":0},"generated":{"line":2483,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2484,"column":0},"generated":{"line":2484,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2485,"column":0},"generated":{"line":2485,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2486,"column":0},"generated":{"line":2486,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2487,"column":0},"generated":{"line":2487,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2488,"column":0},"generated":{"line":2488,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2489,"column":0},"generated":{"line":2489,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2490,"column":0},"generated":{"line":2490,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2491,"column":0},"generated":{"line":2491,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2492,"column":0},"generated":{"line":2492,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2493,"column":0},"generated":{"line":2493,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2494,"column":0},"generated":{"line":2494,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2495,"column":0},"generated":{"line":2495,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2496,"column":0},"generated":{"line":2496,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2497,"column":0},"generated":{"line":2497,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2498,"column":0},"generated":{"line":2498,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2499,"column":0},"generated":{"line":2499,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2500,"column":0},"generated":{"line":2500,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2501,"column":0},"generated":{"line":2501,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2502,"column":0},"generated":{"line":2502,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2503,"column":0},"generated":{"line":2503,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2504,"column":0},"generated":{"line":2504,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2505,"column":0},"generated":{"line":2505,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2506,"column":0},"generated":{"line":2506,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2507,"column":0},"generated":{"line":2507,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2508,"column":0},"generated":{"line":2508,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2509,"column":0},"generated":{"line":2509,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2510,"column":0},"generated":{"line":2510,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2511,"column":0},"generated":{"line":2511,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2512,"column":0},"generated":{"line":2512,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2513,"column":0},"generated":{"line":2513,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2514,"column":0},"generated":{"line":2514,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2515,"column":0},"generated":{"line":2515,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2516,"column":0},"generated":{"line":2516,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2517,"column":0},"generated":{"line":2517,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2518,"column":0},"generated":{"line":2518,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2519,"column":0},"generated":{"line":2519,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2520,"column":0},"generated":{"line":2520,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2521,"column":0},"generated":{"line":2521,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2522,"column":0},"generated":{"line":2522,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2523,"column":0},"generated":{"line":2523,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2524,"column":0},"generated":{"line":2524,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2525,"column":0},"generated":{"line":2525,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2526,"column":0},"generated":{"line":2526,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2527,"column":0},"generated":{"line":2527,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2528,"column":0},"generated":{"line":2528,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2529,"column":0},"generated":{"line":2529,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2530,"column":0},"generated":{"line":2530,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2531,"column":0},"generated":{"line":2531,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2532,"column":0},"generated":{"line":2532,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2533,"column":0},"generated":{"line":2533,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2534,"column":0},"generated":{"line":2534,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2535,"column":0},"generated":{"line":2535,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2536,"column":0},"generated":{"line":2536,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2537,"column":0},"generated":{"line":2537,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2538,"column":0},"generated":{"line":2538,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2539,"column":0},"generated":{"line":2539,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2540,"column":0},"generated":{"line":2540,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2541,"column":0},"generated":{"line":2541,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2542,"column":0},"generated":{"line":2542,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2543,"column":0},"generated":{"line":2543,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2544,"column":0},"generated":{"line":2544,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2545,"column":0},"generated":{"line":2545,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2546,"column":0},"generated":{"line":2546,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2547,"column":0},"generated":{"line":2547,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2548,"column":0},"generated":{"line":2548,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2549,"column":0},"generated":{"line":2549,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2550,"column":0},"generated":{"line":2550,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2551,"column":0},"generated":{"line":2551,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2552,"column":0},"generated":{"line":2552,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2553,"column":0},"generated":{"line":2553,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2554,"column":0},"generated":{"line":2554,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2555,"column":0},"generated":{"line":2555,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2556,"column":0},"generated":{"line":2556,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2557,"column":0},"generated":{"line":2557,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2558,"column":0},"generated":{"line":2558,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2559,"column":0},"generated":{"line":2559,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2560,"column":0},"generated":{"line":2560,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2561,"column":0},"generated":{"line":2561,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2562,"column":0},"generated":{"line":2562,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2563,"column":0},"generated":{"line":2563,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2564,"column":0},"generated":{"line":2564,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2565,"column":0},"generated":{"line":2565,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2566,"column":0},"generated":{"line":2566,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2567,"column":0},"generated":{"line":2567,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2568,"column":0},"generated":{"line":2568,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2569,"column":0},"generated":{"line":2569,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2570,"column":0},"generated":{"line":2570,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2571,"column":0},"generated":{"line":2571,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2572,"column":0},"generated":{"line":2572,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2573,"column":0},"generated":{"line":2573,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2574,"column":0},"generated":{"line":2574,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2575,"column":0},"generated":{"line":2575,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2576,"column":0},"generated":{"line":2576,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2577,"column":0},"generated":{"line":2577,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2578,"column":0},"generated":{"line":2578,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2579,"column":0},"generated":{"line":2579,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2580,"column":0},"generated":{"line":2580,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2581,"column":0},"generated":{"line":2581,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2582,"column":0},"generated":{"line":2582,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2583,"column":0},"generated":{"line":2583,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2584,"column":0},"generated":{"line":2584,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2585,"column":0},"generated":{"line":2585,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2586,"column":0},"generated":{"line":2586,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2587,"column":0},"generated":{"line":2587,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2588,"column":0},"generated":{"line":2588,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2589,"column":0},"generated":{"line":2589,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2590,"column":0},"generated":{"line":2590,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2591,"column":0},"generated":{"line":2591,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2592,"column":0},"generated":{"line":2592,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2593,"column":0},"generated":{"line":2593,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2594,"column":0},"generated":{"line":2594,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2595,"column":0},"generated":{"line":2595,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2596,"column":0},"generated":{"line":2596,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2597,"column":0},"generated":{"line":2597,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2598,"column":0},"generated":{"line":2598,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2599,"column":0},"generated":{"line":2599,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2600,"column":0},"generated":{"line":2600,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2601,"column":0},"generated":{"line":2601,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2602,"column":0},"generated":{"line":2602,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2603,"column":0},"generated":{"line":2603,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2604,"column":0},"generated":{"line":2604,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2605,"column":0},"generated":{"line":2605,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2606,"column":0},"generated":{"line":2606,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2607,"column":0},"generated":{"line":2607,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2608,"column":0},"generated":{"line":2608,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2609,"column":0},"generated":{"line":2609,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2610,"column":0},"generated":{"line":2610,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2611,"column":0},"generated":{"line":2611,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2612,"column":0},"generated":{"line":2612,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2613,"column":0},"generated":{"line":2613,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2614,"column":0},"generated":{"line":2614,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2615,"column":0},"generated":{"line":2615,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2616,"column":0},"generated":{"line":2616,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2617,"column":0},"generated":{"line":2617,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2618,"column":0},"generated":{"line":2618,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2619,"column":0},"generated":{"line":2619,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2620,"column":0},"generated":{"line":2620,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2621,"column":0},"generated":{"line":2621,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2622,"column":0},"generated":{"line":2622,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2623,"column":0},"generated":{"line":2623,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2624,"column":0},"generated":{"line":2624,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2625,"column":0},"generated":{"line":2625,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2626,"column":0},"generated":{"line":2626,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2627,"column":0},"generated":{"line":2627,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2628,"column":0},"generated":{"line":2628,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2629,"column":0},"generated":{"line":2629,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2630,"column":0},"generated":{"line":2630,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2631,"column":0},"generated":{"line":2631,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2632,"column":0},"generated":{"line":2632,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2633,"column":0},"generated":{"line":2633,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2634,"column":0},"generated":{"line":2634,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2635,"column":0},"generated":{"line":2635,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2636,"column":0},"generated":{"line":2636,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2637,"column":0},"generated":{"line":2637,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2638,"column":0},"generated":{"line":2638,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2639,"column":0},"generated":{"line":2639,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2640,"column":0},"generated":{"line":2640,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2641,"column":0},"generated":{"line":2641,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2642,"column":0},"generated":{"line":2642,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2643,"column":0},"generated":{"line":2643,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2644,"column":0},"generated":{"line":2644,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2645,"column":0},"generated":{"line":2645,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2646,"column":0},"generated":{"line":2646,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2647,"column":0},"generated":{"line":2647,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2648,"column":0},"generated":{"line":2648,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2649,"column":0},"generated":{"line":2649,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2650,"column":0},"generated":{"line":2650,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2651,"column":0},"generated":{"line":2651,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2652,"column":0},"generated":{"line":2652,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2653,"column":0},"generated":{"line":2653,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2654,"column":0},"generated":{"line":2654,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2655,"column":0},"generated":{"line":2655,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2656,"column":0},"generated":{"line":2656,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2657,"column":0},"generated":{"line":2657,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2658,"column":0},"generated":{"line":2658,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2659,"column":0},"generated":{"line":2659,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2660,"column":0},"generated":{"line":2660,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2661,"column":0},"generated":{"line":2661,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2662,"column":0},"generated":{"line":2662,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2663,"column":0},"generated":{"line":2663,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2664,"column":0},"generated":{"line":2664,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2665,"column":0},"generated":{"line":2665,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2666,"column":0},"generated":{"line":2666,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2667,"column":0},"generated":{"line":2667,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2668,"column":0},"generated":{"line":2668,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2669,"column":0},"generated":{"line":2669,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2670,"column":0},"generated":{"line":2670,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2671,"column":0},"generated":{"line":2671,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2672,"column":0},"generated":{"line":2672,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2673,"column":0},"generated":{"line":2673,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2674,"column":0},"generated":{"line":2674,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2675,"column":0},"generated":{"line":2675,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2676,"column":0},"generated":{"line":2676,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2677,"column":0},"generated":{"line":2677,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2678,"column":0},"generated":{"line":2678,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2679,"column":0},"generated":{"line":2679,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2680,"column":0},"generated":{"line":2680,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2681,"column":0},"generated":{"line":2681,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2682,"column":0},"generated":{"line":2682,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2683,"column":0},"generated":{"line":2683,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2684,"column":0},"generated":{"line":2684,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2685,"column":0},"generated":{"line":2685,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2686,"column":0},"generated":{"line":2686,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2687,"column":0},"generated":{"line":2687,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2688,"column":0},"generated":{"line":2688,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2689,"column":0},"generated":{"line":2689,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2690,"column":0},"generated":{"line":2690,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2691,"column":0},"generated":{"line":2691,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2692,"column":0},"generated":{"line":2692,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2693,"column":0},"generated":{"line":2693,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2694,"column":0},"generated":{"line":2694,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2695,"column":0},"generated":{"line":2695,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2696,"column":0},"generated":{"line":2696,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2697,"column":0},"generated":{"line":2697,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2698,"column":0},"generated":{"line":2698,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2699,"column":0},"generated":{"line":2699,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2700,"column":0},"generated":{"line":2700,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2701,"column":0},"generated":{"line":2701,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2702,"column":0},"generated":{"line":2702,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2703,"column":0},"generated":{"line":2703,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2704,"column":0},"generated":{"line":2704,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2705,"column":0},"generated":{"line":2705,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2706,"column":0},"generated":{"line":2706,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2707,"column":0},"generated":{"line":2707,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2708,"column":0},"generated":{"line":2708,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2709,"column":0},"generated":{"line":2709,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2710,"column":0},"generated":{"line":2710,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2711,"column":0},"generated":{"line":2711,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2712,"column":0},"generated":{"line":2712,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2713,"column":0},"generated":{"line":2713,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2714,"column":0},"generated":{"line":2714,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2715,"column":0},"generated":{"line":2715,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2716,"column":0},"generated":{"line":2716,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2717,"column":0},"generated":{"line":2717,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2718,"column":0},"generated":{"line":2718,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2719,"column":0},"generated":{"line":2719,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2720,"column":0},"generated":{"line":2720,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2721,"column":0},"generated":{"line":2721,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2722,"column":0},"generated":{"line":2722,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2723,"column":0},"generated":{"line":2723,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2724,"column":0},"generated":{"line":2724,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2725,"column":0},"generated":{"line":2725,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2726,"column":0},"generated":{"line":2726,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2727,"column":0},"generated":{"line":2727,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2728,"column":0},"generated":{"line":2728,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2729,"column":0},"generated":{"line":2729,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2730,"column":0},"generated":{"line":2730,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2731,"column":0},"generated":{"line":2731,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2732,"column":0},"generated":{"line":2732,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2733,"column":0},"generated":{"line":2733,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2734,"column":0},"generated":{"line":2734,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2735,"column":0},"generated":{"line":2735,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2736,"column":0},"generated":{"line":2736,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2737,"column":0},"generated":{"line":2737,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2738,"column":0},"generated":{"line":2738,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2739,"column":0},"generated":{"line":2739,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2740,"column":0},"generated":{"line":2740,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2741,"column":0},"generated":{"line":2741,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2742,"column":0},"generated":{"line":2742,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2743,"column":0},"generated":{"line":2743,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2744,"column":0},"generated":{"line":2744,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2745,"column":0},"generated":{"line":2745,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2746,"column":0},"generated":{"line":2746,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2747,"column":0},"generated":{"line":2747,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2748,"column":0},"generated":{"line":2748,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2749,"column":0},"generated":{"line":2749,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2750,"column":0},"generated":{"line":2750,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2751,"column":0},"generated":{"line":2751,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2752,"column":0},"generated":{"line":2752,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2753,"column":0},"generated":{"line":2753,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2754,"column":0},"generated":{"line":2754,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2755,"column":0},"generated":{"line":2755,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2756,"column":0},"generated":{"line":2756,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2757,"column":0},"generated":{"line":2757,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2758,"column":0},"generated":{"line":2758,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2759,"column":0},"generated":{"line":2759,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2760,"column":0},"generated":{"line":2760,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2761,"column":0},"generated":{"line":2761,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2762,"column":0},"generated":{"line":2762,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2763,"column":0},"generated":{"line":2763,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2764,"column":0},"generated":{"line":2764,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2765,"column":0},"generated":{"line":2765,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2766,"column":0},"generated":{"line":2766,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2767,"column":0},"generated":{"line":2767,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2768,"column":0},"generated":{"line":2768,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2769,"column":0},"generated":{"line":2769,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2770,"column":0},"generated":{"line":2770,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2771,"column":0},"generated":{"line":2771,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2772,"column":0},"generated":{"line":2772,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2773,"column":0},"generated":{"line":2773,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2774,"column":0},"generated":{"line":2774,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2775,"column":0},"generated":{"line":2775,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2776,"column":0},"generated":{"line":2776,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2777,"column":0},"generated":{"line":2777,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2778,"column":0},"generated":{"line":2778,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2779,"column":0},"generated":{"line":2779,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2780,"column":0},"generated":{"line":2780,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2781,"column":0},"generated":{"line":2781,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2782,"column":0},"generated":{"line":2782,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2783,"column":0},"generated":{"line":2783,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2784,"column":0},"generated":{"line":2784,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2785,"column":0},"generated":{"line":2785,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2786,"column":0},"generated":{"line":2786,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2787,"column":0},"generated":{"line":2787,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2788,"column":0},"generated":{"line":2788,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2789,"column":0},"generated":{"line":2789,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2790,"column":0},"generated":{"line":2790,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2791,"column":0},"generated":{"line":2791,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2792,"column":0},"generated":{"line":2792,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2793,"column":0},"generated":{"line":2793,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2794,"column":0},"generated":{"line":2794,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2795,"column":0},"generated":{"line":2795,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2796,"column":0},"generated":{"line":2796,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2797,"column":0},"generated":{"line":2797,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2798,"column":0},"generated":{"line":2798,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2799,"column":0},"generated":{"line":2799,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2800,"column":0},"generated":{"line":2800,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2801,"column":0},"generated":{"line":2801,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2802,"column":0},"generated":{"line":2802,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2803,"column":0},"generated":{"line":2803,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2804,"column":0},"generated":{"line":2804,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2805,"column":0},"generated":{"line":2805,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2806,"column":0},"generated":{"line":2806,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2807,"column":0},"generated":{"line":2807,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2808,"column":0},"generated":{"line":2808,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2809,"column":0},"generated":{"line":2809,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2810,"column":0},"generated":{"line":2810,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2811,"column":0},"generated":{"line":2811,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2812,"column":0},"generated":{"line":2812,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2813,"column":0},"generated":{"line":2813,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2814,"column":0},"generated":{"line":2814,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2815,"column":0},"generated":{"line":2815,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2816,"column":0},"generated":{"line":2816,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2817,"column":0},"generated":{"line":2817,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2818,"column":0},"generated":{"line":2818,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2819,"column":0},"generated":{"line":2819,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2820,"column":0},"generated":{"line":2820,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2821,"column":0},"generated":{"line":2821,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2822,"column":0},"generated":{"line":2822,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2823,"column":0},"generated":{"line":2823,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2824,"column":0},"generated":{"line":2824,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2825,"column":0},"generated":{"line":2825,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2826,"column":0},"generated":{"line":2826,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2827,"column":0},"generated":{"line":2827,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2828,"column":0},"generated":{"line":2828,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2829,"column":0},"generated":{"line":2829,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2830,"column":0},"generated":{"line":2830,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2831,"column":0},"generated":{"line":2831,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2832,"column":0},"generated":{"line":2832,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2833,"column":0},"generated":{"line":2833,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2834,"column":0},"generated":{"line":2834,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2835,"column":0},"generated":{"line":2835,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2836,"column":0},"generated":{"line":2836,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2837,"column":0},"generated":{"line":2837,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2838,"column":0},"generated":{"line":2838,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2839,"column":0},"generated":{"line":2839,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2840,"column":0},"generated":{"line":2840,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2841,"column":0},"generated":{"line":2841,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2842,"column":0},"generated":{"line":2842,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2843,"column":0},"generated":{"line":2843,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2844,"column":0},"generated":{"line":2844,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2845,"column":0},"generated":{"line":2845,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2846,"column":0},"generated":{"line":2846,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2847,"column":0},"generated":{"line":2847,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2848,"column":0},"generated":{"line":2848,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2849,"column":0},"generated":{"line":2849,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2850,"column":0},"generated":{"line":2850,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2851,"column":0},"generated":{"line":2851,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2852,"column":0},"generated":{"line":2852,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2853,"column":0},"generated":{"line":2853,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2854,"column":0},"generated":{"line":2854,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2855,"column":0},"generated":{"line":2855,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2856,"column":0},"generated":{"line":2856,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2857,"column":0},"generated":{"line":2857,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2858,"column":0},"generated":{"line":2858,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2859,"column":0},"generated":{"line":2859,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2860,"column":0},"generated":{"line":2860,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2861,"column":0},"generated":{"line":2861,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2862,"column":0},"generated":{"line":2862,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2863,"column":0},"generated":{"line":2863,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2864,"column":0},"generated":{"line":2864,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2865,"column":0},"generated":{"line":2865,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2866,"column":0},"generated":{"line":2866,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2867,"column":0},"generated":{"line":2867,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2868,"column":0},"generated":{"line":2868,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2869,"column":0},"generated":{"line":2869,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2870,"column":0},"generated":{"line":2870,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2871,"column":0},"generated":{"line":2871,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2872,"column":0},"generated":{"line":2872,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2873,"column":0},"generated":{"line":2873,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2874,"column":0},"generated":{"line":2874,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2875,"column":0},"generated":{"line":2875,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2876,"column":0},"generated":{"line":2876,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2877,"column":0},"generated":{"line":2877,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2878,"column":0},"generated":{"line":2878,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2879,"column":0},"generated":{"line":2879,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2880,"column":0},"generated":{"line":2880,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2881,"column":0},"generated":{"line":2881,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2882,"column":0},"generated":{"line":2882,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2883,"column":0},"generated":{"line":2883,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2884,"column":0},"generated":{"line":2884,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2885,"column":0},"generated":{"line":2885,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2886,"column":0},"generated":{"line":2886,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2887,"column":0},"generated":{"line":2887,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2888,"column":0},"generated":{"line":2888,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2889,"column":0},"generated":{"line":2889,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2890,"column":0},"generated":{"line":2890,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2891,"column":0},"generated":{"line":2891,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2892,"column":0},"generated":{"line":2892,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2893,"column":0},"generated":{"line":2893,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2894,"column":0},"generated":{"line":2894,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2895,"column":0},"generated":{"line":2895,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2896,"column":0},"generated":{"line":2896,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2897,"column":0},"generated":{"line":2897,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2898,"column":0},"generated":{"line":2898,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2899,"column":0},"generated":{"line":2899,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2900,"column":0},"generated":{"line":2900,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2901,"column":0},"generated":{"line":2901,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2902,"column":0},"generated":{"line":2902,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2903,"column":0},"generated":{"line":2903,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2904,"column":0},"generated":{"line":2904,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2905,"column":0},"generated":{"line":2905,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2906,"column":0},"generated":{"line":2906,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2907,"column":0},"generated":{"line":2907,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2908,"column":0},"generated":{"line":2908,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2909,"column":0},"generated":{"line":2909,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2910,"column":0},"generated":{"line":2910,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2911,"column":0},"generated":{"line":2911,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2912,"column":0},"generated":{"line":2912,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2913,"column":0},"generated":{"line":2913,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2914,"column":0},"generated":{"line":2914,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2915,"column":0},"generated":{"line":2915,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2916,"column":0},"generated":{"line":2916,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2917,"column":0},"generated":{"line":2917,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2918,"column":0},"generated":{"line":2918,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2919,"column":0},"generated":{"line":2919,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2920,"column":0},"generated":{"line":2920,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2921,"column":0},"generated":{"line":2921,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2922,"column":0},"generated":{"line":2922,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2923,"column":0},"generated":{"line":2923,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2924,"column":0},"generated":{"line":2924,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2925,"column":0},"generated":{"line":2925,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2926,"column":0},"generated":{"line":2926,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2927,"column":0},"generated":{"line":2927,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2928,"column":0},"generated":{"line":2928,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2929,"column":0},"generated":{"line":2929,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2930,"column":0},"generated":{"line":2930,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2931,"column":0},"generated":{"line":2931,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2932,"column":0},"generated":{"line":2932,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2933,"column":0},"generated":{"line":2933,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2934,"column":0},"generated":{"line":2934,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2935,"column":0},"generated":{"line":2935,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2936,"column":0},"generated":{"line":2936,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2937,"column":0},"generated":{"line":2937,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2938,"column":0},"generated":{"line":2938,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2939,"column":0},"generated":{"line":2939,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2940,"column":0},"generated":{"line":2940,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2941,"column":0},"generated":{"line":2941,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2942,"column":0},"generated":{"line":2942,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2943,"column":0},"generated":{"line":2943,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2944,"column":0},"generated":{"line":2944,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2945,"column":0},"generated":{"line":2945,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2946,"column":0},"generated":{"line":2946,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2947,"column":0},"generated":{"line":2947,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2948,"column":0},"generated":{"line":2948,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2949,"column":0},"generated":{"line":2949,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2950,"column":0},"generated":{"line":2950,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2951,"column":0},"generated":{"line":2951,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2952,"column":0},"generated":{"line":2952,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2953,"column":0},"generated":{"line":2953,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2954,"column":0},"generated":{"line":2954,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2955,"column":0},"generated":{"line":2955,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2956,"column":0},"generated":{"line":2956,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2957,"column":0},"generated":{"line":2957,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2958,"column":0},"generated":{"line":2958,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2959,"column":0},"generated":{"line":2959,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2960,"column":0},"generated":{"line":2960,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2961,"column":0},"generated":{"line":2961,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2962,"column":0},"generated":{"line":2962,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2963,"column":0},"generated":{"line":2963,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2964,"column":0},"generated":{"line":2964,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2965,"column":0},"generated":{"line":2965,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2966,"column":0},"generated":{"line":2966,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2967,"column":0},"generated":{"line":2967,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2968,"column":0},"generated":{"line":2968,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2969,"column":0},"generated":{"line":2969,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2970,"column":0},"generated":{"line":2970,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2971,"column":0},"generated":{"line":2971,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2972,"column":0},"generated":{"line":2972,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2973,"column":0},"generated":{"line":2973,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2974,"column":0},"generated":{"line":2974,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2975,"column":0},"generated":{"line":2975,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2976,"column":0},"generated":{"line":2976,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2977,"column":0},"generated":{"line":2977,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2978,"column":0},"generated":{"line":2978,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2979,"column":0},"generated":{"line":2979,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2980,"column":0},"generated":{"line":2980,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2981,"column":0},"generated":{"line":2981,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2982,"column":0},"generated":{"line":2982,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2983,"column":0},"generated":{"line":2983,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2984,"column":0},"generated":{"line":2984,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2985,"column":0},"generated":{"line":2985,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2986,"column":0},"generated":{"line":2986,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2987,"column":0},"generated":{"line":2987,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2988,"column":0},"generated":{"line":2988,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2989,"column":0},"generated":{"line":2989,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2990,"column":0},"generated":{"line":2990,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2991,"column":0},"generated":{"line":2991,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2992,"column":0},"generated":{"line":2992,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2993,"column":0},"generated":{"line":2993,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2994,"column":0},"generated":{"line":2994,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2995,"column":0},"generated":{"line":2995,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2996,"column":0},"generated":{"line":2996,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2997,"column":0},"generated":{"line":2997,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2998,"column":0},"generated":{"line":2998,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":2999,"column":0},"generated":{"line":2999,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3000,"column":0},"generated":{"line":3000,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3001,"column":0},"generated":{"line":3001,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3002,"column":0},"generated":{"line":3002,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3003,"column":0},"generated":{"line":3003,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3004,"column":0},"generated":{"line":3004,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3005,"column":0},"generated":{"line":3005,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3006,"column":0},"generated":{"line":3006,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3007,"column":0},"generated":{"line":3007,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3008,"column":0},"generated":{"line":3008,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3009,"column":0},"generated":{"line":3009,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3010,"column":0},"generated":{"line":3010,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3011,"column":0},"generated":{"line":3011,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3012,"column":0},"generated":{"line":3012,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3013,"column":0},"generated":{"line":3013,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3014,"column":0},"generated":{"line":3014,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3015,"column":0},"generated":{"line":3015,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3016,"column":0},"generated":{"line":3016,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3017,"column":0},"generated":{"line":3017,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3018,"column":0},"generated":{"line":3018,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3019,"column":0},"generated":{"line":3019,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3020,"column":0},"generated":{"line":3020,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3021,"column":0},"generated":{"line":3021,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3022,"column":0},"generated":{"line":3022,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3023,"column":0},"generated":{"line":3023,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3024,"column":0},"generated":{"line":3024,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3025,"column":0},"generated":{"line":3025,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3026,"column":0},"generated":{"line":3026,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3027,"column":0},"generated":{"line":3027,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3028,"column":0},"generated":{"line":3028,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3029,"column":0},"generated":{"line":3029,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3030,"column":0},"generated":{"line":3030,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3031,"column":0},"generated":{"line":3031,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3032,"column":0},"generated":{"line":3032,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3033,"column":0},"generated":{"line":3033,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3034,"column":0},"generated":{"line":3034,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3035,"column":0},"generated":{"line":3035,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3036,"column":0},"generated":{"line":3036,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3037,"column":0},"generated":{"line":3037,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3038,"column":0},"generated":{"line":3038,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3039,"column":0},"generated":{"line":3039,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3040,"column":0},"generated":{"line":3040,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3041,"column":0},"generated":{"line":3041,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3042,"column":0},"generated":{"line":3042,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3043,"column":0},"generated":{"line":3043,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3044,"column":0},"generated":{"line":3044,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3045,"column":0},"generated":{"line":3045,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3046,"column":0},"generated":{"line":3046,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3047,"column":0},"generated":{"line":3047,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3048,"column":0},"generated":{"line":3048,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3049,"column":0},"generated":{"line":3049,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3050,"column":0},"generated":{"line":3050,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3051,"column":0},"generated":{"line":3051,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3052,"column":0},"generated":{"line":3052,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3053,"column":0},"generated":{"line":3053,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3054,"column":0},"generated":{"line":3054,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3055,"column":0},"generated":{"line":3055,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3056,"column":0},"generated":{"line":3056,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3057,"column":0},"generated":{"line":3057,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3058,"column":0},"generated":{"line":3058,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3059,"column":0},"generated":{"line":3059,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3060,"column":0},"generated":{"line":3060,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3061,"column":0},"generated":{"line":3061,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3062,"column":0},"generated":{"line":3062,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3063,"column":0},"generated":{"line":3063,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3064,"column":0},"generated":{"line":3064,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3065,"column":0},"generated":{"line":3065,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3066,"column":0},"generated":{"line":3066,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3067,"column":0},"generated":{"line":3067,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3068,"column":0},"generated":{"line":3068,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3069,"column":0},"generated":{"line":3069,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3070,"column":0},"generated":{"line":3070,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3071,"column":0},"generated":{"line":3071,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3072,"column":0},"generated":{"line":3072,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3073,"column":0},"generated":{"line":3073,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3074,"column":0},"generated":{"line":3074,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3075,"column":0},"generated":{"line":3075,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3076,"column":0},"generated":{"line":3076,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3077,"column":0},"generated":{"line":3077,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3078,"column":0},"generated":{"line":3078,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3079,"column":0},"generated":{"line":3079,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3080,"column":0},"generated":{"line":3080,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3081,"column":0},"generated":{"line":3081,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3082,"column":0},"generated":{"line":3082,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3083,"column":0},"generated":{"line":3083,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3084,"column":0},"generated":{"line":3084,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3085,"column":0},"generated":{"line":3085,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3086,"column":0},"generated":{"line":3086,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3087,"column":0},"generated":{"line":3087,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3088,"column":0},"generated":{"line":3088,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3089,"column":0},"generated":{"line":3089,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3090,"column":0},"generated":{"line":3090,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3091,"column":0},"generated":{"line":3091,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3092,"column":0},"generated":{"line":3092,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3093,"column":0},"generated":{"line":3093,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3094,"column":0},"generated":{"line":3094,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3095,"column":0},"generated":{"line":3095,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3096,"column":0},"generated":{"line":3096,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3097,"column":0},"generated":{"line":3097,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3098,"column":0},"generated":{"line":3098,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3099,"column":0},"generated":{"line":3099,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3100,"column":0},"generated":{"line":3100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3101,"column":0},"generated":{"line":3101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3102,"column":0},"generated":{"line":3102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3103,"column":0},"generated":{"line":3103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3104,"column":0},"generated":{"line":3104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3105,"column":0},"generated":{"line":3105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3106,"column":0},"generated":{"line":3106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3107,"column":0},"generated":{"line":3107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3108,"column":0},"generated":{"line":3108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3109,"column":0},"generated":{"line":3109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3110,"column":0},"generated":{"line":3110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3111,"column":0},"generated":{"line":3111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3112,"column":0},"generated":{"line":3112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3113,"column":0},"generated":{"line":3113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3114,"column":0},"generated":{"line":3114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3115,"column":0},"generated":{"line":3115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3116,"column":0},"generated":{"line":3116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3117,"column":0},"generated":{"line":3117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3118,"column":0},"generated":{"line":3118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3119,"column":0},"generated":{"line":3119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3120,"column":0},"generated":{"line":3120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3121,"column":0},"generated":{"line":3121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3122,"column":0},"generated":{"line":3122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3123,"column":0},"generated":{"line":3123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3124,"column":0},"generated":{"line":3124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3125,"column":0},"generated":{"line":3125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3126,"column":0},"generated":{"line":3126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3127,"column":0},"generated":{"line":3127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3128,"column":0},"generated":{"line":3128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3129,"column":0},"generated":{"line":3129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3130,"column":0},"generated":{"line":3130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3131,"column":0},"generated":{"line":3131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3132,"column":0},"generated":{"line":3132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3133,"column":0},"generated":{"line":3133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3134,"column":0},"generated":{"line":3134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3135,"column":0},"generated":{"line":3135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3136,"column":0},"generated":{"line":3136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3137,"column":0},"generated":{"line":3137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3138,"column":0},"generated":{"line":3138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3139,"column":0},"generated":{"line":3139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3140,"column":0},"generated":{"line":3140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3141,"column":0},"generated":{"line":3141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3142,"column":0},"generated":{"line":3142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3143,"column":0},"generated":{"line":3143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3144,"column":0},"generated":{"line":3144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3145,"column":0},"generated":{"line":3145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3146,"column":0},"generated":{"line":3146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3147,"column":0},"generated":{"line":3147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3148,"column":0},"generated":{"line":3148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3149,"column":0},"generated":{"line":3149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3150,"column":0},"generated":{"line":3150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3151,"column":0},"generated":{"line":3151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3152,"column":0},"generated":{"line":3152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3153,"column":0},"generated":{"line":3153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3154,"column":0},"generated":{"line":3154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3155,"column":0},"generated":{"line":3155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3156,"column":0},"generated":{"line":3156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3157,"column":0},"generated":{"line":3157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3158,"column":0},"generated":{"line":3158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3159,"column":0},"generated":{"line":3159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3160,"column":0},"generated":{"line":3160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3161,"column":0},"generated":{"line":3161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3162,"column":0},"generated":{"line":3162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3163,"column":0},"generated":{"line":3163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3164,"column":0},"generated":{"line":3164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3165,"column":0},"generated":{"line":3165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3166,"column":0},"generated":{"line":3166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3167,"column":0},"generated":{"line":3167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3168,"column":0},"generated":{"line":3168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3169,"column":0},"generated":{"line":3169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3170,"column":0},"generated":{"line":3170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3171,"column":0},"generated":{"line":3171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3172,"column":0},"generated":{"line":3172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3173,"column":0},"generated":{"line":3173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3174,"column":0},"generated":{"line":3174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3175,"column":0},"generated":{"line":3175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3176,"column":0},"generated":{"line":3176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3177,"column":0},"generated":{"line":3177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3178,"column":0},"generated":{"line":3178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3179,"column":0},"generated":{"line":3179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3180,"column":0},"generated":{"line":3180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3181,"column":0},"generated":{"line":3181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3182,"column":0},"generated":{"line":3182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3183,"column":0},"generated":{"line":3183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3184,"column":0},"generated":{"line":3184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3185,"column":0},"generated":{"line":3185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3186,"column":0},"generated":{"line":3186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3187,"column":0},"generated":{"line":3187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3188,"column":0},"generated":{"line":3188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3189,"column":0},"generated":{"line":3189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3190,"column":0},"generated":{"line":3190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3191,"column":0},"generated":{"line":3191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3192,"column":0},"generated":{"line":3192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3193,"column":0},"generated":{"line":3193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3194,"column":0},"generated":{"line":3194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3195,"column":0},"generated":{"line":3195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3196,"column":0},"generated":{"line":3196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3197,"column":0},"generated":{"line":3197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3198,"column":0},"generated":{"line":3198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3199,"column":0},"generated":{"line":3199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3200,"column":0},"generated":{"line":3200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3201,"column":0},"generated":{"line":3201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3202,"column":0},"generated":{"line":3202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3203,"column":0},"generated":{"line":3203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3204,"column":0},"generated":{"line":3204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3205,"column":0},"generated":{"line":3205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3206,"column":0},"generated":{"line":3206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3207,"column":0},"generated":{"line":3207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3208,"column":0},"generated":{"line":3208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3209,"column":0},"generated":{"line":3209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3210,"column":0},"generated":{"line":3210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3211,"column":0},"generated":{"line":3211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3212,"column":0},"generated":{"line":3212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3213,"column":0},"generated":{"line":3213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3214,"column":0},"generated":{"line":3214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3215,"column":0},"generated":{"line":3215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3216,"column":0},"generated":{"line":3216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3217,"column":0},"generated":{"line":3217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3218,"column":0},"generated":{"line":3218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3219,"column":0},"generated":{"line":3219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3220,"column":0},"generated":{"line":3220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3221,"column":0},"generated":{"line":3221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3222,"column":0},"generated":{"line":3222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3223,"column":0},"generated":{"line":3223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3224,"column":0},"generated":{"line":3224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3225,"column":0},"generated":{"line":3225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3226,"column":0},"generated":{"line":3226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3227,"column":0},"generated":{"line":3227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3228,"column":0},"generated":{"line":3228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3229,"column":0},"generated":{"line":3229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3230,"column":0},"generated":{"line":3230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3231,"column":0},"generated":{"line":3231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3232,"column":0},"generated":{"line":3232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3233,"column":0},"generated":{"line":3233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3234,"column":0},"generated":{"line":3234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3235,"column":0},"generated":{"line":3235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3236,"column":0},"generated":{"line":3236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3237,"column":0},"generated":{"line":3237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3238,"column":0},"generated":{"line":3238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3239,"column":0},"generated":{"line":3239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3240,"column":0},"generated":{"line":3240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3241,"column":0},"generated":{"line":3241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3242,"column":0},"generated":{"line":3242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3243,"column":0},"generated":{"line":3243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3244,"column":0},"generated":{"line":3244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3245,"column":0},"generated":{"line":3245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3246,"column":0},"generated":{"line":3246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3247,"column":0},"generated":{"line":3247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3248,"column":0},"generated":{"line":3248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3249,"column":0},"generated":{"line":3249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3250,"column":0},"generated":{"line":3250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3251,"column":0},"generated":{"line":3251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3252,"column":0},"generated":{"line":3252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3253,"column":0},"generated":{"line":3253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3254,"column":0},"generated":{"line":3254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3255,"column":0},"generated":{"line":3255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3256,"column":0},"generated":{"line":3256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3257,"column":0},"generated":{"line":3257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3258,"column":0},"generated":{"line":3258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3259,"column":0},"generated":{"line":3259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3260,"column":0},"generated":{"line":3260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3261,"column":0},"generated":{"line":3261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3262,"column":0},"generated":{"line":3262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3263,"column":0},"generated":{"line":3263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3264,"column":0},"generated":{"line":3264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3265,"column":0},"generated":{"line":3265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3266,"column":0},"generated":{"line":3266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3267,"column":0},"generated":{"line":3267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3268,"column":0},"generated":{"line":3268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3269,"column":0},"generated":{"line":3269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3270,"column":0},"generated":{"line":3270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3271,"column":0},"generated":{"line":3271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3272,"column":0},"generated":{"line":3272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3273,"column":0},"generated":{"line":3273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3274,"column":0},"generated":{"line":3274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3275,"column":0},"generated":{"line":3275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3276,"column":0},"generated":{"line":3276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3277,"column":0},"generated":{"line":3277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3278,"column":0},"generated":{"line":3278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3279,"column":0},"generated":{"line":3279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3280,"column":0},"generated":{"line":3280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3281,"column":0},"generated":{"line":3281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3282,"column":0},"generated":{"line":3282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3283,"column":0},"generated":{"line":3283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3284,"column":0},"generated":{"line":3284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3285,"column":0},"generated":{"line":3285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3286,"column":0},"generated":{"line":3286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3287,"column":0},"generated":{"line":3287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3288,"column":0},"generated":{"line":3288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3289,"column":0},"generated":{"line":3289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3290,"column":0},"generated":{"line":3290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3291,"column":0},"generated":{"line":3291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3292,"column":0},"generated":{"line":3292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3293,"column":0},"generated":{"line":3293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3294,"column":0},"generated":{"line":3294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3295,"column":0},"generated":{"line":3295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3296,"column":0},"generated":{"line":3296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3297,"column":0},"generated":{"line":3297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3298,"column":0},"generated":{"line":3298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3299,"column":0},"generated":{"line":3299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3300,"column":0},"generated":{"line":3300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3301,"column":0},"generated":{"line":3301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3302,"column":0},"generated":{"line":3302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3303,"column":0},"generated":{"line":3303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3304,"column":0},"generated":{"line":3304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3305,"column":0},"generated":{"line":3305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3306,"column":0},"generated":{"line":3306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3307,"column":0},"generated":{"line":3307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3308,"column":0},"generated":{"line":3308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3309,"column":0},"generated":{"line":3309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3310,"column":0},"generated":{"line":3310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3311,"column":0},"generated":{"line":3311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3312,"column":0},"generated":{"line":3312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3313,"column":0},"generated":{"line":3313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3314,"column":0},"generated":{"line":3314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3315,"column":0},"generated":{"line":3315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3316,"column":0},"generated":{"line":3316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3317,"column":0},"generated":{"line":3317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3318,"column":0},"generated":{"line":3318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3319,"column":0},"generated":{"line":3319,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3320,"column":0},"generated":{"line":3320,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3321,"column":0},"generated":{"line":3321,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3322,"column":0},"generated":{"line":3322,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3323,"column":0},"generated":{"line":3323,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3324,"column":0},"generated":{"line":3324,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3325,"column":0},"generated":{"line":3325,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3326,"column":0},"generated":{"line":3326,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3327,"column":0},"generated":{"line":3327,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3328,"column":0},"generated":{"line":3328,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3329,"column":0},"generated":{"line":3329,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3330,"column":0},"generated":{"line":3330,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3331,"column":0},"generated":{"line":3331,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3332,"column":0},"generated":{"line":3332,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3333,"column":0},"generated":{"line":3333,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3334,"column":0},"generated":{"line":3334,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3335,"column":0},"generated":{"line":3335,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3336,"column":0},"generated":{"line":3336,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3337,"column":0},"generated":{"line":3337,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3338,"column":0},"generated":{"line":3338,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3339,"column":0},"generated":{"line":3339,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3340,"column":0},"generated":{"line":3340,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3341,"column":0},"generated":{"line":3341,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3342,"column":0},"generated":{"line":3342,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3343,"column":0},"generated":{"line":3343,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3344,"column":0},"generated":{"line":3344,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3345,"column":0},"generated":{"line":3345,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3346,"column":0},"generated":{"line":3346,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3347,"column":0},"generated":{"line":3347,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3348,"column":0},"generated":{"line":3348,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3349,"column":0},"generated":{"line":3349,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3350,"column":0},"generated":{"line":3350,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3351,"column":0},"generated":{"line":3351,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3352,"column":0},"generated":{"line":3352,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3353,"column":0},"generated":{"line":3353,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3354,"column":0},"generated":{"line":3354,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3355,"column":0},"generated":{"line":3355,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3356,"column":0},"generated":{"line":3356,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3357,"column":0},"generated":{"line":3357,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3358,"column":0},"generated":{"line":3358,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3359,"column":0},"generated":{"line":3359,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3360,"column":0},"generated":{"line":3360,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3361,"column":0},"generated":{"line":3361,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3362,"column":0},"generated":{"line":3362,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3363,"column":0},"generated":{"line":3363,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3364,"column":0},"generated":{"line":3364,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3365,"column":0},"generated":{"line":3365,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3366,"column":0},"generated":{"line":3366,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3367,"column":0},"generated":{"line":3367,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3368,"column":0},"generated":{"line":3368,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3369,"column":0},"generated":{"line":3369,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3370,"column":0},"generated":{"line":3370,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3371,"column":0},"generated":{"line":3371,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3372,"column":0},"generated":{"line":3372,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3373,"column":0},"generated":{"line":3373,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3374,"column":0},"generated":{"line":3374,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3375,"column":0},"generated":{"line":3375,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3376,"column":0},"generated":{"line":3376,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3377,"column":0},"generated":{"line":3377,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3378,"column":0},"generated":{"line":3378,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3379,"column":0},"generated":{"line":3379,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3380,"column":0},"generated":{"line":3380,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3381,"column":0},"generated":{"line":3381,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3382,"column":0},"generated":{"line":3382,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3383,"column":0},"generated":{"line":3383,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3384,"column":0},"generated":{"line":3384,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3385,"column":0},"generated":{"line":3385,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3386,"column":0},"generated":{"line":3386,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3387,"column":0},"generated":{"line":3387,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3388,"column":0},"generated":{"line":3388,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3389,"column":0},"generated":{"line":3389,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3390,"column":0},"generated":{"line":3390,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3391,"column":0},"generated":{"line":3391,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3392,"column":0},"generated":{"line":3392,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3393,"column":0},"generated":{"line":3393,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3394,"column":0},"generated":{"line":3394,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3395,"column":0},"generated":{"line":3395,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3396,"column":0},"generated":{"line":3396,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3397,"column":0},"generated":{"line":3397,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3398,"column":0},"generated":{"line":3398,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3399,"column":0},"generated":{"line":3399,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3400,"column":0},"generated":{"line":3400,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3401,"column":0},"generated":{"line":3401,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3402,"column":0},"generated":{"line":3402,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3403,"column":0},"generated":{"line":3403,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3404,"column":0},"generated":{"line":3404,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3405,"column":0},"generated":{"line":3405,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3406,"column":0},"generated":{"line":3406,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3407,"column":0},"generated":{"line":3407,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3408,"column":0},"generated":{"line":3408,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3409,"column":0},"generated":{"line":3409,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3410,"column":0},"generated":{"line":3410,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3411,"column":0},"generated":{"line":3411,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3412,"column":0},"generated":{"line":3412,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3413,"column":0},"generated":{"line":3413,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3414,"column":0},"generated":{"line":3414,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3415,"column":0},"generated":{"line":3415,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3416,"column":0},"generated":{"line":3416,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3417,"column":0},"generated":{"line":3417,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3418,"column":0},"generated":{"line":3418,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3419,"column":0},"generated":{"line":3419,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3420,"column":0},"generated":{"line":3420,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3421,"column":0},"generated":{"line":3421,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3422,"column":0},"generated":{"line":3422,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3423,"column":0},"generated":{"line":3423,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3424,"column":0},"generated":{"line":3424,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3425,"column":0},"generated":{"line":3425,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3426,"column":0},"generated":{"line":3426,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3427,"column":0},"generated":{"line":3427,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3428,"column":0},"generated":{"line":3428,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3429,"column":0},"generated":{"line":3429,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3430,"column":0},"generated":{"line":3430,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3431,"column":0},"generated":{"line":3431,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3432,"column":0},"generated":{"line":3432,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3433,"column":0},"generated":{"line":3433,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3434,"column":0},"generated":{"line":3434,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3435,"column":0},"generated":{"line":3435,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3436,"column":0},"generated":{"line":3436,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3437,"column":0},"generated":{"line":3437,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3438,"column":0},"generated":{"line":3438,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3439,"column":0},"generated":{"line":3439,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3440,"column":0},"generated":{"line":3440,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3441,"column":0},"generated":{"line":3441,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3442,"column":0},"generated":{"line":3442,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3443,"column":0},"generated":{"line":3443,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3444,"column":0},"generated":{"line":3444,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3445,"column":0},"generated":{"line":3445,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3446,"column":0},"generated":{"line":3446,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3447,"column":0},"generated":{"line":3447,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3448,"column":0},"generated":{"line":3448,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3449,"column":0},"generated":{"line":3449,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3450,"column":0},"generated":{"line":3450,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3451,"column":0},"generated":{"line":3451,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3452,"column":0},"generated":{"line":3452,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3453,"column":0},"generated":{"line":3453,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3454,"column":0},"generated":{"line":3454,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3455,"column":0},"generated":{"line":3455,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3456,"column":0},"generated":{"line":3456,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3457,"column":0},"generated":{"line":3457,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3458,"column":0},"generated":{"line":3458,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3459,"column":0},"generated":{"line":3459,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3460,"column":0},"generated":{"line":3460,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3461,"column":0},"generated":{"line":3461,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3462,"column":0},"generated":{"line":3462,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3463,"column":0},"generated":{"line":3463,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3464,"column":0},"generated":{"line":3464,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3465,"column":0},"generated":{"line":3465,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3466,"column":0},"generated":{"line":3466,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3467,"column":0},"generated":{"line":3467,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3468,"column":0},"generated":{"line":3468,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3469,"column":0},"generated":{"line":3469,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3470,"column":0},"generated":{"line":3470,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3471,"column":0},"generated":{"line":3471,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3472,"column":0},"generated":{"line":3472,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3473,"column":0},"generated":{"line":3473,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3474,"column":0},"generated":{"line":3474,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3475,"column":0},"generated":{"line":3475,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3476,"column":0},"generated":{"line":3476,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3477,"column":0},"generated":{"line":3477,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3478,"column":0},"generated":{"line":3478,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3479,"column":0},"generated":{"line":3479,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3480,"column":0},"generated":{"line":3480,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3481,"column":0},"generated":{"line":3481,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3482,"column":0},"generated":{"line":3482,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3483,"column":0},"generated":{"line":3483,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3484,"column":0},"generated":{"line":3484,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3485,"column":0},"generated":{"line":3485,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3486,"column":0},"generated":{"line":3486,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3487,"column":0},"generated":{"line":3487,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3488,"column":0},"generated":{"line":3488,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3489,"column":0},"generated":{"line":3489,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3490,"column":0},"generated":{"line":3490,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3491,"column":0},"generated":{"line":3491,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3492,"column":0},"generated":{"line":3492,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3493,"column":0},"generated":{"line":3493,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3494,"column":0},"generated":{"line":3494,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3495,"column":0},"generated":{"line":3495,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3496,"column":0},"generated":{"line":3496,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3497,"column":0},"generated":{"line":3497,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3498,"column":0},"generated":{"line":3498,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3499,"column":0},"generated":{"line":3499,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3500,"column":0},"generated":{"line":3500,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3501,"column":0},"generated":{"line":3501,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3502,"column":0},"generated":{"line":3502,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3503,"column":0},"generated":{"line":3503,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3504,"column":0},"generated":{"line":3504,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3505,"column":0},"generated":{"line":3505,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3506,"column":0},"generated":{"line":3506,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3507,"column":0},"generated":{"line":3507,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3508,"column":0},"generated":{"line":3508,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3509,"column":0},"generated":{"line":3509,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3510,"column":0},"generated":{"line":3510,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3511,"column":0},"generated":{"line":3511,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3512,"column":0},"generated":{"line":3512,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3513,"column":0},"generated":{"line":3513,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3514,"column":0},"generated":{"line":3514,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3515,"column":0},"generated":{"line":3515,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3516,"column":0},"generated":{"line":3516,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3517,"column":0},"generated":{"line":3517,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3518,"column":0},"generated":{"line":3518,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3519,"column":0},"generated":{"line":3519,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3520,"column":0},"generated":{"line":3520,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3521,"column":0},"generated":{"line":3521,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3522,"column":0},"generated":{"line":3522,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3523,"column":0},"generated":{"line":3523,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3524,"column":0},"generated":{"line":3524,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3525,"column":0},"generated":{"line":3525,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3526,"column":0},"generated":{"line":3526,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3527,"column":0},"generated":{"line":3527,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3528,"column":0},"generated":{"line":3528,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3529,"column":0},"generated":{"line":3529,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3530,"column":0},"generated":{"line":3530,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3531,"column":0},"generated":{"line":3531,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3532,"column":0},"generated":{"line":3532,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3533,"column":0},"generated":{"line":3533,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3534,"column":0},"generated":{"line":3534,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3535,"column":0},"generated":{"line":3535,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3536,"column":0},"generated":{"line":3536,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3537,"column":0},"generated":{"line":3537,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3538,"column":0},"generated":{"line":3538,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3539,"column":0},"generated":{"line":3539,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3540,"column":0},"generated":{"line":3540,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3541,"column":0},"generated":{"line":3541,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3542,"column":0},"generated":{"line":3542,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3543,"column":0},"generated":{"line":3543,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3544,"column":0},"generated":{"line":3544,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3545,"column":0},"generated":{"line":3545,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3546,"column":0},"generated":{"line":3546,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3547,"column":0},"generated":{"line":3547,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3548,"column":0},"generated":{"line":3548,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3549,"column":0},"generated":{"line":3549,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3550,"column":0},"generated":{"line":3550,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3551,"column":0},"generated":{"line":3551,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3552,"column":0},"generated":{"line":3552,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3553,"column":0},"generated":{"line":3553,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3554,"column":0},"generated":{"line":3554,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3555,"column":0},"generated":{"line":3555,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3556,"column":0},"generated":{"line":3556,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3557,"column":0},"generated":{"line":3557,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3558,"column":0},"generated":{"line":3558,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3559,"column":0},"generated":{"line":3559,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3560,"column":0},"generated":{"line":3560,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3561,"column":0},"generated":{"line":3561,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3562,"column":0},"generated":{"line":3562,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3563,"column":0},"generated":{"line":3563,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3564,"column":0},"generated":{"line":3564,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3565,"column":0},"generated":{"line":3565,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3566,"column":0},"generated":{"line":3566,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3567,"column":0},"generated":{"line":3567,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3568,"column":0},"generated":{"line":3568,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3569,"column":0},"generated":{"line":3569,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3570,"column":0},"generated":{"line":3570,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3571,"column":0},"generated":{"line":3571,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3572,"column":0},"generated":{"line":3572,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3573,"column":0},"generated":{"line":3573,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3574,"column":0},"generated":{"line":3574,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3575,"column":0},"generated":{"line":3575,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3576,"column":0},"generated":{"line":3576,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3577,"column":0},"generated":{"line":3577,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3578,"column":0},"generated":{"line":3578,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3579,"column":0},"generated":{"line":3579,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3580,"column":0},"generated":{"line":3580,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3581,"column":0},"generated":{"line":3581,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3582,"column":0},"generated":{"line":3582,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3583,"column":0},"generated":{"line":3583,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3584,"column":0},"generated":{"line":3584,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3585,"column":0},"generated":{"line":3585,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3586,"column":0},"generated":{"line":3586,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3587,"column":0},"generated":{"line":3587,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3588,"column":0},"generated":{"line":3588,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3589,"column":0},"generated":{"line":3589,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3590,"column":0},"generated":{"line":3590,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3591,"column":0},"generated":{"line":3591,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3592,"column":0},"generated":{"line":3592,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3593,"column":0},"generated":{"line":3593,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3594,"column":0},"generated":{"line":3594,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3595,"column":0},"generated":{"line":3595,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3596,"column":0},"generated":{"line":3596,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3597,"column":0},"generated":{"line":3597,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3598,"column":0},"generated":{"line":3598,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3599,"column":0},"generated":{"line":3599,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3600,"column":0},"generated":{"line":3600,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3601,"column":0},"generated":{"line":3601,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3602,"column":0},"generated":{"line":3602,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3603,"column":0},"generated":{"line":3603,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3604,"column":0},"generated":{"line":3604,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3605,"column":0},"generated":{"line":3605,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3606,"column":0},"generated":{"line":3606,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3607,"column":0},"generated":{"line":3607,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3608,"column":0},"generated":{"line":3608,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3609,"column":0},"generated":{"line":3609,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3610,"column":0},"generated":{"line":3610,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3611,"column":0},"generated":{"line":3611,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3612,"column":0},"generated":{"line":3612,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3613,"column":0},"generated":{"line":3613,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3614,"column":0},"generated":{"line":3614,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3615,"column":0},"generated":{"line":3615,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3616,"column":0},"generated":{"line":3616,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3617,"column":0},"generated":{"line":3617,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3618,"column":0},"generated":{"line":3618,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3619,"column":0},"generated":{"line":3619,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3620,"column":0},"generated":{"line":3620,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3621,"column":0},"generated":{"line":3621,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3622,"column":0},"generated":{"line":3622,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3623,"column":0},"generated":{"line":3623,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3624,"column":0},"generated":{"line":3624,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3625,"column":0},"generated":{"line":3625,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3626,"column":0},"generated":{"line":3626,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3627,"column":0},"generated":{"line":3627,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3628,"column":0},"generated":{"line":3628,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3629,"column":0},"generated":{"line":3629,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3630,"column":0},"generated":{"line":3630,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3631,"column":0},"generated":{"line":3631,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3632,"column":0},"generated":{"line":3632,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3633,"column":0},"generated":{"line":3633,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3634,"column":0},"generated":{"line":3634,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3635,"column":0},"generated":{"line":3635,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3636,"column":0},"generated":{"line":3636,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3637,"column":0},"generated":{"line":3637,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3638,"column":0},"generated":{"line":3638,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3639,"column":0},"generated":{"line":3639,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3640,"column":0},"generated":{"line":3640,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3641,"column":0},"generated":{"line":3641,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3642,"column":0},"generated":{"line":3642,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3643,"column":0},"generated":{"line":3643,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3644,"column":0},"generated":{"line":3644,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3645,"column":0},"generated":{"line":3645,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3646,"column":0},"generated":{"line":3646,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3647,"column":0},"generated":{"line":3647,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3648,"column":0},"generated":{"line":3648,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3649,"column":0},"generated":{"line":3649,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3650,"column":0},"generated":{"line":3650,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3651,"column":0},"generated":{"line":3651,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3652,"column":0},"generated":{"line":3652,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3653,"column":0},"generated":{"line":3653,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3654,"column":0},"generated":{"line":3654,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3655,"column":0},"generated":{"line":3655,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3656,"column":0},"generated":{"line":3656,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3657,"column":0},"generated":{"line":3657,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3658,"column":0},"generated":{"line":3658,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3659,"column":0},"generated":{"line":3659,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3660,"column":0},"generated":{"line":3660,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3661,"column":0},"generated":{"line":3661,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3662,"column":0},"generated":{"line":3662,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3663,"column":0},"generated":{"line":3663,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3664,"column":0},"generated":{"line":3664,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3665,"column":0},"generated":{"line":3665,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3666,"column":0},"generated":{"line":3666,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3667,"column":0},"generated":{"line":3667,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3668,"column":0},"generated":{"line":3668,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3669,"column":0},"generated":{"line":3669,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3670,"column":0},"generated":{"line":3670,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3671,"column":0},"generated":{"line":3671,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3672,"column":0},"generated":{"line":3672,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3673,"column":0},"generated":{"line":3673,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3674,"column":0},"generated":{"line":3674,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3675,"column":0},"generated":{"line":3675,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3676,"column":0},"generated":{"line":3676,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3677,"column":0},"generated":{"line":3677,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3678,"column":0},"generated":{"line":3678,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3679,"column":0},"generated":{"line":3679,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3680,"column":0},"generated":{"line":3680,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3681,"column":0},"generated":{"line":3681,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3682,"column":0},"generated":{"line":3682,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3683,"column":0},"generated":{"line":3683,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3684,"column":0},"generated":{"line":3684,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3685,"column":0},"generated":{"line":3685,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3686,"column":0},"generated":{"line":3686,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3687,"column":0},"generated":{"line":3687,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3688,"column":0},"generated":{"line":3688,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3689,"column":0},"generated":{"line":3689,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3690,"column":0},"generated":{"line":3690,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3691,"column":0},"generated":{"line":3691,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3692,"column":0},"generated":{"line":3692,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3693,"column":0},"generated":{"line":3693,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3694,"column":0},"generated":{"line":3694,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3695,"column":0},"generated":{"line":3695,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3696,"column":0},"generated":{"line":3696,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3697,"column":0},"generated":{"line":3697,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3698,"column":0},"generated":{"line":3698,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3699,"column":0},"generated":{"line":3699,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3700,"column":0},"generated":{"line":3700,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3701,"column":0},"generated":{"line":3701,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3702,"column":0},"generated":{"line":3702,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3703,"column":0},"generated":{"line":3703,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3704,"column":0},"generated":{"line":3704,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3705,"column":0},"generated":{"line":3705,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3706,"column":0},"generated":{"line":3706,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3707,"column":0},"generated":{"line":3707,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3708,"column":0},"generated":{"line":3708,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3709,"column":0},"generated":{"line":3709,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3710,"column":0},"generated":{"line":3710,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3711,"column":0},"generated":{"line":3711,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3712,"column":0},"generated":{"line":3712,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3713,"column":0},"generated":{"line":3713,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3714,"column":0},"generated":{"line":3714,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3715,"column":0},"generated":{"line":3715,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3716,"column":0},"generated":{"line":3716,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3717,"column":0},"generated":{"line":3717,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3718,"column":0},"generated":{"line":3718,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3719,"column":0},"generated":{"line":3719,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3720,"column":0},"generated":{"line":3720,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3721,"column":0},"generated":{"line":3721,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3722,"column":0},"generated":{"line":3722,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3723,"column":0},"generated":{"line":3723,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3724,"column":0},"generated":{"line":3724,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3725,"column":0},"generated":{"line":3725,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3726,"column":0},"generated":{"line":3726,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3727,"column":0},"generated":{"line":3727,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3728,"column":0},"generated":{"line":3728,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3729,"column":0},"generated":{"line":3729,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3730,"column":0},"generated":{"line":3730,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3731,"column":0},"generated":{"line":3731,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3732,"column":0},"generated":{"line":3732,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3733,"column":0},"generated":{"line":3733,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3734,"column":0},"generated":{"line":3734,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3735,"column":0},"generated":{"line":3735,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3736,"column":0},"generated":{"line":3736,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3737,"column":0},"generated":{"line":3737,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3738,"column":0},"generated":{"line":3738,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3739,"column":0},"generated":{"line":3739,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3740,"column":0},"generated":{"line":3740,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3741,"column":0},"generated":{"line":3741,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3742,"column":0},"generated":{"line":3742,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3743,"column":0},"generated":{"line":3743,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3744,"column":0},"generated":{"line":3744,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3745,"column":0},"generated":{"line":3745,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3746,"column":0},"generated":{"line":3746,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3747,"column":0},"generated":{"line":3747,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3748,"column":0},"generated":{"line":3748,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3749,"column":0},"generated":{"line":3749,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3750,"column":0},"generated":{"line":3750,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3751,"column":0},"generated":{"line":3751,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3752,"column":0},"generated":{"line":3752,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3753,"column":0},"generated":{"line":3753,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3754,"column":0},"generated":{"line":3754,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3755,"column":0},"generated":{"line":3755,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3756,"column":0},"generated":{"line":3756,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3757,"column":0},"generated":{"line":3757,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3758,"column":0},"generated":{"line":3758,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3759,"column":0},"generated":{"line":3759,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3760,"column":0},"generated":{"line":3760,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3761,"column":0},"generated":{"line":3761,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3762,"column":0},"generated":{"line":3762,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3763,"column":0},"generated":{"line":3763,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3764,"column":0},"generated":{"line":3764,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3765,"column":0},"generated":{"line":3765,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3766,"column":0},"generated":{"line":3766,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3767,"column":0},"generated":{"line":3767,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3768,"column":0},"generated":{"line":3768,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3769,"column":0},"generated":{"line":3769,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3770,"column":0},"generated":{"line":3770,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3771,"column":0},"generated":{"line":3771,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3772,"column":0},"generated":{"line":3772,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3773,"column":0},"generated":{"line":3773,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3774,"column":0},"generated":{"line":3774,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3775,"column":0},"generated":{"line":3775,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3776,"column":0},"generated":{"line":3776,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3777,"column":0},"generated":{"line":3777,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3778,"column":0},"generated":{"line":3778,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3779,"column":0},"generated":{"line":3779,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3780,"column":0},"generated":{"line":3780,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3781,"column":0},"generated":{"line":3781,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3782,"column":0},"generated":{"line":3782,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3783,"column":0},"generated":{"line":3783,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3784,"column":0},"generated":{"line":3784,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3785,"column":0},"generated":{"line":3785,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3786,"column":0},"generated":{"line":3786,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3787,"column":0},"generated":{"line":3787,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3788,"column":0},"generated":{"line":3788,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3789,"column":0},"generated":{"line":3789,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3790,"column":0},"generated":{"line":3790,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3791,"column":0},"generated":{"line":3791,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3792,"column":0},"generated":{"line":3792,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3793,"column":0},"generated":{"line":3793,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3794,"column":0},"generated":{"line":3794,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3795,"column":0},"generated":{"line":3795,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3796,"column":0},"generated":{"line":3796,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3797,"column":0},"generated":{"line":3797,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3798,"column":0},"generated":{"line":3798,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3799,"column":0},"generated":{"line":3799,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3800,"column":0},"generated":{"line":3800,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3801,"column":0},"generated":{"line":3801,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3802,"column":0},"generated":{"line":3802,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3803,"column":0},"generated":{"line":3803,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3804,"column":0},"generated":{"line":3804,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3805,"column":0},"generated":{"line":3805,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3806,"column":0},"generated":{"line":3806,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3807,"column":0},"generated":{"line":3807,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3808,"column":0},"generated":{"line":3808,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3809,"column":0},"generated":{"line":3809,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3810,"column":0},"generated":{"line":3810,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3811,"column":0},"generated":{"line":3811,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3812,"column":0},"generated":{"line":3812,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3813,"column":0},"generated":{"line":3813,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3814,"column":0},"generated":{"line":3814,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3815,"column":0},"generated":{"line":3815,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3816,"column":0},"generated":{"line":3816,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3817,"column":0},"generated":{"line":3817,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3818,"column":0},"generated":{"line":3818,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3819,"column":0},"generated":{"line":3819,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3820,"column":0},"generated":{"line":3820,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3821,"column":0},"generated":{"line":3821,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3822,"column":0},"generated":{"line":3822,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3823,"column":0},"generated":{"line":3823,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3824,"column":0},"generated":{"line":3824,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3825,"column":0},"generated":{"line":3825,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3826,"column":0},"generated":{"line":3826,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3827,"column":0},"generated":{"line":3827,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3828,"column":0},"generated":{"line":3828,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3829,"column":0},"generated":{"line":3829,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3830,"column":0},"generated":{"line":3830,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3831,"column":0},"generated":{"line":3831,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3832,"column":0},"generated":{"line":3832,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3833,"column":0},"generated":{"line":3833,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3834,"column":0},"generated":{"line":3834,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3835,"column":0},"generated":{"line":3835,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3836,"column":0},"generated":{"line":3836,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3837,"column":0},"generated":{"line":3837,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3838,"column":0},"generated":{"line":3838,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3839,"column":0},"generated":{"line":3839,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3840,"column":0},"generated":{"line":3840,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3841,"column":0},"generated":{"line":3841,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3842,"column":0},"generated":{"line":3842,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3843,"column":0},"generated":{"line":3843,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3844,"column":0},"generated":{"line":3844,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3845,"column":0},"generated":{"line":3845,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3846,"column":0},"generated":{"line":3846,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3847,"column":0},"generated":{"line":3847,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3848,"column":0},"generated":{"line":3848,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3849,"column":0},"generated":{"line":3849,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3850,"column":0},"generated":{"line":3850,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3851,"column":0},"generated":{"line":3851,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3852,"column":0},"generated":{"line":3852,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3853,"column":0},"generated":{"line":3853,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3854,"column":0},"generated":{"line":3854,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3855,"column":0},"generated":{"line":3855,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3856,"column":0},"generated":{"line":3856,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3857,"column":0},"generated":{"line":3857,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3858,"column":0},"generated":{"line":3858,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3859,"column":0},"generated":{"line":3859,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3860,"column":0},"generated":{"line":3860,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3861,"column":0},"generated":{"line":3861,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3862,"column":0},"generated":{"line":3862,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3863,"column":0},"generated":{"line":3863,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3864,"column":0},"generated":{"line":3864,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3865,"column":0},"generated":{"line":3865,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3866,"column":0},"generated":{"line":3866,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3867,"column":0},"generated":{"line":3867,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3868,"column":0},"generated":{"line":3868,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3869,"column":0},"generated":{"line":3869,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3870,"column":0},"generated":{"line":3870,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3871,"column":0},"generated":{"line":3871,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3872,"column":0},"generated":{"line":3872,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3873,"column":0},"generated":{"line":3873,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3874,"column":0},"generated":{"line":3874,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3875,"column":0},"generated":{"line":3875,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3876,"column":0},"generated":{"line":3876,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3877,"column":0},"generated":{"line":3877,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3878,"column":0},"generated":{"line":3878,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3879,"column":0},"generated":{"line":3879,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3880,"column":0},"generated":{"line":3880,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3881,"column":0},"generated":{"line":3881,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3882,"column":0},"generated":{"line":3882,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3883,"column":0},"generated":{"line":3883,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3884,"column":0},"generated":{"line":3884,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3885,"column":0},"generated":{"line":3885,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3886,"column":0},"generated":{"line":3886,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3887,"column":0},"generated":{"line":3887,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3888,"column":0},"generated":{"line":3888,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3889,"column":0},"generated":{"line":3889,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3890,"column":0},"generated":{"line":3890,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3891,"column":0},"generated":{"line":3891,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3892,"column":0},"generated":{"line":3892,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3893,"column":0},"generated":{"line":3893,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3894,"column":0},"generated":{"line":3894,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3895,"column":0},"generated":{"line":3895,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3896,"column":0},"generated":{"line":3896,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3897,"column":0},"generated":{"line":3897,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3898,"column":0},"generated":{"line":3898,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3899,"column":0},"generated":{"line":3899,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3900,"column":0},"generated":{"line":3900,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3901,"column":0},"generated":{"line":3901,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3902,"column":0},"generated":{"line":3902,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3903,"column":0},"generated":{"line":3903,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3904,"column":0},"generated":{"line":3904,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3905,"column":0},"generated":{"line":3905,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3906,"column":0},"generated":{"line":3906,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3907,"column":0},"generated":{"line":3907,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3908,"column":0},"generated":{"line":3908,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3909,"column":0},"generated":{"line":3909,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3910,"column":0},"generated":{"line":3910,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3911,"column":0},"generated":{"line":3911,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3912,"column":0},"generated":{"line":3912,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3913,"column":0},"generated":{"line":3913,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3914,"column":0},"generated":{"line":3914,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3915,"column":0},"generated":{"line":3915,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3916,"column":0},"generated":{"line":3916,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3917,"column":0},"generated":{"line":3917,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3918,"column":0},"generated":{"line":3918,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3919,"column":0},"generated":{"line":3919,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3920,"column":0},"generated":{"line":3920,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3921,"column":0},"generated":{"line":3921,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3922,"column":0},"generated":{"line":3922,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3923,"column":0},"generated":{"line":3923,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3924,"column":0},"generated":{"line":3924,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3925,"column":0},"generated":{"line":3925,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3926,"column":0},"generated":{"line":3926,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3927,"column":0},"generated":{"line":3927,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3928,"column":0},"generated":{"line":3928,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3929,"column":0},"generated":{"line":3929,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3930,"column":0},"generated":{"line":3930,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3931,"column":0},"generated":{"line":3931,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3932,"column":0},"generated":{"line":3932,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3933,"column":0},"generated":{"line":3933,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3934,"column":0},"generated":{"line":3934,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3935,"column":0},"generated":{"line":3935,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3936,"column":0},"generated":{"line":3936,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3937,"column":0},"generated":{"line":3937,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3938,"column":0},"generated":{"line":3938,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3939,"column":0},"generated":{"line":3939,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3940,"column":0},"generated":{"line":3940,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3941,"column":0},"generated":{"line":3941,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3942,"column":0},"generated":{"line":3942,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3943,"column":0},"generated":{"line":3943,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3944,"column":0},"generated":{"line":3944,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3945,"column":0},"generated":{"line":3945,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3946,"column":0},"generated":{"line":3946,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3947,"column":0},"generated":{"line":3947,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3948,"column":0},"generated":{"line":3948,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3949,"column":0},"generated":{"line":3949,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3950,"column":0},"generated":{"line":3950,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3951,"column":0},"generated":{"line":3951,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3952,"column":0},"generated":{"line":3952,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3953,"column":0},"generated":{"line":3953,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3954,"column":0},"generated":{"line":3954,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3955,"column":0},"generated":{"line":3955,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3956,"column":0},"generated":{"line":3956,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3957,"column":0},"generated":{"line":3957,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3958,"column":0},"generated":{"line":3958,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3959,"column":0},"generated":{"line":3959,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3960,"column":0},"generated":{"line":3960,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3961,"column":0},"generated":{"line":3961,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3962,"column":0},"generated":{"line":3962,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3963,"column":0},"generated":{"line":3963,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3964,"column":0},"generated":{"line":3964,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3965,"column":0},"generated":{"line":3965,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3966,"column":0},"generated":{"line":3966,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3967,"column":0},"generated":{"line":3967,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3968,"column":0},"generated":{"line":3968,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3969,"column":0},"generated":{"line":3969,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3970,"column":0},"generated":{"line":3970,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3971,"column":0},"generated":{"line":3971,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3972,"column":0},"generated":{"line":3972,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3973,"column":0},"generated":{"line":3973,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3974,"column":0},"generated":{"line":3974,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3975,"column":0},"generated":{"line":3975,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3976,"column":0},"generated":{"line":3976,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3977,"column":0},"generated":{"line":3977,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3978,"column":0},"generated":{"line":3978,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3979,"column":0},"generated":{"line":3979,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3980,"column":0},"generated":{"line":3980,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3981,"column":0},"generated":{"line":3981,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3982,"column":0},"generated":{"line":3982,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3983,"column":0},"generated":{"line":3983,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3984,"column":0},"generated":{"line":3984,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3985,"column":0},"generated":{"line":3985,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3986,"column":0},"generated":{"line":3986,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3987,"column":0},"generated":{"line":3987,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3988,"column":0},"generated":{"line":3988,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3989,"column":0},"generated":{"line":3989,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3990,"column":0},"generated":{"line":3990,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3991,"column":0},"generated":{"line":3991,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3992,"column":0},"generated":{"line":3992,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3993,"column":0},"generated":{"line":3993,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3994,"column":0},"generated":{"line":3994,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3995,"column":0},"generated":{"line":3995,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3996,"column":0},"generated":{"line":3996,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3997,"column":0},"generated":{"line":3997,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3998,"column":0},"generated":{"line":3998,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":3999,"column":0},"generated":{"line":3999,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4000,"column":0},"generated":{"line":4000,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4001,"column":0},"generated":{"line":4001,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4002,"column":0},"generated":{"line":4002,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4003,"column":0},"generated":{"line":4003,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4004,"column":0},"generated":{"line":4004,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4005,"column":0},"generated":{"line":4005,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4006,"column":0},"generated":{"line":4006,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4007,"column":0},"generated":{"line":4007,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4008,"column":0},"generated":{"line":4008,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4009,"column":0},"generated":{"line":4009,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4010,"column":0},"generated":{"line":4010,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4011,"column":0},"generated":{"line":4011,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4012,"column":0},"generated":{"line":4012,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4013,"column":0},"generated":{"line":4013,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4014,"column":0},"generated":{"line":4014,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4015,"column":0},"generated":{"line":4015,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4016,"column":0},"generated":{"line":4016,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4017,"column":0},"generated":{"line":4017,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4018,"column":0},"generated":{"line":4018,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4019,"column":0},"generated":{"line":4019,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4020,"column":0},"generated":{"line":4020,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4021,"column":0},"generated":{"line":4021,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4022,"column":0},"generated":{"line":4022,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4023,"column":0},"generated":{"line":4023,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4024,"column":0},"generated":{"line":4024,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4025,"column":0},"generated":{"line":4025,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4026,"column":0},"generated":{"line":4026,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4027,"column":0},"generated":{"line":4027,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4028,"column":0},"generated":{"line":4028,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4029,"column":0},"generated":{"line":4029,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4030,"column":0},"generated":{"line":4030,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4031,"column":0},"generated":{"line":4031,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4032,"column":0},"generated":{"line":4032,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4033,"column":0},"generated":{"line":4033,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4034,"column":0},"generated":{"line":4034,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4035,"column":0},"generated":{"line":4035,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4036,"column":0},"generated":{"line":4036,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4037,"column":0},"generated":{"line":4037,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4038,"column":0},"generated":{"line":4038,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4039,"column":0},"generated":{"line":4039,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4040,"column":0},"generated":{"line":4040,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4041,"column":0},"generated":{"line":4041,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4042,"column":0},"generated":{"line":4042,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4043,"column":0},"generated":{"line":4043,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4044,"column":0},"generated":{"line":4044,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4045,"column":0},"generated":{"line":4045,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4046,"column":0},"generated":{"line":4046,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4047,"column":0},"generated":{"line":4047,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4048,"column":0},"generated":{"line":4048,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4049,"column":0},"generated":{"line":4049,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4050,"column":0},"generated":{"line":4050,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4051,"column":0},"generated":{"line":4051,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4052,"column":0},"generated":{"line":4052,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4053,"column":0},"generated":{"line":4053,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4054,"column":0},"generated":{"line":4054,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4055,"column":0},"generated":{"line":4055,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4056,"column":0},"generated":{"line":4056,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4057,"column":0},"generated":{"line":4057,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4058,"column":0},"generated":{"line":4058,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4059,"column":0},"generated":{"line":4059,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4060,"column":0},"generated":{"line":4060,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4061,"column":0},"generated":{"line":4061,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4062,"column":0},"generated":{"line":4062,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4063,"column":0},"generated":{"line":4063,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4064,"column":0},"generated":{"line":4064,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4065,"column":0},"generated":{"line":4065,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4066,"column":0},"generated":{"line":4066,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4067,"column":0},"generated":{"line":4067,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4068,"column":0},"generated":{"line":4068,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4069,"column":0},"generated":{"line":4069,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4070,"column":0},"generated":{"line":4070,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4071,"column":0},"generated":{"line":4071,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4072,"column":0},"generated":{"line":4072,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4073,"column":0},"generated":{"line":4073,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4074,"column":0},"generated":{"line":4074,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4075,"column":0},"generated":{"line":4075,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4076,"column":0},"generated":{"line":4076,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4077,"column":0},"generated":{"line":4077,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4078,"column":0},"generated":{"line":4078,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4079,"column":0},"generated":{"line":4079,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4080,"column":0},"generated":{"line":4080,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4081,"column":0},"generated":{"line":4081,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4082,"column":0},"generated":{"line":4082,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4083,"column":0},"generated":{"line":4083,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4084,"column":0},"generated":{"line":4084,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4085,"column":0},"generated":{"line":4085,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4086,"column":0},"generated":{"line":4086,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4087,"column":0},"generated":{"line":4087,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4088,"column":0},"generated":{"line":4088,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4089,"column":0},"generated":{"line":4089,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4090,"column":0},"generated":{"line":4090,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4091,"column":0},"generated":{"line":4091,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4092,"column":0},"generated":{"line":4092,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4093,"column":0},"generated":{"line":4093,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4094,"column":0},"generated":{"line":4094,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4095,"column":0},"generated":{"line":4095,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4096,"column":0},"generated":{"line":4096,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4097,"column":0},"generated":{"line":4097,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4098,"column":0},"generated":{"line":4098,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4099,"column":0},"generated":{"line":4099,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4100,"column":0},"generated":{"line":4100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4101,"column":0},"generated":{"line":4101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4102,"column":0},"generated":{"line":4102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4103,"column":0},"generated":{"line":4103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4104,"column":0},"generated":{"line":4104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4105,"column":0},"generated":{"line":4105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4106,"column":0},"generated":{"line":4106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4107,"column":0},"generated":{"line":4107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4108,"column":0},"generated":{"line":4108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4109,"column":0},"generated":{"line":4109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4110,"column":0},"generated":{"line":4110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4111,"column":0},"generated":{"line":4111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4112,"column":0},"generated":{"line":4112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4113,"column":0},"generated":{"line":4113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4114,"column":0},"generated":{"line":4114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4115,"column":0},"generated":{"line":4115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4116,"column":0},"generated":{"line":4116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4117,"column":0},"generated":{"line":4117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4118,"column":0},"generated":{"line":4118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4119,"column":0},"generated":{"line":4119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4120,"column":0},"generated":{"line":4120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4121,"column":0},"generated":{"line":4121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4122,"column":0},"generated":{"line":4122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4123,"column":0},"generated":{"line":4123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4124,"column":0},"generated":{"line":4124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4125,"column":0},"generated":{"line":4125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4126,"column":0},"generated":{"line":4126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4127,"column":0},"generated":{"line":4127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4128,"column":0},"generated":{"line":4128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4129,"column":0},"generated":{"line":4129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4130,"column":0},"generated":{"line":4130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4131,"column":0},"generated":{"line":4131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4132,"column":0},"generated":{"line":4132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4133,"column":0},"generated":{"line":4133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4134,"column":0},"generated":{"line":4134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4135,"column":0},"generated":{"line":4135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4136,"column":0},"generated":{"line":4136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4137,"column":0},"generated":{"line":4137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4138,"column":0},"generated":{"line":4138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4139,"column":0},"generated":{"line":4139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4140,"column":0},"generated":{"line":4140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4141,"column":0},"generated":{"line":4141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4142,"column":0},"generated":{"line":4142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4143,"column":0},"generated":{"line":4143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4144,"column":0},"generated":{"line":4144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4145,"column":0},"generated":{"line":4145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4146,"column":0},"generated":{"line":4146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4147,"column":0},"generated":{"line":4147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4148,"column":0},"generated":{"line":4148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4149,"column":0},"generated":{"line":4149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4150,"column":0},"generated":{"line":4150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4151,"column":0},"generated":{"line":4151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4152,"column":0},"generated":{"line":4152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4153,"column":0},"generated":{"line":4153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4154,"column":0},"generated":{"line":4154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4155,"column":0},"generated":{"line":4155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4156,"column":0},"generated":{"line":4156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4157,"column":0},"generated":{"line":4157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4158,"column":0},"generated":{"line":4158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4159,"column":0},"generated":{"line":4159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4160,"column":0},"generated":{"line":4160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4161,"column":0},"generated":{"line":4161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4162,"column":0},"generated":{"line":4162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4163,"column":0},"generated":{"line":4163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4164,"column":0},"generated":{"line":4164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4165,"column":0},"generated":{"line":4165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4166,"column":0},"generated":{"line":4166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4167,"column":0},"generated":{"line":4167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4168,"column":0},"generated":{"line":4168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4169,"column":0},"generated":{"line":4169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4170,"column":0},"generated":{"line":4170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4171,"column":0},"generated":{"line":4171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4172,"column":0},"generated":{"line":4172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4173,"column":0},"generated":{"line":4173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4174,"column":0},"generated":{"line":4174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4175,"column":0},"generated":{"line":4175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4176,"column":0},"generated":{"line":4176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4177,"column":0},"generated":{"line":4177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4178,"column":0},"generated":{"line":4178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4179,"column":0},"generated":{"line":4179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4180,"column":0},"generated":{"line":4180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4181,"column":0},"generated":{"line":4181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4182,"column":0},"generated":{"line":4182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4183,"column":0},"generated":{"line":4183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4184,"column":0},"generated":{"line":4184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4185,"column":0},"generated":{"line":4185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4186,"column":0},"generated":{"line":4186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4187,"column":0},"generated":{"line":4187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4188,"column":0},"generated":{"line":4188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4189,"column":0},"generated":{"line":4189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4190,"column":0},"generated":{"line":4190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4191,"column":0},"generated":{"line":4191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4192,"column":0},"generated":{"line":4192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4193,"column":0},"generated":{"line":4193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4194,"column":0},"generated":{"line":4194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4195,"column":0},"generated":{"line":4195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4196,"column":0},"generated":{"line":4196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4197,"column":0},"generated":{"line":4197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4198,"column":0},"generated":{"line":4198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4199,"column":0},"generated":{"line":4199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4200,"column":0},"generated":{"line":4200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4201,"column":0},"generated":{"line":4201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4202,"column":0},"generated":{"line":4202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4203,"column":0},"generated":{"line":4203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4204,"column":0},"generated":{"line":4204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4205,"column":0},"generated":{"line":4205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4206,"column":0},"generated":{"line":4206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4207,"column":0},"generated":{"line":4207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4208,"column":0},"generated":{"line":4208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4209,"column":0},"generated":{"line":4209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4210,"column":0},"generated":{"line":4210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4211,"column":0},"generated":{"line":4211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4212,"column":0},"generated":{"line":4212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4213,"column":0},"generated":{"line":4213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4214,"column":0},"generated":{"line":4214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4215,"column":0},"generated":{"line":4215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4216,"column":0},"generated":{"line":4216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4217,"column":0},"generated":{"line":4217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4218,"column":0},"generated":{"line":4218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4219,"column":0},"generated":{"line":4219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4220,"column":0},"generated":{"line":4220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4221,"column":0},"generated":{"line":4221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4222,"column":0},"generated":{"line":4222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4223,"column":0},"generated":{"line":4223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4224,"column":0},"generated":{"line":4224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4225,"column":0},"generated":{"line":4225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4226,"column":0},"generated":{"line":4226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4227,"column":0},"generated":{"line":4227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4228,"column":0},"generated":{"line":4228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4229,"column":0},"generated":{"line":4229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4230,"column":0},"generated":{"line":4230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4231,"column":0},"generated":{"line":4231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4232,"column":0},"generated":{"line":4232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4233,"column":0},"generated":{"line":4233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4234,"column":0},"generated":{"line":4234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4235,"column":0},"generated":{"line":4235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4236,"column":0},"generated":{"line":4236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4237,"column":0},"generated":{"line":4237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4238,"column":0},"generated":{"line":4238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4239,"column":0},"generated":{"line":4239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4240,"column":0},"generated":{"line":4240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4241,"column":0},"generated":{"line":4241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4242,"column":0},"generated":{"line":4242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4243,"column":0},"generated":{"line":4243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4244,"column":0},"generated":{"line":4244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4245,"column":0},"generated":{"line":4245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4246,"column":0},"generated":{"line":4246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4247,"column":0},"generated":{"line":4247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4248,"column":0},"generated":{"line":4248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4249,"column":0},"generated":{"line":4249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4250,"column":0},"generated":{"line":4250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4251,"column":0},"generated":{"line":4251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4252,"column":0},"generated":{"line":4252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4253,"column":0},"generated":{"line":4253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4254,"column":0},"generated":{"line":4254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4255,"column":0},"generated":{"line":4255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4256,"column":0},"generated":{"line":4256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4257,"column":0},"generated":{"line":4257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4258,"column":0},"generated":{"line":4258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4259,"column":0},"generated":{"line":4259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4260,"column":0},"generated":{"line":4260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4261,"column":0},"generated":{"line":4261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4262,"column":0},"generated":{"line":4262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4263,"column":0},"generated":{"line":4263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4264,"column":0},"generated":{"line":4264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4265,"column":0},"generated":{"line":4265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4266,"column":0},"generated":{"line":4266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4267,"column":0},"generated":{"line":4267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4268,"column":0},"generated":{"line":4268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4269,"column":0},"generated":{"line":4269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4270,"column":0},"generated":{"line":4270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4271,"column":0},"generated":{"line":4271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4272,"column":0},"generated":{"line":4272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4273,"column":0},"generated":{"line":4273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4274,"column":0},"generated":{"line":4274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4275,"column":0},"generated":{"line":4275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4276,"column":0},"generated":{"line":4276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4277,"column":0},"generated":{"line":4277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4278,"column":0},"generated":{"line":4278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4279,"column":0},"generated":{"line":4279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4280,"column":0},"generated":{"line":4280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4281,"column":0},"generated":{"line":4281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4282,"column":0},"generated":{"line":4282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4283,"column":0},"generated":{"line":4283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4284,"column":0},"generated":{"line":4284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4285,"column":0},"generated":{"line":4285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4286,"column":0},"generated":{"line":4286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4287,"column":0},"generated":{"line":4287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4288,"column":0},"generated":{"line":4288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4289,"column":0},"generated":{"line":4289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4290,"column":0},"generated":{"line":4290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4291,"column":0},"generated":{"line":4291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4292,"column":0},"generated":{"line":4292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4293,"column":0},"generated":{"line":4293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4294,"column":0},"generated":{"line":4294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4295,"column":0},"generated":{"line":4295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4296,"column":0},"generated":{"line":4296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4297,"column":0},"generated":{"line":4297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4298,"column":0},"generated":{"line":4298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4299,"column":0},"generated":{"line":4299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4300,"column":0},"generated":{"line":4300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4301,"column":0},"generated":{"line":4301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4302,"column":0},"generated":{"line":4302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4303,"column":0},"generated":{"line":4303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4304,"column":0},"generated":{"line":4304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4305,"column":0},"generated":{"line":4305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4306,"column":0},"generated":{"line":4306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4307,"column":0},"generated":{"line":4307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4308,"column":0},"generated":{"line":4308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4309,"column":0},"generated":{"line":4309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4310,"column":0},"generated":{"line":4310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4311,"column":0},"generated":{"line":4311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4312,"column":0},"generated":{"line":4312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4313,"column":0},"generated":{"line":4313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4314,"column":0},"generated":{"line":4314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4315,"column":0},"generated":{"line":4315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4316,"column":0},"generated":{"line":4316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4317,"column":0},"generated":{"line":4317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4318,"column":0},"generated":{"line":4318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4319,"column":0},"generated":{"line":4319,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4320,"column":0},"generated":{"line":4320,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4321,"column":0},"generated":{"line":4321,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4322,"column":0},"generated":{"line":4322,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4323,"column":0},"generated":{"line":4323,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4324,"column":0},"generated":{"line":4324,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4325,"column":0},"generated":{"line":4325,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4326,"column":0},"generated":{"line":4326,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4327,"column":0},"generated":{"line":4327,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4328,"column":0},"generated":{"line":4328,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4329,"column":0},"generated":{"line":4329,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4330,"column":0},"generated":{"line":4330,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4331,"column":0},"generated":{"line":4331,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4332,"column":0},"generated":{"line":4332,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4333,"column":0},"generated":{"line":4333,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4334,"column":0},"generated":{"line":4334,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4335,"column":0},"generated":{"line":4335,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4336,"column":0},"generated":{"line":4336,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4337,"column":0},"generated":{"line":4337,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4338,"column":0},"generated":{"line":4338,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4339,"column":0},"generated":{"line":4339,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4340,"column":0},"generated":{"line":4340,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4341,"column":0},"generated":{"line":4341,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4342,"column":0},"generated":{"line":4342,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4343,"column":0},"generated":{"line":4343,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4344,"column":0},"generated":{"line":4344,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4345,"column":0},"generated":{"line":4345,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4346,"column":0},"generated":{"line":4346,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4347,"column":0},"generated":{"line":4347,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4348,"column":0},"generated":{"line":4348,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4349,"column":0},"generated":{"line":4349,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4350,"column":0},"generated":{"line":4350,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4351,"column":0},"generated":{"line":4351,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4352,"column":0},"generated":{"line":4352,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4353,"column":0},"generated":{"line":4353,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4354,"column":0},"generated":{"line":4354,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4355,"column":0},"generated":{"line":4355,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4356,"column":0},"generated":{"line":4356,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4357,"column":0},"generated":{"line":4357,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4358,"column":0},"generated":{"line":4358,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4359,"column":0},"generated":{"line":4359,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4360,"column":0},"generated":{"line":4360,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4361,"column":0},"generated":{"line":4361,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4362,"column":0},"generated":{"line":4362,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4363,"column":0},"generated":{"line":4363,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4364,"column":0},"generated":{"line":4364,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4365,"column":0},"generated":{"line":4365,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4366,"column":0},"generated":{"line":4366,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4367,"column":0},"generated":{"line":4367,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4368,"column":0},"generated":{"line":4368,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4369,"column":0},"generated":{"line":4369,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4370,"column":0},"generated":{"line":4370,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4371,"column":0},"generated":{"line":4371,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4372,"column":0},"generated":{"line":4372,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4373,"column":0},"generated":{"line":4373,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4374,"column":0},"generated":{"line":4374,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4375,"column":0},"generated":{"line":4375,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4376,"column":0},"generated":{"line":4376,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4377,"column":0},"generated":{"line":4377,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4378,"column":0},"generated":{"line":4378,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4379,"column":0},"generated":{"line":4379,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4380,"column":0},"generated":{"line":4380,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4381,"column":0},"generated":{"line":4381,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4382,"column":0},"generated":{"line":4382,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4383,"column":0},"generated":{"line":4383,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4384,"column":0},"generated":{"line":4384,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4385,"column":0},"generated":{"line":4385,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4386,"column":0},"generated":{"line":4386,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4387,"column":0},"generated":{"line":4387,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4388,"column":0},"generated":{"line":4388,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4389,"column":0},"generated":{"line":4389,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4390,"column":0},"generated":{"line":4390,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4391,"column":0},"generated":{"line":4391,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4392,"column":0},"generated":{"line":4392,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4393,"column":0},"generated":{"line":4393,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4394,"column":0},"generated":{"line":4394,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4395,"column":0},"generated":{"line":4395,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4396,"column":0},"generated":{"line":4396,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4397,"column":0},"generated":{"line":4397,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4398,"column":0},"generated":{"line":4398,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4399,"column":0},"generated":{"line":4399,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4400,"column":0},"generated":{"line":4400,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4401,"column":0},"generated":{"line":4401,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4402,"column":0},"generated":{"line":4402,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4403,"column":0},"generated":{"line":4403,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4404,"column":0},"generated":{"line":4404,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4405,"column":0},"generated":{"line":4405,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4406,"column":0},"generated":{"line":4406,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4407,"column":0},"generated":{"line":4407,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4408,"column":0},"generated":{"line":4408,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4409,"column":0},"generated":{"line":4409,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4410,"column":0},"generated":{"line":4410,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4411,"column":0},"generated":{"line":4411,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4412,"column":0},"generated":{"line":4412,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4413,"column":0},"generated":{"line":4413,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4414,"column":0},"generated":{"line":4414,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4415,"column":0},"generated":{"line":4415,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4416,"column":0},"generated":{"line":4416,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4417,"column":0},"generated":{"line":4417,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4418,"column":0},"generated":{"line":4418,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4419,"column":0},"generated":{"line":4419,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4420,"column":0},"generated":{"line":4420,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4421,"column":0},"generated":{"line":4421,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4422,"column":0},"generated":{"line":4422,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4423,"column":0},"generated":{"line":4423,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4424,"column":0},"generated":{"line":4424,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4425,"column":0},"generated":{"line":4425,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4426,"column":0},"generated":{"line":4426,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4427,"column":0},"generated":{"line":4427,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4428,"column":0},"generated":{"line":4428,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4429,"column":0},"generated":{"line":4429,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4430,"column":0},"generated":{"line":4430,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4431,"column":0},"generated":{"line":4431,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4432,"column":0},"generated":{"line":4432,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4433,"column":0},"generated":{"line":4433,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4434,"column":0},"generated":{"line":4434,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4435,"column":0},"generated":{"line":4435,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4436,"column":0},"generated":{"line":4436,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4437,"column":0},"generated":{"line":4437,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4438,"column":0},"generated":{"line":4438,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4439,"column":0},"generated":{"line":4439,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4440,"column":0},"generated":{"line":4440,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4441,"column":0},"generated":{"line":4441,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4442,"column":0},"generated":{"line":4442,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4443,"column":0},"generated":{"line":4443,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4444,"column":0},"generated":{"line":4444,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4445,"column":0},"generated":{"line":4445,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4446,"column":0},"generated":{"line":4446,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4447,"column":0},"generated":{"line":4447,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4448,"column":0},"generated":{"line":4448,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4449,"column":0},"generated":{"line":4449,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4450,"column":0},"generated":{"line":4450,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4451,"column":0},"generated":{"line":4451,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4452,"column":0},"generated":{"line":4452,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4453,"column":0},"generated":{"line":4453,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4454,"column":0},"generated":{"line":4454,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4455,"column":0},"generated":{"line":4455,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4456,"column":0},"generated":{"line":4456,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4457,"column":0},"generated":{"line":4457,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4458,"column":0},"generated":{"line":4458,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4459,"column":0},"generated":{"line":4459,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4460,"column":0},"generated":{"line":4460,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4461,"column":0},"generated":{"line":4461,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4462,"column":0},"generated":{"line":4462,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4463,"column":0},"generated":{"line":4463,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4464,"column":0},"generated":{"line":4464,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4465,"column":0},"generated":{"line":4465,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4466,"column":0},"generated":{"line":4466,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4467,"column":0},"generated":{"line":4467,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4468,"column":0},"generated":{"line":4468,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4469,"column":0},"generated":{"line":4469,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4470,"column":0},"generated":{"line":4470,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4471,"column":0},"generated":{"line":4471,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4472,"column":0},"generated":{"line":4472,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4473,"column":0},"generated":{"line":4473,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4474,"column":0},"generated":{"line":4474,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4475,"column":0},"generated":{"line":4475,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4476,"column":0},"generated":{"line":4476,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4477,"column":0},"generated":{"line":4477,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4478,"column":0},"generated":{"line":4478,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4479,"column":0},"generated":{"line":4479,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4480,"column":0},"generated":{"line":4480,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4481,"column":0},"generated":{"line":4481,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4482,"column":0},"generated":{"line":4482,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4483,"column":0},"generated":{"line":4483,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4484,"column":0},"generated":{"line":4484,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4485,"column":0},"generated":{"line":4485,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4486,"column":0},"generated":{"line":4486,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4487,"column":0},"generated":{"line":4487,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4488,"column":0},"generated":{"line":4488,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4489,"column":0},"generated":{"line":4489,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4490,"column":0},"generated":{"line":4490,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4491,"column":0},"generated":{"line":4491,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4492,"column":0},"generated":{"line":4492,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4493,"column":0},"generated":{"line":4493,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4494,"column":0},"generated":{"line":4494,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4495,"column":0},"generated":{"line":4495,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4496,"column":0},"generated":{"line":4496,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4497,"column":0},"generated":{"line":4497,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4498,"column":0},"generated":{"line":4498,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4499,"column":0},"generated":{"line":4499,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4500,"column":0},"generated":{"line":4500,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4501,"column":0},"generated":{"line":4501,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4502,"column":0},"generated":{"line":4502,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4503,"column":0},"generated":{"line":4503,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4504,"column":0},"generated":{"line":4504,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4505,"column":0},"generated":{"line":4505,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4506,"column":0},"generated":{"line":4506,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4507,"column":0},"generated":{"line":4507,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4508,"column":0},"generated":{"line":4508,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4509,"column":0},"generated":{"line":4509,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4510,"column":0},"generated":{"line":4510,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4511,"column":0},"generated":{"line":4511,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4512,"column":0},"generated":{"line":4512,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4513,"column":0},"generated":{"line":4513,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4514,"column":0},"generated":{"line":4514,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4515,"column":0},"generated":{"line":4515,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4516,"column":0},"generated":{"line":4516,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4517,"column":0},"generated":{"line":4517,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4518,"column":0},"generated":{"line":4518,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4519,"column":0},"generated":{"line":4519,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4520,"column":0},"generated":{"line":4520,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4521,"column":0},"generated":{"line":4521,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4522,"column":0},"generated":{"line":4522,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4523,"column":0},"generated":{"line":4523,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4524,"column":0},"generated":{"line":4524,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4525,"column":0},"generated":{"line":4525,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4526,"column":0},"generated":{"line":4526,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4527,"column":0},"generated":{"line":4527,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4528,"column":0},"generated":{"line":4528,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4529,"column":0},"generated":{"line":4529,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4530,"column":0},"generated":{"line":4530,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4531,"column":0},"generated":{"line":4531,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4532,"column":0},"generated":{"line":4532,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4533,"column":0},"generated":{"line":4533,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4534,"column":0},"generated":{"line":4534,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4535,"column":0},"generated":{"line":4535,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4536,"column":0},"generated":{"line":4536,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4537,"column":0},"generated":{"line":4537,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4538,"column":0},"generated":{"line":4538,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4539,"column":0},"generated":{"line":4539,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4540,"column":0},"generated":{"line":4540,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4541,"column":0},"generated":{"line":4541,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4542,"column":0},"generated":{"line":4542,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4543,"column":0},"generated":{"line":4543,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4544,"column":0},"generated":{"line":4544,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4545,"column":0},"generated":{"line":4545,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4546,"column":0},"generated":{"line":4546,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4547,"column":0},"generated":{"line":4547,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4548,"column":0},"generated":{"line":4548,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4549,"column":0},"generated":{"line":4549,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4550,"column":0},"generated":{"line":4550,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4551,"column":0},"generated":{"line":4551,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4552,"column":0},"generated":{"line":4552,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4553,"column":0},"generated":{"line":4553,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4554,"column":0},"generated":{"line":4554,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4555,"column":0},"generated":{"line":4555,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4556,"column":0},"generated":{"line":4556,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4557,"column":0},"generated":{"line":4557,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4558,"column":0},"generated":{"line":4558,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4559,"column":0},"generated":{"line":4559,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4560,"column":0},"generated":{"line":4560,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4561,"column":0},"generated":{"line":4561,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4562,"column":0},"generated":{"line":4562,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4563,"column":0},"generated":{"line":4563,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4564,"column":0},"generated":{"line":4564,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4565,"column":0},"generated":{"line":4565,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4566,"column":0},"generated":{"line":4566,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4567,"column":0},"generated":{"line":4567,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4568,"column":0},"generated":{"line":4568,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4569,"column":0},"generated":{"line":4569,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4570,"column":0},"generated":{"line":4570,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4571,"column":0},"generated":{"line":4571,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4572,"column":0},"generated":{"line":4572,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4573,"column":0},"generated":{"line":4573,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4574,"column":0},"generated":{"line":4574,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4575,"column":0},"generated":{"line":4575,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4576,"column":0},"generated":{"line":4576,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4577,"column":0},"generated":{"line":4577,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4578,"column":0},"generated":{"line":4578,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4579,"column":0},"generated":{"line":4579,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4580,"column":0},"generated":{"line":4580,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4581,"column":0},"generated":{"line":4581,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4582,"column":0},"generated":{"line":4582,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4583,"column":0},"generated":{"line":4583,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4584,"column":0},"generated":{"line":4584,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4585,"column":0},"generated":{"line":4585,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4586,"column":0},"generated":{"line":4586,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4587,"column":0},"generated":{"line":4587,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4588,"column":0},"generated":{"line":4588,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4589,"column":0},"generated":{"line":4589,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4590,"column":0},"generated":{"line":4590,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4591,"column":0},"generated":{"line":4591,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4592,"column":0},"generated":{"line":4592,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4593,"column":0},"generated":{"line":4593,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4594,"column":0},"generated":{"line":4594,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4595,"column":0},"generated":{"line":4595,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4596,"column":0},"generated":{"line":4596,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4597,"column":0},"generated":{"line":4597,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4598,"column":0},"generated":{"line":4598,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4599,"column":0},"generated":{"line":4599,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4600,"column":0},"generated":{"line":4600,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4601,"column":0},"generated":{"line":4601,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4602,"column":0},"generated":{"line":4602,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4603,"column":0},"generated":{"line":4603,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4604,"column":0},"generated":{"line":4604,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4605,"column":0},"generated":{"line":4605,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4606,"column":0},"generated":{"line":4606,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4607,"column":0},"generated":{"line":4607,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4608,"column":0},"generated":{"line":4608,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4609,"column":0},"generated":{"line":4609,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4610,"column":0},"generated":{"line":4610,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4611,"column":0},"generated":{"line":4611,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4612,"column":0},"generated":{"line":4612,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4613,"column":0},"generated":{"line":4613,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4614,"column":0},"generated":{"line":4614,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4615,"column":0},"generated":{"line":4615,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4616,"column":0},"generated":{"line":4616,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4617,"column":0},"generated":{"line":4617,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4618,"column":0},"generated":{"line":4618,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4619,"column":0},"generated":{"line":4619,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4620,"column":0},"generated":{"line":4620,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4621,"column":0},"generated":{"line":4621,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4622,"column":0},"generated":{"line":4622,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4623,"column":0},"generated":{"line":4623,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4624,"column":0},"generated":{"line":4624,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4625,"column":0},"generated":{"line":4625,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4626,"column":0},"generated":{"line":4626,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4627,"column":0},"generated":{"line":4627,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4628,"column":0},"generated":{"line":4628,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4629,"column":0},"generated":{"line":4629,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4630,"column":0},"generated":{"line":4630,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4631,"column":0},"generated":{"line":4631,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4632,"column":0},"generated":{"line":4632,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4633,"column":0},"generated":{"line":4633,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4634,"column":0},"generated":{"line":4634,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4635,"column":0},"generated":{"line":4635,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4636,"column":0},"generated":{"line":4636,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4637,"column":0},"generated":{"line":4637,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4638,"column":0},"generated":{"line":4638,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4639,"column":0},"generated":{"line":4639,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4640,"column":0},"generated":{"line":4640,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4641,"column":0},"generated":{"line":4641,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4642,"column":0},"generated":{"line":4642,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4643,"column":0},"generated":{"line":4643,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4644,"column":0},"generated":{"line":4644,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4645,"column":0},"generated":{"line":4645,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4646,"column":0},"generated":{"line":4646,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4647,"column":0},"generated":{"line":4647,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4648,"column":0},"generated":{"line":4648,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4649,"column":0},"generated":{"line":4649,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4650,"column":0},"generated":{"line":4650,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4651,"column":0},"generated":{"line":4651,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4652,"column":0},"generated":{"line":4652,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4653,"column":0},"generated":{"line":4653,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4654,"column":0},"generated":{"line":4654,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4655,"column":0},"generated":{"line":4655,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4656,"column":0},"generated":{"line":4656,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4657,"column":0},"generated":{"line":4657,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4658,"column":0},"generated":{"line":4658,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4659,"column":0},"generated":{"line":4659,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4660,"column":0},"generated":{"line":4660,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4661,"column":0},"generated":{"line":4661,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4662,"column":0},"generated":{"line":4662,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4663,"column":0},"generated":{"line":4663,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4664,"column":0},"generated":{"line":4664,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4665,"column":0},"generated":{"line":4665,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4666,"column":0},"generated":{"line":4666,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4667,"column":0},"generated":{"line":4667,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4668,"column":0},"generated":{"line":4668,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4669,"column":0},"generated":{"line":4669,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4670,"column":0},"generated":{"line":4670,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4671,"column":0},"generated":{"line":4671,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4672,"column":0},"generated":{"line":4672,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4673,"column":0},"generated":{"line":4673,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4674,"column":0},"generated":{"line":4674,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4675,"column":0},"generated":{"line":4675,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4676,"column":0},"generated":{"line":4676,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4677,"column":0},"generated":{"line":4677,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4678,"column":0},"generated":{"line":4678,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4679,"column":0},"generated":{"line":4679,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4680,"column":0},"generated":{"line":4680,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4681,"column":0},"generated":{"line":4681,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4682,"column":0},"generated":{"line":4682,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4683,"column":0},"generated":{"line":4683,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4684,"column":0},"generated":{"line":4684,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4685,"column":0},"generated":{"line":4685,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4686,"column":0},"generated":{"line":4686,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4687,"column":0},"generated":{"line":4687,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4688,"column":0},"generated":{"line":4688,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4689,"column":0},"generated":{"line":4689,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4690,"column":0},"generated":{"line":4690,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4691,"column":0},"generated":{"line":4691,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4692,"column":0},"generated":{"line":4692,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4693,"column":0},"generated":{"line":4693,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4694,"column":0},"generated":{"line":4694,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4695,"column":0},"generated":{"line":4695,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4696,"column":0},"generated":{"line":4696,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4697,"column":0},"generated":{"line":4697,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4698,"column":0},"generated":{"line":4698,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4699,"column":0},"generated":{"line":4699,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4700,"column":0},"generated":{"line":4700,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4701,"column":0},"generated":{"line":4701,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4702,"column":0},"generated":{"line":4702,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4703,"column":0},"generated":{"line":4703,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4704,"column":0},"generated":{"line":4704,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4705,"column":0},"generated":{"line":4705,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4706,"column":0},"generated":{"line":4706,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4707,"column":0},"generated":{"line":4707,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4708,"column":0},"generated":{"line":4708,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4709,"column":0},"generated":{"line":4709,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4710,"column":0},"generated":{"line":4710,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4711,"column":0},"generated":{"line":4711,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4712,"column":0},"generated":{"line":4712,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4713,"column":0},"generated":{"line":4713,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4714,"column":0},"generated":{"line":4714,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4715,"column":0},"generated":{"line":4715,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4716,"column":0},"generated":{"line":4716,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4717,"column":0},"generated":{"line":4717,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4718,"column":0},"generated":{"line":4718,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4719,"column":0},"generated":{"line":4719,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4720,"column":0},"generated":{"line":4720,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4721,"column":0},"generated":{"line":4721,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4722,"column":0},"generated":{"line":4722,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4723,"column":0},"generated":{"line":4723,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4724,"column":0},"generated":{"line":4724,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4725,"column":0},"generated":{"line":4725,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4726,"column":0},"generated":{"line":4726,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4727,"column":0},"generated":{"line":4727,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4728,"column":0},"generated":{"line":4728,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4729,"column":0},"generated":{"line":4729,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4730,"column":0},"generated":{"line":4730,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4731,"column":0},"generated":{"line":4731,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4732,"column":0},"generated":{"line":4732,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4733,"column":0},"generated":{"line":4733,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4734,"column":0},"generated":{"line":4734,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4735,"column":0},"generated":{"line":4735,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4736,"column":0},"generated":{"line":4736,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4737,"column":0},"generated":{"line":4737,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4738,"column":0},"generated":{"line":4738,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4739,"column":0},"generated":{"line":4739,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4740,"column":0},"generated":{"line":4740,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4741,"column":0},"generated":{"line":4741,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4742,"column":0},"generated":{"line":4742,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4743,"column":0},"generated":{"line":4743,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4744,"column":0},"generated":{"line":4744,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4745,"column":0},"generated":{"line":4745,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4746,"column":0},"generated":{"line":4746,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4747,"column":0},"generated":{"line":4747,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4748,"column":0},"generated":{"line":4748,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4749,"column":0},"generated":{"line":4749,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4750,"column":0},"generated":{"line":4750,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4751,"column":0},"generated":{"line":4751,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4752,"column":0},"generated":{"line":4752,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4753,"column":0},"generated":{"line":4753,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4754,"column":0},"generated":{"line":4754,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4755,"column":0},"generated":{"line":4755,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4756,"column":0},"generated":{"line":4756,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4757,"column":0},"generated":{"line":4757,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4758,"column":0},"generated":{"line":4758,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4759,"column":0},"generated":{"line":4759,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4760,"column":0},"generated":{"line":4760,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4761,"column":0},"generated":{"line":4761,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4762,"column":0},"generated":{"line":4762,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4763,"column":0},"generated":{"line":4763,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4764,"column":0},"generated":{"line":4764,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4765,"column":0},"generated":{"line":4765,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4766,"column":0},"generated":{"line":4766,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4767,"column":0},"generated":{"line":4767,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4768,"column":0},"generated":{"line":4768,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4769,"column":0},"generated":{"line":4769,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4770,"column":0},"generated":{"line":4770,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4771,"column":0},"generated":{"line":4771,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4772,"column":0},"generated":{"line":4772,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4773,"column":0},"generated":{"line":4773,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4774,"column":0},"generated":{"line":4774,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4775,"column":0},"generated":{"line":4775,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4776,"column":0},"generated":{"line":4776,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4777,"column":0},"generated":{"line":4777,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4778,"column":0},"generated":{"line":4778,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4779,"column":0},"generated":{"line":4779,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4780,"column":0},"generated":{"line":4780,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4781,"column":0},"generated":{"line":4781,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4782,"column":0},"generated":{"line":4782,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4783,"column":0},"generated":{"line":4783,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4784,"column":0},"generated":{"line":4784,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4785,"column":0},"generated":{"line":4785,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4786,"column":0},"generated":{"line":4786,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4787,"column":0},"generated":{"line":4787,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4788,"column":0},"generated":{"line":4788,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4789,"column":0},"generated":{"line":4789,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4790,"column":0},"generated":{"line":4790,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4791,"column":0},"generated":{"line":4791,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4792,"column":0},"generated":{"line":4792,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4793,"column":0},"generated":{"line":4793,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4794,"column":0},"generated":{"line":4794,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4795,"column":0},"generated":{"line":4795,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4796,"column":0},"generated":{"line":4796,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4797,"column":0},"generated":{"line":4797,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4798,"column":0},"generated":{"line":4798,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4799,"column":0},"generated":{"line":4799,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4800,"column":0},"generated":{"line":4800,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4801,"column":0},"generated":{"line":4801,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4802,"column":0},"generated":{"line":4802,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4803,"column":0},"generated":{"line":4803,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4804,"column":0},"generated":{"line":4804,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4805,"column":0},"generated":{"line":4805,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4806,"column":0},"generated":{"line":4806,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4807,"column":0},"generated":{"line":4807,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4808,"column":0},"generated":{"line":4808,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4809,"column":0},"generated":{"line":4809,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4810,"column":0},"generated":{"line":4810,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4811,"column":0},"generated":{"line":4811,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4812,"column":0},"generated":{"line":4812,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4813,"column":0},"generated":{"line":4813,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4814,"column":0},"generated":{"line":4814,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4815,"column":0},"generated":{"line":4815,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4816,"column":0},"generated":{"line":4816,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4817,"column":0},"generated":{"line":4817,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4818,"column":0},"generated":{"line":4818,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4819,"column":0},"generated":{"line":4819,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4820,"column":0},"generated":{"line":4820,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4821,"column":0},"generated":{"line":4821,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4822,"column":0},"generated":{"line":4822,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4823,"column":0},"generated":{"line":4823,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4824,"column":0},"generated":{"line":4824,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4825,"column":0},"generated":{"line":4825,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4826,"column":0},"generated":{"line":4826,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4827,"column":0},"generated":{"line":4827,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4828,"column":0},"generated":{"line":4828,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4829,"column":0},"generated":{"line":4829,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4830,"column":0},"generated":{"line":4830,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4831,"column":0},"generated":{"line":4831,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4832,"column":0},"generated":{"line":4832,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4833,"column":0},"generated":{"line":4833,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4834,"column":0},"generated":{"line":4834,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4835,"column":0},"generated":{"line":4835,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4836,"column":0},"generated":{"line":4836,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4837,"column":0},"generated":{"line":4837,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4838,"column":0},"generated":{"line":4838,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4839,"column":0},"generated":{"line":4839,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4840,"column":0},"generated":{"line":4840,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4841,"column":0},"generated":{"line":4841,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4842,"column":0},"generated":{"line":4842,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4843,"column":0},"generated":{"line":4843,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4844,"column":0},"generated":{"line":4844,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4845,"column":0},"generated":{"line":4845,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4846,"column":0},"generated":{"line":4846,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4847,"column":0},"generated":{"line":4847,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4848,"column":0},"generated":{"line":4848,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4849,"column":0},"generated":{"line":4849,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4850,"column":0},"generated":{"line":4850,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4851,"column":0},"generated":{"line":4851,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4852,"column":0},"generated":{"line":4852,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4853,"column":0},"generated":{"line":4853,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4854,"column":0},"generated":{"line":4854,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4855,"column":0},"generated":{"line":4855,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4856,"column":0},"generated":{"line":4856,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4857,"column":0},"generated":{"line":4857,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4858,"column":0},"generated":{"line":4858,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4859,"column":0},"generated":{"line":4859,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4860,"column":0},"generated":{"line":4860,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4861,"column":0},"generated":{"line":4861,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4862,"column":0},"generated":{"line":4862,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4863,"column":0},"generated":{"line":4863,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4864,"column":0},"generated":{"line":4864,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4865,"column":0},"generated":{"line":4865,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4866,"column":0},"generated":{"line":4866,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4867,"column":0},"generated":{"line":4867,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4868,"column":0},"generated":{"line":4868,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4869,"column":0},"generated":{"line":4869,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4870,"column":0},"generated":{"line":4870,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4871,"column":0},"generated":{"line":4871,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4872,"column":0},"generated":{"line":4872,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4873,"column":0},"generated":{"line":4873,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4874,"column":0},"generated":{"line":4874,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4875,"column":0},"generated":{"line":4875,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4876,"column":0},"generated":{"line":4876,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4877,"column":0},"generated":{"line":4877,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4878,"column":0},"generated":{"line":4878,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4879,"column":0},"generated":{"line":4879,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4880,"column":0},"generated":{"line":4880,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4881,"column":0},"generated":{"line":4881,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4882,"column":0},"generated":{"line":4882,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4883,"column":0},"generated":{"line":4883,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4884,"column":0},"generated":{"line":4884,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4885,"column":0},"generated":{"line":4885,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4886,"column":0},"generated":{"line":4886,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4887,"column":0},"generated":{"line":4887,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4888,"column":0},"generated":{"line":4888,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4889,"column":0},"generated":{"line":4889,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4890,"column":0},"generated":{"line":4890,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4891,"column":0},"generated":{"line":4891,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4892,"column":0},"generated":{"line":4892,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4893,"column":0},"generated":{"line":4893,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4894,"column":0},"generated":{"line":4894,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4895,"column":0},"generated":{"line":4895,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4896,"column":0},"generated":{"line":4896,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4897,"column":0},"generated":{"line":4897,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4898,"column":0},"generated":{"line":4898,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4899,"column":0},"generated":{"line":4899,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4900,"column":0},"generated":{"line":4900,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4901,"column":0},"generated":{"line":4901,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4902,"column":0},"generated":{"line":4902,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4903,"column":0},"generated":{"line":4903,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4904,"column":0},"generated":{"line":4904,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4905,"column":0},"generated":{"line":4905,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4906,"column":0},"generated":{"line":4906,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4907,"column":0},"generated":{"line":4907,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4908,"column":0},"generated":{"line":4908,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4909,"column":0},"generated":{"line":4909,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4910,"column":0},"generated":{"line":4910,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4911,"column":0},"generated":{"line":4911,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4912,"column":0},"generated":{"line":4912,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4913,"column":0},"generated":{"line":4913,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4914,"column":0},"generated":{"line":4914,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4915,"column":0},"generated":{"line":4915,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4916,"column":0},"generated":{"line":4916,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4917,"column":0},"generated":{"line":4917,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4918,"column":0},"generated":{"line":4918,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4919,"column":0},"generated":{"line":4919,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4920,"column":0},"generated":{"line":4920,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4921,"column":0},"generated":{"line":4921,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4922,"column":0},"generated":{"line":4922,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4923,"column":0},"generated":{"line":4923,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4924,"column":0},"generated":{"line":4924,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4925,"column":0},"generated":{"line":4925,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4926,"column":0},"generated":{"line":4926,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4927,"column":0},"generated":{"line":4927,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4928,"column":0},"generated":{"line":4928,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4929,"column":0},"generated":{"line":4929,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4930,"column":0},"generated":{"line":4930,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4931,"column":0},"generated":{"line":4931,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4932,"column":0},"generated":{"line":4932,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4933,"column":0},"generated":{"line":4933,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4934,"column":0},"generated":{"line":4934,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4935,"column":0},"generated":{"line":4935,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4936,"column":0},"generated":{"line":4936,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4937,"column":0},"generated":{"line":4937,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4938,"column":0},"generated":{"line":4938,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4939,"column":0},"generated":{"line":4939,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4940,"column":0},"generated":{"line":4940,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4941,"column":0},"generated":{"line":4941,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4942,"column":0},"generated":{"line":4942,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4943,"column":0},"generated":{"line":4943,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4944,"column":0},"generated":{"line":4944,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4945,"column":0},"generated":{"line":4945,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4946,"column":0},"generated":{"line":4946,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4947,"column":0},"generated":{"line":4947,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4948,"column":0},"generated":{"line":4948,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4949,"column":0},"generated":{"line":4949,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4950,"column":0},"generated":{"line":4950,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4951,"column":0},"generated":{"line":4951,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4952,"column":0},"generated":{"line":4952,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4953,"column":0},"generated":{"line":4953,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4954,"column":0},"generated":{"line":4954,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4955,"column":0},"generated":{"line":4955,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4956,"column":0},"generated":{"line":4956,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4957,"column":0},"generated":{"line":4957,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4958,"column":0},"generated":{"line":4958,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4959,"column":0},"generated":{"line":4959,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4960,"column":0},"generated":{"line":4960,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4961,"column":0},"generated":{"line":4961,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4962,"column":0},"generated":{"line":4962,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4963,"column":0},"generated":{"line":4963,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4964,"column":0},"generated":{"line":4964,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4965,"column":0},"generated":{"line":4965,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4966,"column":0},"generated":{"line":4966,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4967,"column":0},"generated":{"line":4967,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4968,"column":0},"generated":{"line":4968,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4969,"column":0},"generated":{"line":4969,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4970,"column":0},"generated":{"line":4970,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4971,"column":0},"generated":{"line":4971,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4972,"column":0},"generated":{"line":4972,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4973,"column":0},"generated":{"line":4973,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4974,"column":0},"generated":{"line":4974,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4975,"column":0},"generated":{"line":4975,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4976,"column":0},"generated":{"line":4976,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4977,"column":0},"generated":{"line":4977,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4978,"column":0},"generated":{"line":4978,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4979,"column":0},"generated":{"line":4979,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4980,"column":0},"generated":{"line":4980,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4981,"column":0},"generated":{"line":4981,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4982,"column":0},"generated":{"line":4982,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4983,"column":0},"generated":{"line":4983,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4984,"column":0},"generated":{"line":4984,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4985,"column":0},"generated":{"line":4985,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4986,"column":0},"generated":{"line":4986,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4987,"column":0},"generated":{"line":4987,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4988,"column":0},"generated":{"line":4988,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4989,"column":0},"generated":{"line":4989,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4990,"column":0},"generated":{"line":4990,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4991,"column":0},"generated":{"line":4991,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4992,"column":0},"generated":{"line":4992,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4993,"column":0},"generated":{"line":4993,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4994,"column":0},"generated":{"line":4994,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4995,"column":0},"generated":{"line":4995,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4996,"column":0},"generated":{"line":4996,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4997,"column":0},"generated":{"line":4997,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4998,"column":0},"generated":{"line":4998,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":4999,"column":0},"generated":{"line":4999,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5000,"column":0},"generated":{"line":5000,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5001,"column":0},"generated":{"line":5001,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5002,"column":0},"generated":{"line":5002,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5003,"column":0},"generated":{"line":5003,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5004,"column":0},"generated":{"line":5004,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5005,"column":0},"generated":{"line":5005,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5006,"column":0},"generated":{"line":5006,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5007,"column":0},"generated":{"line":5007,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5008,"column":0},"generated":{"line":5008,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5009,"column":0},"generated":{"line":5009,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5010,"column":0},"generated":{"line":5010,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5011,"column":0},"generated":{"line":5011,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5012,"column":0},"generated":{"line":5012,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5013,"column":0},"generated":{"line":5013,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5014,"column":0},"generated":{"line":5014,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5015,"column":0},"generated":{"line":5015,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5016,"column":0},"generated":{"line":5016,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5017,"column":0},"generated":{"line":5017,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5018,"column":0},"generated":{"line":5018,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5019,"column":0},"generated":{"line":5019,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5020,"column":0},"generated":{"line":5020,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5021,"column":0},"generated":{"line":5021,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5022,"column":0},"generated":{"line":5022,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5023,"column":0},"generated":{"line":5023,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5024,"column":0},"generated":{"line":5024,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5025,"column":0},"generated":{"line":5025,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5026,"column":0},"generated":{"line":5026,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5027,"column":0},"generated":{"line":5027,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5028,"column":0},"generated":{"line":5028,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5029,"column":0},"generated":{"line":5029,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5030,"column":0},"generated":{"line":5030,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5031,"column":0},"generated":{"line":5031,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5032,"column":0},"generated":{"line":5032,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5033,"column":0},"generated":{"line":5033,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5034,"column":0},"generated":{"line":5034,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5035,"column":0},"generated":{"line":5035,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5036,"column":0},"generated":{"line":5036,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5037,"column":0},"generated":{"line":5037,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5038,"column":0},"generated":{"line":5038,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5039,"column":0},"generated":{"line":5039,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5040,"column":0},"generated":{"line":5040,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5041,"column":0},"generated":{"line":5041,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5042,"column":0},"generated":{"line":5042,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5043,"column":0},"generated":{"line":5043,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5044,"column":0},"generated":{"line":5044,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5045,"column":0},"generated":{"line":5045,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5046,"column":0},"generated":{"line":5046,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5047,"column":0},"generated":{"line":5047,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5048,"column":0},"generated":{"line":5048,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5049,"column":0},"generated":{"line":5049,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5050,"column":0},"generated":{"line":5050,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5051,"column":0},"generated":{"line":5051,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5052,"column":0},"generated":{"line":5052,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5053,"column":0},"generated":{"line":5053,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5054,"column":0},"generated":{"line":5054,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5055,"column":0},"generated":{"line":5055,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5056,"column":0},"generated":{"line":5056,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5057,"column":0},"generated":{"line":5057,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5058,"column":0},"generated":{"line":5058,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5059,"column":0},"generated":{"line":5059,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5060,"column":0},"generated":{"line":5060,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5061,"column":0},"generated":{"line":5061,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5062,"column":0},"generated":{"line":5062,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5063,"column":0},"generated":{"line":5063,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5064,"column":0},"generated":{"line":5064,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5065,"column":0},"generated":{"line":5065,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5066,"column":0},"generated":{"line":5066,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5067,"column":0},"generated":{"line":5067,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5068,"column":0},"generated":{"line":5068,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5069,"column":0},"generated":{"line":5069,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5070,"column":0},"generated":{"line":5070,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5071,"column":0},"generated":{"line":5071,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5072,"column":0},"generated":{"line":5072,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5073,"column":0},"generated":{"line":5073,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5074,"column":0},"generated":{"line":5074,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5075,"column":0},"generated":{"line":5075,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5076,"column":0},"generated":{"line":5076,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5077,"column":0},"generated":{"line":5077,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5078,"column":0},"generated":{"line":5078,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5079,"column":0},"generated":{"line":5079,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5080,"column":0},"generated":{"line":5080,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5081,"column":0},"generated":{"line":5081,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5082,"column":0},"generated":{"line":5082,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5083,"column":0},"generated":{"line":5083,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5084,"column":0},"generated":{"line":5084,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5085,"column":0},"generated":{"line":5085,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5086,"column":0},"generated":{"line":5086,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5087,"column":0},"generated":{"line":5087,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5088,"column":0},"generated":{"line":5088,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5089,"column":0},"generated":{"line":5089,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5090,"column":0},"generated":{"line":5090,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5091,"column":0},"generated":{"line":5091,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5092,"column":0},"generated":{"line":5092,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5093,"column":0},"generated":{"line":5093,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5094,"column":0},"generated":{"line":5094,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5095,"column":0},"generated":{"line":5095,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5096,"column":0},"generated":{"line":5096,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5097,"column":0},"generated":{"line":5097,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5098,"column":0},"generated":{"line":5098,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5099,"column":0},"generated":{"line":5099,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5100,"column":0},"generated":{"line":5100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5101,"column":0},"generated":{"line":5101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5102,"column":0},"generated":{"line":5102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5103,"column":0},"generated":{"line":5103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5104,"column":0},"generated":{"line":5104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5105,"column":0},"generated":{"line":5105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5106,"column":0},"generated":{"line":5106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5107,"column":0},"generated":{"line":5107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5108,"column":0},"generated":{"line":5108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5109,"column":0},"generated":{"line":5109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5110,"column":0},"generated":{"line":5110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5111,"column":0},"generated":{"line":5111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5112,"column":0},"generated":{"line":5112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5113,"column":0},"generated":{"line":5113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5114,"column":0},"generated":{"line":5114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5115,"column":0},"generated":{"line":5115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5116,"column":0},"generated":{"line":5116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5117,"column":0},"generated":{"line":5117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5118,"column":0},"generated":{"line":5118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5119,"column":0},"generated":{"line":5119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5120,"column":0},"generated":{"line":5120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5121,"column":0},"generated":{"line":5121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5122,"column":0},"generated":{"line":5122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5123,"column":0},"generated":{"line":5123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5124,"column":0},"generated":{"line":5124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5125,"column":0},"generated":{"line":5125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5126,"column":0},"generated":{"line":5126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5127,"column":0},"generated":{"line":5127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5128,"column":0},"generated":{"line":5128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5129,"column":0},"generated":{"line":5129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5130,"column":0},"generated":{"line":5130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5131,"column":0},"generated":{"line":5131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5132,"column":0},"generated":{"line":5132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5133,"column":0},"generated":{"line":5133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5134,"column":0},"generated":{"line":5134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5135,"column":0},"generated":{"line":5135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5136,"column":0},"generated":{"line":5136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5137,"column":0},"generated":{"line":5137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5138,"column":0},"generated":{"line":5138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5139,"column":0},"generated":{"line":5139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5140,"column":0},"generated":{"line":5140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5141,"column":0},"generated":{"line":5141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5142,"column":0},"generated":{"line":5142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5143,"column":0},"generated":{"line":5143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5144,"column":0},"generated":{"line":5144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5145,"column":0},"generated":{"line":5145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5146,"column":0},"generated":{"line":5146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5147,"column":0},"generated":{"line":5147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5148,"column":0},"generated":{"line":5148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5149,"column":0},"generated":{"line":5149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5150,"column":0},"generated":{"line":5150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5151,"column":0},"generated":{"line":5151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5152,"column":0},"generated":{"line":5152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5153,"column":0},"generated":{"line":5153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5154,"column":0},"generated":{"line":5154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5155,"column":0},"generated":{"line":5155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5156,"column":0},"generated":{"line":5156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5157,"column":0},"generated":{"line":5157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5158,"column":0},"generated":{"line":5158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5159,"column":0},"generated":{"line":5159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5160,"column":0},"generated":{"line":5160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5161,"column":0},"generated":{"line":5161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5162,"column":0},"generated":{"line":5162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5163,"column":0},"generated":{"line":5163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5164,"column":0},"generated":{"line":5164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5165,"column":0},"generated":{"line":5165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5166,"column":0},"generated":{"line":5166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5167,"column":0},"generated":{"line":5167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5168,"column":0},"generated":{"line":5168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5169,"column":0},"generated":{"line":5169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5170,"column":0},"generated":{"line":5170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5171,"column":0},"generated":{"line":5171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5172,"column":0},"generated":{"line":5172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5173,"column":0},"generated":{"line":5173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5174,"column":0},"generated":{"line":5174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5175,"column":0},"generated":{"line":5175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5176,"column":0},"generated":{"line":5176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5177,"column":0},"generated":{"line":5177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5178,"column":0},"generated":{"line":5178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5179,"column":0},"generated":{"line":5179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5180,"column":0},"generated":{"line":5180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5181,"column":0},"generated":{"line":5181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5182,"column":0},"generated":{"line":5182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5183,"column":0},"generated":{"line":5183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5184,"column":0},"generated":{"line":5184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5185,"column":0},"generated":{"line":5185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5186,"column":0},"generated":{"line":5186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5187,"column":0},"generated":{"line":5187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5188,"column":0},"generated":{"line":5188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5189,"column":0},"generated":{"line":5189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5190,"column":0},"generated":{"line":5190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5191,"column":0},"generated":{"line":5191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5192,"column":0},"generated":{"line":5192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5193,"column":0},"generated":{"line":5193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5194,"column":0},"generated":{"line":5194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5195,"column":0},"generated":{"line":5195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5196,"column":0},"generated":{"line":5196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5197,"column":0},"generated":{"line":5197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5198,"column":0},"generated":{"line":5198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5199,"column":0},"generated":{"line":5199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5200,"column":0},"generated":{"line":5200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5201,"column":0},"generated":{"line":5201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5202,"column":0},"generated":{"line":5202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5203,"column":0},"generated":{"line":5203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5204,"column":0},"generated":{"line":5204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5205,"column":0},"generated":{"line":5205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5206,"column":0},"generated":{"line":5206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5207,"column":0},"generated":{"line":5207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5208,"column":0},"generated":{"line":5208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5209,"column":0},"generated":{"line":5209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5210,"column":0},"generated":{"line":5210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5211,"column":0},"generated":{"line":5211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5212,"column":0},"generated":{"line":5212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5213,"column":0},"generated":{"line":5213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5214,"column":0},"generated":{"line":5214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5215,"column":0},"generated":{"line":5215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5216,"column":0},"generated":{"line":5216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5217,"column":0},"generated":{"line":5217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5218,"column":0},"generated":{"line":5218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5219,"column":0},"generated":{"line":5219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5220,"column":0},"generated":{"line":5220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5221,"column":0},"generated":{"line":5221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5222,"column":0},"generated":{"line":5222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5223,"column":0},"generated":{"line":5223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5224,"column":0},"generated":{"line":5224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5225,"column":0},"generated":{"line":5225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5226,"column":0},"generated":{"line":5226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5227,"column":0},"generated":{"line":5227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5228,"column":0},"generated":{"line":5228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5229,"column":0},"generated":{"line":5229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5230,"column":0},"generated":{"line":5230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5231,"column":0},"generated":{"line":5231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5232,"column":0},"generated":{"line":5232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5233,"column":0},"generated":{"line":5233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5234,"column":0},"generated":{"line":5234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5235,"column":0},"generated":{"line":5235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5236,"column":0},"generated":{"line":5236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5237,"column":0},"generated":{"line":5237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5238,"column":0},"generated":{"line":5238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5239,"column":0},"generated":{"line":5239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5240,"column":0},"generated":{"line":5240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5241,"column":0},"generated":{"line":5241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5242,"column":0},"generated":{"line":5242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5243,"column":0},"generated":{"line":5243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5244,"column":0},"generated":{"line":5244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5245,"column":0},"generated":{"line":5245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5246,"column":0},"generated":{"line":5246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5247,"column":0},"generated":{"line":5247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5248,"column":0},"generated":{"line":5248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5249,"column":0},"generated":{"line":5249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5250,"column":0},"generated":{"line":5250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5251,"column":0},"generated":{"line":5251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5252,"column":0},"generated":{"line":5252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5253,"column":0},"generated":{"line":5253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5254,"column":0},"generated":{"line":5254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5255,"column":0},"generated":{"line":5255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5256,"column":0},"generated":{"line":5256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5257,"column":0},"generated":{"line":5257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5258,"column":0},"generated":{"line":5258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5259,"column":0},"generated":{"line":5259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5260,"column":0},"generated":{"line":5260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5261,"column":0},"generated":{"line":5261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5262,"column":0},"generated":{"line":5262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5263,"column":0},"generated":{"line":5263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5264,"column":0},"generated":{"line":5264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5265,"column":0},"generated":{"line":5265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5266,"column":0},"generated":{"line":5266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5267,"column":0},"generated":{"line":5267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5268,"column":0},"generated":{"line":5268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5269,"column":0},"generated":{"line":5269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5270,"column":0},"generated":{"line":5270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5271,"column":0},"generated":{"line":5271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5272,"column":0},"generated":{"line":5272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5273,"column":0},"generated":{"line":5273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5274,"column":0},"generated":{"line":5274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5275,"column":0},"generated":{"line":5275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5276,"column":0},"generated":{"line":5276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5277,"column":0},"generated":{"line":5277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5278,"column":0},"generated":{"line":5278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5279,"column":0},"generated":{"line":5279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5280,"column":0},"generated":{"line":5280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5281,"column":0},"generated":{"line":5281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5282,"column":0},"generated":{"line":5282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5283,"column":0},"generated":{"line":5283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5284,"column":0},"generated":{"line":5284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5285,"column":0},"generated":{"line":5285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5286,"column":0},"generated":{"line":5286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5287,"column":0},"generated":{"line":5287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5288,"column":0},"generated":{"line":5288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5289,"column":0},"generated":{"line":5289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5290,"column":0},"generated":{"line":5290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5291,"column":0},"generated":{"line":5291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5292,"column":0},"generated":{"line":5292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5293,"column":0},"generated":{"line":5293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5294,"column":0},"generated":{"line":5294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5295,"column":0},"generated":{"line":5295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5296,"column":0},"generated":{"line":5296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5297,"column":0},"generated":{"line":5297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5298,"column":0},"generated":{"line":5298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5299,"column":0},"generated":{"line":5299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5300,"column":0},"generated":{"line":5300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5301,"column":0},"generated":{"line":5301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5302,"column":0},"generated":{"line":5302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5303,"column":0},"generated":{"line":5303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5304,"column":0},"generated":{"line":5304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5305,"column":0},"generated":{"line":5305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5306,"column":0},"generated":{"line":5306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5307,"column":0},"generated":{"line":5307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5308,"column":0},"generated":{"line":5308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5309,"column":0},"generated":{"line":5309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5310,"column":0},"generated":{"line":5310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5311,"column":0},"generated":{"line":5311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5312,"column":0},"generated":{"line":5312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5313,"column":0},"generated":{"line":5313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5314,"column":0},"generated":{"line":5314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5315,"column":0},"generated":{"line":5315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5316,"column":0},"generated":{"line":5316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5317,"column":0},"generated":{"line":5317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5318,"column":0},"generated":{"line":5318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5319,"column":0},"generated":{"line":5319,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5320,"column":0},"generated":{"line":5320,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5321,"column":0},"generated":{"line":5321,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5322,"column":0},"generated":{"line":5322,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5323,"column":0},"generated":{"line":5323,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5324,"column":0},"generated":{"line":5324,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5325,"column":0},"generated":{"line":5325,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5326,"column":0},"generated":{"line":5326,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5327,"column":0},"generated":{"line":5327,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5328,"column":0},"generated":{"line":5328,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5329,"column":0},"generated":{"line":5329,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5330,"column":0},"generated":{"line":5330,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5331,"column":0},"generated":{"line":5331,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5332,"column":0},"generated":{"line":5332,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5333,"column":0},"generated":{"line":5333,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5334,"column":0},"generated":{"line":5334,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5335,"column":0},"generated":{"line":5335,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5336,"column":0},"generated":{"line":5336,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5337,"column":0},"generated":{"line":5337,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5338,"column":0},"generated":{"line":5338,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5339,"column":0},"generated":{"line":5339,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5340,"column":0},"generated":{"line":5340,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5341,"column":0},"generated":{"line":5341,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5342,"column":0},"generated":{"line":5342,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5343,"column":0},"generated":{"line":5343,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5344,"column":0},"generated":{"line":5344,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5345,"column":0},"generated":{"line":5345,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5346,"column":0},"generated":{"line":5346,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5347,"column":0},"generated":{"line":5347,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5348,"column":0},"generated":{"line":5348,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5349,"column":0},"generated":{"line":5349,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5350,"column":0},"generated":{"line":5350,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5351,"column":0},"generated":{"line":5351,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5352,"column":0},"generated":{"line":5352,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5353,"column":0},"generated":{"line":5353,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5354,"column":0},"generated":{"line":5354,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5355,"column":0},"generated":{"line":5355,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5356,"column":0},"generated":{"line":5356,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5357,"column":0},"generated":{"line":5357,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5358,"column":0},"generated":{"line":5358,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5359,"column":0},"generated":{"line":5359,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5360,"column":0},"generated":{"line":5360,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5361,"column":0},"generated":{"line":5361,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5362,"column":0},"generated":{"line":5362,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5363,"column":0},"generated":{"line":5363,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5364,"column":0},"generated":{"line":5364,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5365,"column":0},"generated":{"line":5365,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5366,"column":0},"generated":{"line":5366,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5367,"column":0},"generated":{"line":5367,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5368,"column":0},"generated":{"line":5368,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5369,"column":0},"generated":{"line":5369,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5370,"column":0},"generated":{"line":5370,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5371,"column":0},"generated":{"line":5371,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5372,"column":0},"generated":{"line":5372,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5373,"column":0},"generated":{"line":5373,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5374,"column":0},"generated":{"line":5374,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5375,"column":0},"generated":{"line":5375,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5376,"column":0},"generated":{"line":5376,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5377,"column":0},"generated":{"line":5377,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5378,"column":0},"generated":{"line":5378,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5379,"column":0},"generated":{"line":5379,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5380,"column":0},"generated":{"line":5380,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5381,"column":0},"generated":{"line":5381,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5382,"column":0},"generated":{"line":5382,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5383,"column":0},"generated":{"line":5383,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5384,"column":0},"generated":{"line":5384,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5385,"column":0},"generated":{"line":5385,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5386,"column":0},"generated":{"line":5386,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5387,"column":0},"generated":{"line":5387,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5388,"column":0},"generated":{"line":5388,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5389,"column":0},"generated":{"line":5389,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5390,"column":0},"generated":{"line":5390,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5391,"column":0},"generated":{"line":5391,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5392,"column":0},"generated":{"line":5392,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5393,"column":0},"generated":{"line":5393,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5394,"column":0},"generated":{"line":5394,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5395,"column":0},"generated":{"line":5395,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5396,"column":0},"generated":{"line":5396,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5397,"column":0},"generated":{"line":5397,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5398,"column":0},"generated":{"line":5398,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5399,"column":0},"generated":{"line":5399,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5400,"column":0},"generated":{"line":5400,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5401,"column":0},"generated":{"line":5401,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5402,"column":0},"generated":{"line":5402,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5403,"column":0},"generated":{"line":5403,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5404,"column":0},"generated":{"line":5404,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5405,"column":0},"generated":{"line":5405,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5406,"column":0},"generated":{"line":5406,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5407,"column":0},"generated":{"line":5407,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5408,"column":0},"generated":{"line":5408,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5409,"column":0},"generated":{"line":5409,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5410,"column":0},"generated":{"line":5410,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5411,"column":0},"generated":{"line":5411,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5412,"column":0},"generated":{"line":5412,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5413,"column":0},"generated":{"line":5413,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5414,"column":0},"generated":{"line":5414,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5415,"column":0},"generated":{"line":5415,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5416,"column":0},"generated":{"line":5416,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5417,"column":0},"generated":{"line":5417,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5418,"column":0},"generated":{"line":5418,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5419,"column":0},"generated":{"line":5419,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5420,"column":0},"generated":{"line":5420,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5421,"column":0},"generated":{"line":5421,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5422,"column":0},"generated":{"line":5422,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5423,"column":0},"generated":{"line":5423,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5424,"column":0},"generated":{"line":5424,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5425,"column":0},"generated":{"line":5425,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5426,"column":0},"generated":{"line":5426,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5427,"column":0},"generated":{"line":5427,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5428,"column":0},"generated":{"line":5428,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5429,"column":0},"generated":{"line":5429,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5430,"column":0},"generated":{"line":5430,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5431,"column":0},"generated":{"line":5431,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5432,"column":0},"generated":{"line":5432,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5433,"column":0},"generated":{"line":5433,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5434,"column":0},"generated":{"line":5434,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5435,"column":0},"generated":{"line":5435,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5436,"column":0},"generated":{"line":5436,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5437,"column":0},"generated":{"line":5437,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5438,"column":0},"generated":{"line":5438,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5439,"column":0},"generated":{"line":5439,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5440,"column":0},"generated":{"line":5440,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5441,"column":0},"generated":{"line":5441,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5442,"column":0},"generated":{"line":5442,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5443,"column":0},"generated":{"line":5443,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5444,"column":0},"generated":{"line":5444,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5445,"column":0},"generated":{"line":5445,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5446,"column":0},"generated":{"line":5446,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5447,"column":0},"generated":{"line":5447,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5448,"column":0},"generated":{"line":5448,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5449,"column":0},"generated":{"line":5449,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5450,"column":0},"generated":{"line":5450,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5451,"column":0},"generated":{"line":5451,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5452,"column":0},"generated":{"line":5452,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5453,"column":0},"generated":{"line":5453,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5454,"column":0},"generated":{"line":5454,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5455,"column":0},"generated":{"line":5455,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5456,"column":0},"generated":{"line":5456,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5457,"column":0},"generated":{"line":5457,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5458,"column":0},"generated":{"line":5458,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5459,"column":0},"generated":{"line":5459,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5460,"column":0},"generated":{"line":5460,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5461,"column":0},"generated":{"line":5461,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5462,"column":0},"generated":{"line":5462,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5463,"column":0},"generated":{"line":5463,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5464,"column":0},"generated":{"line":5464,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5465,"column":0},"generated":{"line":5465,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5466,"column":0},"generated":{"line":5466,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5467,"column":0},"generated":{"line":5467,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5468,"column":0},"generated":{"line":5468,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5469,"column":0},"generated":{"line":5469,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5470,"column":0},"generated":{"line":5470,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5471,"column":0},"generated":{"line":5471,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5472,"column":0},"generated":{"line":5472,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5473,"column":0},"generated":{"line":5473,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5474,"column":0},"generated":{"line":5474,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5475,"column":0},"generated":{"line":5475,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5476,"column":0},"generated":{"line":5476,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5477,"column":0},"generated":{"line":5477,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5478,"column":0},"generated":{"line":5478,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5479,"column":0},"generated":{"line":5479,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5480,"column":0},"generated":{"line":5480,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5481,"column":0},"generated":{"line":5481,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5482,"column":0},"generated":{"line":5482,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5483,"column":0},"generated":{"line":5483,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5484,"column":0},"generated":{"line":5484,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5485,"column":0},"generated":{"line":5485,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5486,"column":0},"generated":{"line":5486,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5487,"column":0},"generated":{"line":5487,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5488,"column":0},"generated":{"line":5488,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5489,"column":0},"generated":{"line":5489,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5490,"column":0},"generated":{"line":5490,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5491,"column":0},"generated":{"line":5491,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5492,"column":0},"generated":{"line":5492,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5493,"column":0},"generated":{"line":5493,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5494,"column":0},"generated":{"line":5494,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5495,"column":0},"generated":{"line":5495,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5496,"column":0},"generated":{"line":5496,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5497,"column":0},"generated":{"line":5497,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5498,"column":0},"generated":{"line":5498,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5499,"column":0},"generated":{"line":5499,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5500,"column":0},"generated":{"line":5500,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5501,"column":0},"generated":{"line":5501,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5502,"column":0},"generated":{"line":5502,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5503,"column":0},"generated":{"line":5503,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5504,"column":0},"generated":{"line":5504,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5505,"column":0},"generated":{"line":5505,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5506,"column":0},"generated":{"line":5506,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5507,"column":0},"generated":{"line":5507,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5508,"column":0},"generated":{"line":5508,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5509,"column":0},"generated":{"line":5509,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5510,"column":0},"generated":{"line":5510,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5511,"column":0},"generated":{"line":5511,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5512,"column":0},"generated":{"line":5512,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5513,"column":0},"generated":{"line":5513,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5514,"column":0},"generated":{"line":5514,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5515,"column":0},"generated":{"line":5515,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5516,"column":0},"generated":{"line":5516,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5517,"column":0},"generated":{"line":5517,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5518,"column":0},"generated":{"line":5518,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5519,"column":0},"generated":{"line":5519,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5520,"column":0},"generated":{"line":5520,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5521,"column":0},"generated":{"line":5521,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5522,"column":0},"generated":{"line":5522,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5523,"column":0},"generated":{"line":5523,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5524,"column":0},"generated":{"line":5524,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5525,"column":0},"generated":{"line":5525,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5526,"column":0},"generated":{"line":5526,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5527,"column":0},"generated":{"line":5527,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5528,"column":0},"generated":{"line":5528,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5529,"column":0},"generated":{"line":5529,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5530,"column":0},"generated":{"line":5530,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5531,"column":0},"generated":{"line":5531,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5532,"column":0},"generated":{"line":5532,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5533,"column":0},"generated":{"line":5533,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5534,"column":0},"generated":{"line":5534,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5535,"column":0},"generated":{"line":5535,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5536,"column":0},"generated":{"line":5536,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5537,"column":0},"generated":{"line":5537,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5538,"column":0},"generated":{"line":5538,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5539,"column":0},"generated":{"line":5539,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5540,"column":0},"generated":{"line":5540,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5541,"column":0},"generated":{"line":5541,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5542,"column":0},"generated":{"line":5542,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5543,"column":0},"generated":{"line":5543,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5544,"column":0},"generated":{"line":5544,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5545,"column":0},"generated":{"line":5545,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5546,"column":0},"generated":{"line":5546,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5547,"column":0},"generated":{"line":5547,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5548,"column":0},"generated":{"line":5548,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5549,"column":0},"generated":{"line":5549,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5550,"column":0},"generated":{"line":5550,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5551,"column":0},"generated":{"line":5551,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5552,"column":0},"generated":{"line":5552,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5553,"column":0},"generated":{"line":5553,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5554,"column":0},"generated":{"line":5554,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5555,"column":0},"generated":{"line":5555,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5556,"column":0},"generated":{"line":5556,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5557,"column":0},"generated":{"line":5557,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5558,"column":0},"generated":{"line":5558,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5559,"column":0},"generated":{"line":5559,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5560,"column":0},"generated":{"line":5560,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5561,"column":0},"generated":{"line":5561,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5562,"column":0},"generated":{"line":5562,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5563,"column":0},"generated":{"line":5563,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5564,"column":0},"generated":{"line":5564,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5565,"column":0},"generated":{"line":5565,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5566,"column":0},"generated":{"line":5566,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5567,"column":0},"generated":{"line":5567,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5568,"column":0},"generated":{"line":5568,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5569,"column":0},"generated":{"line":5569,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5570,"column":0},"generated":{"line":5570,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5571,"column":0},"generated":{"line":5571,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5572,"column":0},"generated":{"line":5572,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5573,"column":0},"generated":{"line":5573,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5574,"column":0},"generated":{"line":5574,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5575,"column":0},"generated":{"line":5575,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5576,"column":0},"generated":{"line":5576,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5577,"column":0},"generated":{"line":5577,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5578,"column":0},"generated":{"line":5578,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5579,"column":0},"generated":{"line":5579,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5580,"column":0},"generated":{"line":5580,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5581,"column":0},"generated":{"line":5581,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5582,"column":0},"generated":{"line":5582,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5583,"column":0},"generated":{"line":5583,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5584,"column":0},"generated":{"line":5584,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5585,"column":0},"generated":{"line":5585,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5586,"column":0},"generated":{"line":5586,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5587,"column":0},"generated":{"line":5587,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5588,"column":0},"generated":{"line":5588,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5589,"column":0},"generated":{"line":5589,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5590,"column":0},"generated":{"line":5590,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5591,"column":0},"generated":{"line":5591,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5592,"column":0},"generated":{"line":5592,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5593,"column":0},"generated":{"line":5593,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5594,"column":0},"generated":{"line":5594,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5595,"column":0},"generated":{"line":5595,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5596,"column":0},"generated":{"line":5596,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5597,"column":0},"generated":{"line":5597,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5598,"column":0},"generated":{"line":5598,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5599,"column":0},"generated":{"line":5599,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5600,"column":0},"generated":{"line":5600,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5601,"column":0},"generated":{"line":5601,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5602,"column":0},"generated":{"line":5602,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5603,"column":0},"generated":{"line":5603,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5604,"column":0},"generated":{"line":5604,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5605,"column":0},"generated":{"line":5605,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5606,"column":0},"generated":{"line":5606,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5607,"column":0},"generated":{"line":5607,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5608,"column":0},"generated":{"line":5608,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5609,"column":0},"generated":{"line":5609,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5610,"column":0},"generated":{"line":5610,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5611,"column":0},"generated":{"line":5611,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5612,"column":0},"generated":{"line":5612,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5613,"column":0},"generated":{"line":5613,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5614,"column":0},"generated":{"line":5614,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5615,"column":0},"generated":{"line":5615,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5616,"column":0},"generated":{"line":5616,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5617,"column":0},"generated":{"line":5617,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5618,"column":0},"generated":{"line":5618,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5619,"column":0},"generated":{"line":5619,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5620,"column":0},"generated":{"line":5620,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5621,"column":0},"generated":{"line":5621,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5622,"column":0},"generated":{"line":5622,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5623,"column":0},"generated":{"line":5623,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5624,"column":0},"generated":{"line":5624,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5625,"column":0},"generated":{"line":5625,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5626,"column":0},"generated":{"line":5626,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5627,"column":0},"generated":{"line":5627,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5628,"column":0},"generated":{"line":5628,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5629,"column":0},"generated":{"line":5629,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5630,"column":0},"generated":{"line":5630,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5631,"column":0},"generated":{"line":5631,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5632,"column":0},"generated":{"line":5632,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5633,"column":0},"generated":{"line":5633,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5634,"column":0},"generated":{"line":5634,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5635,"column":0},"generated":{"line":5635,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5636,"column":0},"generated":{"line":5636,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5637,"column":0},"generated":{"line":5637,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5638,"column":0},"generated":{"line":5638,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5639,"column":0},"generated":{"line":5639,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5640,"column":0},"generated":{"line":5640,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5641,"column":0},"generated":{"line":5641,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5642,"column":0},"generated":{"line":5642,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5643,"column":0},"generated":{"line":5643,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5644,"column":0},"generated":{"line":5644,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5645,"column":0},"generated":{"line":5645,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5646,"column":0},"generated":{"line":5646,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5647,"column":0},"generated":{"line":5647,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5648,"column":0},"generated":{"line":5648,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5649,"column":0},"generated":{"line":5649,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5650,"column":0},"generated":{"line":5650,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5651,"column":0},"generated":{"line":5651,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5652,"column":0},"generated":{"line":5652,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5653,"column":0},"generated":{"line":5653,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5654,"column":0},"generated":{"line":5654,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5655,"column":0},"generated":{"line":5655,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5656,"column":0},"generated":{"line":5656,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5657,"column":0},"generated":{"line":5657,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5658,"column":0},"generated":{"line":5658,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5659,"column":0},"generated":{"line":5659,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5660,"column":0},"generated":{"line":5660,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5661,"column":0},"generated":{"line":5661,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5662,"column":0},"generated":{"line":5662,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5663,"column":0},"generated":{"line":5663,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5664,"column":0},"generated":{"line":5664,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5665,"column":0},"generated":{"line":5665,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5666,"column":0},"generated":{"line":5666,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5667,"column":0},"generated":{"line":5667,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5668,"column":0},"generated":{"line":5668,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5669,"column":0},"generated":{"line":5669,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5670,"column":0},"generated":{"line":5670,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5671,"column":0},"generated":{"line":5671,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5672,"column":0},"generated":{"line":5672,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5673,"column":0},"generated":{"line":5673,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5674,"column":0},"generated":{"line":5674,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5675,"column":0},"generated":{"line":5675,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5676,"column":0},"generated":{"line":5676,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5677,"column":0},"generated":{"line":5677,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5678,"column":0},"generated":{"line":5678,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5679,"column":0},"generated":{"line":5679,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5680,"column":0},"generated":{"line":5680,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5681,"column":0},"generated":{"line":5681,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5682,"column":0},"generated":{"line":5682,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5683,"column":0},"generated":{"line":5683,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5684,"column":0},"generated":{"line":5684,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5685,"column":0},"generated":{"line":5685,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5686,"column":0},"generated":{"line":5686,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5687,"column":0},"generated":{"line":5687,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5688,"column":0},"generated":{"line":5688,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5689,"column":0},"generated":{"line":5689,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5690,"column":0},"generated":{"line":5690,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5691,"column":0},"generated":{"line":5691,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5692,"column":0},"generated":{"line":5692,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5693,"column":0},"generated":{"line":5693,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5694,"column":0},"generated":{"line":5694,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5695,"column":0},"generated":{"line":5695,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5696,"column":0},"generated":{"line":5696,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5697,"column":0},"generated":{"line":5697,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5698,"column":0},"generated":{"line":5698,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5699,"column":0},"generated":{"line":5699,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5700,"column":0},"generated":{"line":5700,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5701,"column":0},"generated":{"line":5701,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5702,"column":0},"generated":{"line":5702,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5703,"column":0},"generated":{"line":5703,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5704,"column":0},"generated":{"line":5704,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5705,"column":0},"generated":{"line":5705,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5706,"column":0},"generated":{"line":5706,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5707,"column":0},"generated":{"line":5707,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5708,"column":0},"generated":{"line":5708,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5709,"column":0},"generated":{"line":5709,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5710,"column":0},"generated":{"line":5710,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5711,"column":0},"generated":{"line":5711,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5712,"column":0},"generated":{"line":5712,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5713,"column":0},"generated":{"line":5713,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5714,"column":0},"generated":{"line":5714,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5715,"column":0},"generated":{"line":5715,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5716,"column":0},"generated":{"line":5716,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5717,"column":0},"generated":{"line":5717,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5718,"column":0},"generated":{"line":5718,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5719,"column":0},"generated":{"line":5719,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5720,"column":0},"generated":{"line":5720,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5721,"column":0},"generated":{"line":5721,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5722,"column":0},"generated":{"line":5722,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5723,"column":0},"generated":{"line":5723,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5724,"column":0},"generated":{"line":5724,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5725,"column":0},"generated":{"line":5725,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5726,"column":0},"generated":{"line":5726,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5727,"column":0},"generated":{"line":5727,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5728,"column":0},"generated":{"line":5728,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5729,"column":0},"generated":{"line":5729,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5730,"column":0},"generated":{"line":5730,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5731,"column":0},"generated":{"line":5731,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5732,"column":0},"generated":{"line":5732,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5733,"column":0},"generated":{"line":5733,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5734,"column":0},"generated":{"line":5734,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5735,"column":0},"generated":{"line":5735,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5736,"column":0},"generated":{"line":5736,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5737,"column":0},"generated":{"line":5737,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5738,"column":0},"generated":{"line":5738,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5739,"column":0},"generated":{"line":5739,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5740,"column":0},"generated":{"line":5740,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5741,"column":0},"generated":{"line":5741,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5742,"column":0},"generated":{"line":5742,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5743,"column":0},"generated":{"line":5743,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5744,"column":0},"generated":{"line":5744,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5745,"column":0},"generated":{"line":5745,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5746,"column":0},"generated":{"line":5746,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5747,"column":0},"generated":{"line":5747,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5748,"column":0},"generated":{"line":5748,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5749,"column":0},"generated":{"line":5749,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5750,"column":0},"generated":{"line":5750,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5751,"column":0},"generated":{"line":5751,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5752,"column":0},"generated":{"line":5752,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5753,"column":0},"generated":{"line":5753,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5754,"column":0},"generated":{"line":5754,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5755,"column":0},"generated":{"line":5755,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5756,"column":0},"generated":{"line":5756,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5757,"column":0},"generated":{"line":5757,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5758,"column":0},"generated":{"line":5758,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5759,"column":0},"generated":{"line":5759,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5760,"column":0},"generated":{"line":5760,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5761,"column":0},"generated":{"line":5761,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5762,"column":0},"generated":{"line":5762,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5763,"column":0},"generated":{"line":5763,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5764,"column":0},"generated":{"line":5764,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5765,"column":0},"generated":{"line":5765,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5766,"column":0},"generated":{"line":5766,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5767,"column":0},"generated":{"line":5767,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5768,"column":0},"generated":{"line":5768,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5769,"column":0},"generated":{"line":5769,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5770,"column":0},"generated":{"line":5770,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5771,"column":0},"generated":{"line":5771,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5772,"column":0},"generated":{"line":5772,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5773,"column":0},"generated":{"line":5773,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5774,"column":0},"generated":{"line":5774,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5775,"column":0},"generated":{"line":5775,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5776,"column":0},"generated":{"line":5776,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5777,"column":0},"generated":{"line":5777,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5778,"column":0},"generated":{"line":5778,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5779,"column":0},"generated":{"line":5779,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5780,"column":0},"generated":{"line":5780,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5781,"column":0},"generated":{"line":5781,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5782,"column":0},"generated":{"line":5782,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5783,"column":0},"generated":{"line":5783,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5784,"column":0},"generated":{"line":5784,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5785,"column":0},"generated":{"line":5785,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5786,"column":0},"generated":{"line":5786,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5787,"column":0},"generated":{"line":5787,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5788,"column":0},"generated":{"line":5788,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5789,"column":0},"generated":{"line":5789,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5790,"column":0},"generated":{"line":5790,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5791,"column":0},"generated":{"line":5791,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5792,"column":0},"generated":{"line":5792,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5793,"column":0},"generated":{"line":5793,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5794,"column":0},"generated":{"line":5794,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5795,"column":0},"generated":{"line":5795,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5796,"column":0},"generated":{"line":5796,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5797,"column":0},"generated":{"line":5797,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5798,"column":0},"generated":{"line":5798,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5799,"column":0},"generated":{"line":5799,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5800,"column":0},"generated":{"line":5800,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5801,"column":0},"generated":{"line":5801,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5802,"column":0},"generated":{"line":5802,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5803,"column":0},"generated":{"line":5803,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5804,"column":0},"generated":{"line":5804,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5805,"column":0},"generated":{"line":5805,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5806,"column":0},"generated":{"line":5806,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5807,"column":0},"generated":{"line":5807,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5808,"column":0},"generated":{"line":5808,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5809,"column":0},"generated":{"line":5809,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5810,"column":0},"generated":{"line":5810,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5811,"column":0},"generated":{"line":5811,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5812,"column":0},"generated":{"line":5812,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5813,"column":0},"generated":{"line":5813,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5814,"column":0},"generated":{"line":5814,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5815,"column":0},"generated":{"line":5815,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5816,"column":0},"generated":{"line":5816,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5817,"column":0},"generated":{"line":5817,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5818,"column":0},"generated":{"line":5818,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5819,"column":0},"generated":{"line":5819,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5820,"column":0},"generated":{"line":5820,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5821,"column":0},"generated":{"line":5821,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5822,"column":0},"generated":{"line":5822,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5823,"column":0},"generated":{"line":5823,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5824,"column":0},"generated":{"line":5824,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5825,"column":0},"generated":{"line":5825,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5826,"column":0},"generated":{"line":5826,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5827,"column":0},"generated":{"line":5827,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5828,"column":0},"generated":{"line":5828,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5829,"column":0},"generated":{"line":5829,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5830,"column":0},"generated":{"line":5830,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5831,"column":0},"generated":{"line":5831,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5832,"column":0},"generated":{"line":5832,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5833,"column":0},"generated":{"line":5833,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5834,"column":0},"generated":{"line":5834,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5835,"column":0},"generated":{"line":5835,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5836,"column":0},"generated":{"line":5836,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5837,"column":0},"generated":{"line":5837,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5838,"column":0},"generated":{"line":5838,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5839,"column":0},"generated":{"line":5839,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5840,"column":0},"generated":{"line":5840,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5841,"column":0},"generated":{"line":5841,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5842,"column":0},"generated":{"line":5842,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5843,"column":0},"generated":{"line":5843,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5844,"column":0},"generated":{"line":5844,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5845,"column":0},"generated":{"line":5845,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5846,"column":0},"generated":{"line":5846,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5847,"column":0},"generated":{"line":5847,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5848,"column":0},"generated":{"line":5848,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5849,"column":0},"generated":{"line":5849,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5850,"column":0},"generated":{"line":5850,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5851,"column":0},"generated":{"line":5851,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5852,"column":0},"generated":{"line":5852,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5853,"column":0},"generated":{"line":5853,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5854,"column":0},"generated":{"line":5854,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5855,"column":0},"generated":{"line":5855,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5856,"column":0},"generated":{"line":5856,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5857,"column":0},"generated":{"line":5857,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5858,"column":0},"generated":{"line":5858,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5859,"column":0},"generated":{"line":5859,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5860,"column":0},"generated":{"line":5860,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5861,"column":0},"generated":{"line":5861,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5862,"column":0},"generated":{"line":5862,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5863,"column":0},"generated":{"line":5863,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5864,"column":0},"generated":{"line":5864,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5865,"column":0},"generated":{"line":5865,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5866,"column":0},"generated":{"line":5866,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5867,"column":0},"generated":{"line":5867,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5868,"column":0},"generated":{"line":5868,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5869,"column":0},"generated":{"line":5869,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5870,"column":0},"generated":{"line":5870,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5871,"column":0},"generated":{"line":5871,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5872,"column":0},"generated":{"line":5872,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5873,"column":0},"generated":{"line":5873,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5874,"column":0},"generated":{"line":5874,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5875,"column":0},"generated":{"line":5875,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5876,"column":0},"generated":{"line":5876,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5877,"column":0},"generated":{"line":5877,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5878,"column":0},"generated":{"line":5878,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5879,"column":0},"generated":{"line":5879,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5880,"column":0},"generated":{"line":5880,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5881,"column":0},"generated":{"line":5881,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5882,"column":0},"generated":{"line":5882,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5883,"column":0},"generated":{"line":5883,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5884,"column":0},"generated":{"line":5884,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5885,"column":0},"generated":{"line":5885,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5886,"column":0},"generated":{"line":5886,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5887,"column":0},"generated":{"line":5887,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5888,"column":0},"generated":{"line":5888,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5889,"column":0},"generated":{"line":5889,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5890,"column":0},"generated":{"line":5890,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5891,"column":0},"generated":{"line":5891,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5892,"column":0},"generated":{"line":5892,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5893,"column":0},"generated":{"line":5893,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5894,"column":0},"generated":{"line":5894,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5895,"column":0},"generated":{"line":5895,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5896,"column":0},"generated":{"line":5896,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5897,"column":0},"generated":{"line":5897,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5898,"column":0},"generated":{"line":5898,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5899,"column":0},"generated":{"line":5899,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5900,"column":0},"generated":{"line":5900,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5901,"column":0},"generated":{"line":5901,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5902,"column":0},"generated":{"line":5902,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5903,"column":0},"generated":{"line":5903,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5904,"column":0},"generated":{"line":5904,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5905,"column":0},"generated":{"line":5905,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5906,"column":0},"generated":{"line":5906,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5907,"column":0},"generated":{"line":5907,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5908,"column":0},"generated":{"line":5908,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5909,"column":0},"generated":{"line":5909,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5910,"column":0},"generated":{"line":5910,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5911,"column":0},"generated":{"line":5911,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5912,"column":0},"generated":{"line":5912,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5913,"column":0},"generated":{"line":5913,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5914,"column":0},"generated":{"line":5914,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5915,"column":0},"generated":{"line":5915,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5916,"column":0},"generated":{"line":5916,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5917,"column":0},"generated":{"line":5917,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5918,"column":0},"generated":{"line":5918,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5919,"column":0},"generated":{"line":5919,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5920,"column":0},"generated":{"line":5920,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5921,"column":0},"generated":{"line":5921,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5922,"column":0},"generated":{"line":5922,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5923,"column":0},"generated":{"line":5923,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5924,"column":0},"generated":{"line":5924,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5925,"column":0},"generated":{"line":5925,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5926,"column":0},"generated":{"line":5926,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5927,"column":0},"generated":{"line":5927,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5928,"column":0},"generated":{"line":5928,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5929,"column":0},"generated":{"line":5929,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5930,"column":0},"generated":{"line":5930,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5931,"column":0},"generated":{"line":5931,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5932,"column":0},"generated":{"line":5932,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5933,"column":0},"generated":{"line":5933,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5934,"column":0},"generated":{"line":5934,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5935,"column":0},"generated":{"line":5935,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5936,"column":0},"generated":{"line":5936,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5937,"column":0},"generated":{"line":5937,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5938,"column":0},"generated":{"line":5938,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5939,"column":0},"generated":{"line":5939,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5940,"column":0},"generated":{"line":5940,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5941,"column":0},"generated":{"line":5941,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5942,"column":0},"generated":{"line":5942,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5943,"column":0},"generated":{"line":5943,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5944,"column":0},"generated":{"line":5944,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5945,"column":0},"generated":{"line":5945,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5946,"column":0},"generated":{"line":5946,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5947,"column":0},"generated":{"line":5947,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5948,"column":0},"generated":{"line":5948,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5949,"column":0},"generated":{"line":5949,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5950,"column":0},"generated":{"line":5950,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5951,"column":0},"generated":{"line":5951,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5952,"column":0},"generated":{"line":5952,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5953,"column":0},"generated":{"line":5953,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5954,"column":0},"generated":{"line":5954,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5955,"column":0},"generated":{"line":5955,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5956,"column":0},"generated":{"line":5956,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5957,"column":0},"generated":{"line":5957,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5958,"column":0},"generated":{"line":5958,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5959,"column":0},"generated":{"line":5959,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5960,"column":0},"generated":{"line":5960,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5961,"column":0},"generated":{"line":5961,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5962,"column":0},"generated":{"line":5962,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5963,"column":0},"generated":{"line":5963,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5964,"column":0},"generated":{"line":5964,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5965,"column":0},"generated":{"line":5965,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5966,"column":0},"generated":{"line":5966,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5967,"column":0},"generated":{"line":5967,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5968,"column":0},"generated":{"line":5968,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5969,"column":0},"generated":{"line":5969,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5970,"column":0},"generated":{"line":5970,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5971,"column":0},"generated":{"line":5971,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5972,"column":0},"generated":{"line":5972,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5973,"column":0},"generated":{"line":5973,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5974,"column":0},"generated":{"line":5974,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5975,"column":0},"generated":{"line":5975,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5976,"column":0},"generated":{"line":5976,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5977,"column":0},"generated":{"line":5977,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5978,"column":0},"generated":{"line":5978,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5979,"column":0},"generated":{"line":5979,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5980,"column":0},"generated":{"line":5980,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5981,"column":0},"generated":{"line":5981,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5982,"column":0},"generated":{"line":5982,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5983,"column":0},"generated":{"line":5983,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5984,"column":0},"generated":{"line":5984,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5985,"column":0},"generated":{"line":5985,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5986,"column":0},"generated":{"line":5986,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5987,"column":0},"generated":{"line":5987,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5988,"column":0},"generated":{"line":5988,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5989,"column":0},"generated":{"line":5989,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5990,"column":0},"generated":{"line":5990,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5991,"column":0},"generated":{"line":5991,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5992,"column":0},"generated":{"line":5992,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5993,"column":0},"generated":{"line":5993,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5994,"column":0},"generated":{"line":5994,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5995,"column":0},"generated":{"line":5995,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5996,"column":0},"generated":{"line":5996,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5997,"column":0},"generated":{"line":5997,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5998,"column":0},"generated":{"line":5998,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":5999,"column":0},"generated":{"line":5999,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6000,"column":0},"generated":{"line":6000,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6001,"column":0},"generated":{"line":6001,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6002,"column":0},"generated":{"line":6002,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6003,"column":0},"generated":{"line":6003,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6004,"column":0},"generated":{"line":6004,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6005,"column":0},"generated":{"line":6005,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6006,"column":0},"generated":{"line":6006,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6007,"column":0},"generated":{"line":6007,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6008,"column":0},"generated":{"line":6008,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6009,"column":0},"generated":{"line":6009,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6010,"column":0},"generated":{"line":6010,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6011,"column":0},"generated":{"line":6011,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6012,"column":0},"generated":{"line":6012,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6013,"column":0},"generated":{"line":6013,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6014,"column":0},"generated":{"line":6014,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6015,"column":0},"generated":{"line":6015,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6016,"column":0},"generated":{"line":6016,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6017,"column":0},"generated":{"line":6017,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6018,"column":0},"generated":{"line":6018,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6019,"column":0},"generated":{"line":6019,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6020,"column":0},"generated":{"line":6020,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6021,"column":0},"generated":{"line":6021,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6022,"column":0},"generated":{"line":6022,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6023,"column":0},"generated":{"line":6023,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6024,"column":0},"generated":{"line":6024,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6025,"column":0},"generated":{"line":6025,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6026,"column":0},"generated":{"line":6026,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6027,"column":0},"generated":{"line":6027,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6028,"column":0},"generated":{"line":6028,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6029,"column":0},"generated":{"line":6029,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6030,"column":0},"generated":{"line":6030,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6031,"column":0},"generated":{"line":6031,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6032,"column":0},"generated":{"line":6032,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6033,"column":0},"generated":{"line":6033,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6034,"column":0},"generated":{"line":6034,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6035,"column":0},"generated":{"line":6035,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6036,"column":0},"generated":{"line":6036,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6037,"column":0},"generated":{"line":6037,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6038,"column":0},"generated":{"line":6038,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6039,"column":0},"generated":{"line":6039,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6040,"column":0},"generated":{"line":6040,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6041,"column":0},"generated":{"line":6041,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6042,"column":0},"generated":{"line":6042,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6043,"column":0},"generated":{"line":6043,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6044,"column":0},"generated":{"line":6044,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6045,"column":0},"generated":{"line":6045,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6046,"column":0},"generated":{"line":6046,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6047,"column":0},"generated":{"line":6047,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6048,"column":0},"generated":{"line":6048,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6049,"column":0},"generated":{"line":6049,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6050,"column":0},"generated":{"line":6050,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6051,"column":0},"generated":{"line":6051,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6052,"column":0},"generated":{"line":6052,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6053,"column":0},"generated":{"line":6053,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6054,"column":0},"generated":{"line":6054,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6055,"column":0},"generated":{"line":6055,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6056,"column":0},"generated":{"line":6056,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6057,"column":0},"generated":{"line":6057,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6058,"column":0},"generated":{"line":6058,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6059,"column":0},"generated":{"line":6059,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6060,"column":0},"generated":{"line":6060,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6061,"column":0},"generated":{"line":6061,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6062,"column":0},"generated":{"line":6062,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6063,"column":0},"generated":{"line":6063,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6064,"column":0},"generated":{"line":6064,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6065,"column":0},"generated":{"line":6065,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6066,"column":0},"generated":{"line":6066,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6067,"column":0},"generated":{"line":6067,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6068,"column":0},"generated":{"line":6068,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6069,"column":0},"generated":{"line":6069,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6070,"column":0},"generated":{"line":6070,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6071,"column":0},"generated":{"line":6071,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6072,"column":0},"generated":{"line":6072,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6073,"column":0},"generated":{"line":6073,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6074,"column":0},"generated":{"line":6074,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6075,"column":0},"generated":{"line":6075,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6076,"column":0},"generated":{"line":6076,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6077,"column":0},"generated":{"line":6077,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6078,"column":0},"generated":{"line":6078,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6079,"column":0},"generated":{"line":6079,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6080,"column":0},"generated":{"line":6080,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6081,"column":0},"generated":{"line":6081,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6082,"column":0},"generated":{"line":6082,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6083,"column":0},"generated":{"line":6083,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6084,"column":0},"generated":{"line":6084,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6085,"column":0},"generated":{"line":6085,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6086,"column":0},"generated":{"line":6086,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6087,"column":0},"generated":{"line":6087,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6088,"column":0},"generated":{"line":6088,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6089,"column":0},"generated":{"line":6089,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6090,"column":0},"generated":{"line":6090,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6091,"column":0},"generated":{"line":6091,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6092,"column":0},"generated":{"line":6092,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6093,"column":0},"generated":{"line":6093,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6094,"column":0},"generated":{"line":6094,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6095,"column":0},"generated":{"line":6095,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6096,"column":0},"generated":{"line":6096,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6097,"column":0},"generated":{"line":6097,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6098,"column":0},"generated":{"line":6098,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6099,"column":0},"generated":{"line":6099,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6100,"column":0},"generated":{"line":6100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6101,"column":0},"generated":{"line":6101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6102,"column":0},"generated":{"line":6102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6103,"column":0},"generated":{"line":6103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6104,"column":0},"generated":{"line":6104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6105,"column":0},"generated":{"line":6105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6106,"column":0},"generated":{"line":6106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6107,"column":0},"generated":{"line":6107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6108,"column":0},"generated":{"line":6108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6109,"column":0},"generated":{"line":6109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6110,"column":0},"generated":{"line":6110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6111,"column":0},"generated":{"line":6111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6112,"column":0},"generated":{"line":6112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6113,"column":0},"generated":{"line":6113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6114,"column":0},"generated":{"line":6114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6115,"column":0},"generated":{"line":6115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6116,"column":0},"generated":{"line":6116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6117,"column":0},"generated":{"line":6117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6118,"column":0},"generated":{"line":6118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6119,"column":0},"generated":{"line":6119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6120,"column":0},"generated":{"line":6120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6121,"column":0},"generated":{"line":6121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6122,"column":0},"generated":{"line":6122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6123,"column":0},"generated":{"line":6123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6124,"column":0},"generated":{"line":6124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6125,"column":0},"generated":{"line":6125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6126,"column":0},"generated":{"line":6126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6127,"column":0},"generated":{"line":6127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6128,"column":0},"generated":{"line":6128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6129,"column":0},"generated":{"line":6129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6130,"column":0},"generated":{"line":6130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6131,"column":0},"generated":{"line":6131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6132,"column":0},"generated":{"line":6132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6133,"column":0},"generated":{"line":6133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6134,"column":0},"generated":{"line":6134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6135,"column":0},"generated":{"line":6135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6136,"column":0},"generated":{"line":6136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6137,"column":0},"generated":{"line":6137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6138,"column":0},"generated":{"line":6138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6139,"column":0},"generated":{"line":6139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6140,"column":0},"generated":{"line":6140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6141,"column":0},"generated":{"line":6141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6142,"column":0},"generated":{"line":6142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6143,"column":0},"generated":{"line":6143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6144,"column":0},"generated":{"line":6144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6145,"column":0},"generated":{"line":6145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6146,"column":0},"generated":{"line":6146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6147,"column":0},"generated":{"line":6147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6148,"column":0},"generated":{"line":6148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6149,"column":0},"generated":{"line":6149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6150,"column":0},"generated":{"line":6150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6151,"column":0},"generated":{"line":6151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6152,"column":0},"generated":{"line":6152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6153,"column":0},"generated":{"line":6153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6154,"column":0},"generated":{"line":6154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6155,"column":0},"generated":{"line":6155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6156,"column":0},"generated":{"line":6156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6157,"column":0},"generated":{"line":6157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6158,"column":0},"generated":{"line":6158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6159,"column":0},"generated":{"line":6159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6160,"column":0},"generated":{"line":6160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6161,"column":0},"generated":{"line":6161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6162,"column":0},"generated":{"line":6162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6163,"column":0},"generated":{"line":6163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6164,"column":0},"generated":{"line":6164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6165,"column":0},"generated":{"line":6165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6166,"column":0},"generated":{"line":6166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6167,"column":0},"generated":{"line":6167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6168,"column":0},"generated":{"line":6168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6169,"column":0},"generated":{"line":6169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6170,"column":0},"generated":{"line":6170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6171,"column":0},"generated":{"line":6171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6172,"column":0},"generated":{"line":6172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6173,"column":0},"generated":{"line":6173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6174,"column":0},"generated":{"line":6174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6175,"column":0},"generated":{"line":6175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6176,"column":0},"generated":{"line":6176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6177,"column":0},"generated":{"line":6177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6178,"column":0},"generated":{"line":6178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6179,"column":0},"generated":{"line":6179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6180,"column":0},"generated":{"line":6180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6181,"column":0},"generated":{"line":6181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6182,"column":0},"generated":{"line":6182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6183,"column":0},"generated":{"line":6183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6184,"column":0},"generated":{"line":6184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6185,"column":0},"generated":{"line":6185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6186,"column":0},"generated":{"line":6186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6187,"column":0},"generated":{"line":6187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6188,"column":0},"generated":{"line":6188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6189,"column":0},"generated":{"line":6189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6190,"column":0},"generated":{"line":6190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6191,"column":0},"generated":{"line":6191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6192,"column":0},"generated":{"line":6192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6193,"column":0},"generated":{"line":6193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6194,"column":0},"generated":{"line":6194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6195,"column":0},"generated":{"line":6195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6196,"column":0},"generated":{"line":6196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6197,"column":0},"generated":{"line":6197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6198,"column":0},"generated":{"line":6198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6199,"column":0},"generated":{"line":6199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6200,"column":0},"generated":{"line":6200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6201,"column":0},"generated":{"line":6201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6202,"column":0},"generated":{"line":6202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6203,"column":0},"generated":{"line":6203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6204,"column":0},"generated":{"line":6204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6205,"column":0},"generated":{"line":6205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6206,"column":0},"generated":{"line":6206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6207,"column":0},"generated":{"line":6207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6208,"column":0},"generated":{"line":6208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6209,"column":0},"generated":{"line":6209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6210,"column":0},"generated":{"line":6210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6211,"column":0},"generated":{"line":6211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6212,"column":0},"generated":{"line":6212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6213,"column":0},"generated":{"line":6213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6214,"column":0},"generated":{"line":6214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6215,"column":0},"generated":{"line":6215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6216,"column":0},"generated":{"line":6216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6217,"column":0},"generated":{"line":6217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6218,"column":0},"generated":{"line":6218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6219,"column":0},"generated":{"line":6219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6220,"column":0},"generated":{"line":6220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6221,"column":0},"generated":{"line":6221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6222,"column":0},"generated":{"line":6222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6223,"column":0},"generated":{"line":6223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6224,"column":0},"generated":{"line":6224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6225,"column":0},"generated":{"line":6225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6226,"column":0},"generated":{"line":6226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6227,"column":0},"generated":{"line":6227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6228,"column":0},"generated":{"line":6228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6229,"column":0},"generated":{"line":6229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6230,"column":0},"generated":{"line":6230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6231,"column":0},"generated":{"line":6231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6232,"column":0},"generated":{"line":6232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6233,"column":0},"generated":{"line":6233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6234,"column":0},"generated":{"line":6234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6235,"column":0},"generated":{"line":6235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6236,"column":0},"generated":{"line":6236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6237,"column":0},"generated":{"line":6237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6238,"column":0},"generated":{"line":6238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6239,"column":0},"generated":{"line":6239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6240,"column":0},"generated":{"line":6240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6241,"column":0},"generated":{"line":6241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6242,"column":0},"generated":{"line":6242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6243,"column":0},"generated":{"line":6243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6244,"column":0},"generated":{"line":6244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6245,"column":0},"generated":{"line":6245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6246,"column":0},"generated":{"line":6246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6247,"column":0},"generated":{"line":6247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6248,"column":0},"generated":{"line":6248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6249,"column":0},"generated":{"line":6249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6250,"column":0},"generated":{"line":6250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6251,"column":0},"generated":{"line":6251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6252,"column":0},"generated":{"line":6252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6253,"column":0},"generated":{"line":6253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6254,"column":0},"generated":{"line":6254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6255,"column":0},"generated":{"line":6255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6256,"column":0},"generated":{"line":6256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6257,"column":0},"generated":{"line":6257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6258,"column":0},"generated":{"line":6258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6259,"column":0},"generated":{"line":6259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6260,"column":0},"generated":{"line":6260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6261,"column":0},"generated":{"line":6261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6262,"column":0},"generated":{"line":6262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6263,"column":0},"generated":{"line":6263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6264,"column":0},"generated":{"line":6264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6265,"column":0},"generated":{"line":6265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6266,"column":0},"generated":{"line":6266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6267,"column":0},"generated":{"line":6267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6268,"column":0},"generated":{"line":6268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6269,"column":0},"generated":{"line":6269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6270,"column":0},"generated":{"line":6270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6271,"column":0},"generated":{"line":6271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6272,"column":0},"generated":{"line":6272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6273,"column":0},"generated":{"line":6273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6274,"column":0},"generated":{"line":6274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6275,"column":0},"generated":{"line":6275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6276,"column":0},"generated":{"line":6276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6277,"column":0},"generated":{"line":6277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6278,"column":0},"generated":{"line":6278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6279,"column":0},"generated":{"line":6279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6280,"column":0},"generated":{"line":6280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6281,"column":0},"generated":{"line":6281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6282,"column":0},"generated":{"line":6282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6283,"column":0},"generated":{"line":6283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6284,"column":0},"generated":{"line":6284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6285,"column":0},"generated":{"line":6285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6286,"column":0},"generated":{"line":6286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6287,"column":0},"generated":{"line":6287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6288,"column":0},"generated":{"line":6288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6289,"column":0},"generated":{"line":6289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6290,"column":0},"generated":{"line":6290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6291,"column":0},"generated":{"line":6291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6292,"column":0},"generated":{"line":6292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6293,"column":0},"generated":{"line":6293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6294,"column":0},"generated":{"line":6294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6295,"column":0},"generated":{"line":6295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6296,"column":0},"generated":{"line":6296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6297,"column":0},"generated":{"line":6297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6298,"column":0},"generated":{"line":6298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6299,"column":0},"generated":{"line":6299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6300,"column":0},"generated":{"line":6300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6301,"column":0},"generated":{"line":6301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6302,"column":0},"generated":{"line":6302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6303,"column":0},"generated":{"line":6303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6304,"column":0},"generated":{"line":6304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6305,"column":0},"generated":{"line":6305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6306,"column":0},"generated":{"line":6306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6307,"column":0},"generated":{"line":6307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6308,"column":0},"generated":{"line":6308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6309,"column":0},"generated":{"line":6309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6310,"column":0},"generated":{"line":6310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6311,"column":0},"generated":{"line":6311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6312,"column":0},"generated":{"line":6312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6313,"column":0},"generated":{"line":6313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6314,"column":0},"generated":{"line":6314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6315,"column":0},"generated":{"line":6315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6316,"column":0},"generated":{"line":6316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6317,"column":0},"generated":{"line":6317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6318,"column":0},"generated":{"line":6318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6319,"column":0},"generated":{"line":6319,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6320,"column":0},"generated":{"line":6320,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6321,"column":0},"generated":{"line":6321,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6322,"column":0},"generated":{"line":6322,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6323,"column":0},"generated":{"line":6323,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6324,"column":0},"generated":{"line":6324,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6325,"column":0},"generated":{"line":6325,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6326,"column":0},"generated":{"line":6326,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6327,"column":0},"generated":{"line":6327,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6328,"column":0},"generated":{"line":6328,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6329,"column":0},"generated":{"line":6329,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6330,"column":0},"generated":{"line":6330,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6331,"column":0},"generated":{"line":6331,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6332,"column":0},"generated":{"line":6332,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6333,"column":0},"generated":{"line":6333,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6334,"column":0},"generated":{"line":6334,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6335,"column":0},"generated":{"line":6335,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6336,"column":0},"generated":{"line":6336,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6337,"column":0},"generated":{"line":6337,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6338,"column":0},"generated":{"line":6338,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6339,"column":0},"generated":{"line":6339,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6340,"column":0},"generated":{"line":6340,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6341,"column":0},"generated":{"line":6341,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6342,"column":0},"generated":{"line":6342,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6343,"column":0},"generated":{"line":6343,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6344,"column":0},"generated":{"line":6344,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6345,"column":0},"generated":{"line":6345,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6346,"column":0},"generated":{"line":6346,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6347,"column":0},"generated":{"line":6347,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6348,"column":0},"generated":{"line":6348,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6349,"column":0},"generated":{"line":6349,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6350,"column":0},"generated":{"line":6350,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6351,"column":0},"generated":{"line":6351,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6352,"column":0},"generated":{"line":6352,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6353,"column":0},"generated":{"line":6353,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6354,"column":0},"generated":{"line":6354,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6355,"column":0},"generated":{"line":6355,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6356,"column":0},"generated":{"line":6356,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6357,"column":0},"generated":{"line":6357,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6358,"column":0},"generated":{"line":6358,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6359,"column":0},"generated":{"line":6359,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6360,"column":0},"generated":{"line":6360,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6361,"column":0},"generated":{"line":6361,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6362,"column":0},"generated":{"line":6362,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6363,"column":0},"generated":{"line":6363,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6364,"column":0},"generated":{"line":6364,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6365,"column":0},"generated":{"line":6365,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6366,"column":0},"generated":{"line":6366,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6367,"column":0},"generated":{"line":6367,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6368,"column":0},"generated":{"line":6368,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6369,"column":0},"generated":{"line":6369,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6370,"column":0},"generated":{"line":6370,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6371,"column":0},"generated":{"line":6371,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6372,"column":0},"generated":{"line":6372,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6373,"column":0},"generated":{"line":6373,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6374,"column":0},"generated":{"line":6374,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6375,"column":0},"generated":{"line":6375,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6376,"column":0},"generated":{"line":6376,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6377,"column":0},"generated":{"line":6377,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6378,"column":0},"generated":{"line":6378,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6379,"column":0},"generated":{"line":6379,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6380,"column":0},"generated":{"line":6380,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6381,"column":0},"generated":{"line":6381,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6382,"column":0},"generated":{"line":6382,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6383,"column":0},"generated":{"line":6383,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6384,"column":0},"generated":{"line":6384,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6385,"column":0},"generated":{"line":6385,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6386,"column":0},"generated":{"line":6386,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6387,"column":0},"generated":{"line":6387,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6388,"column":0},"generated":{"line":6388,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6389,"column":0},"generated":{"line":6389,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6390,"column":0},"generated":{"line":6390,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6391,"column":0},"generated":{"line":6391,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6392,"column":0},"generated":{"line":6392,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6393,"column":0},"generated":{"line":6393,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6394,"column":0},"generated":{"line":6394,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6395,"column":0},"generated":{"line":6395,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6396,"column":0},"generated":{"line":6396,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6397,"column":0},"generated":{"line":6397,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6398,"column":0},"generated":{"line":6398,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6399,"column":0},"generated":{"line":6399,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6400,"column":0},"generated":{"line":6400,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6401,"column":0},"generated":{"line":6401,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6402,"column":0},"generated":{"line":6402,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6403,"column":0},"generated":{"line":6403,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6404,"column":0},"generated":{"line":6404,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6405,"column":0},"generated":{"line":6405,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6406,"column":0},"generated":{"line":6406,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6407,"column":0},"generated":{"line":6407,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6408,"column":0},"generated":{"line":6408,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6409,"column":0},"generated":{"line":6409,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6410,"column":0},"generated":{"line":6410,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6411,"column":0},"generated":{"line":6411,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6412,"column":0},"generated":{"line":6412,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6413,"column":0},"generated":{"line":6413,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6414,"column":0},"generated":{"line":6414,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6415,"column":0},"generated":{"line":6415,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6416,"column":0},"generated":{"line":6416,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6417,"column":0},"generated":{"line":6417,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6418,"column":0},"generated":{"line":6418,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6419,"column":0},"generated":{"line":6419,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6420,"column":0},"generated":{"line":6420,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6421,"column":0},"generated":{"line":6421,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6422,"column":0},"generated":{"line":6422,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6423,"column":0},"generated":{"line":6423,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6424,"column":0},"generated":{"line":6424,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6425,"column":0},"generated":{"line":6425,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6426,"column":0},"generated":{"line":6426,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6427,"column":0},"generated":{"line":6427,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6428,"column":0},"generated":{"line":6428,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6429,"column":0},"generated":{"line":6429,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6430,"column":0},"generated":{"line":6430,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6431,"column":0},"generated":{"line":6431,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6432,"column":0},"generated":{"line":6432,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6433,"column":0},"generated":{"line":6433,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6434,"column":0},"generated":{"line":6434,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6435,"column":0},"generated":{"line":6435,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6436,"column":0},"generated":{"line":6436,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6437,"column":0},"generated":{"line":6437,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6438,"column":0},"generated":{"line":6438,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6439,"column":0},"generated":{"line":6439,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6440,"column":0},"generated":{"line":6440,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6441,"column":0},"generated":{"line":6441,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6442,"column":0},"generated":{"line":6442,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6443,"column":0},"generated":{"line":6443,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6444,"column":0},"generated":{"line":6444,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6445,"column":0},"generated":{"line":6445,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6446,"column":0},"generated":{"line":6446,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6447,"column":0},"generated":{"line":6447,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6448,"column":0},"generated":{"line":6448,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6449,"column":0},"generated":{"line":6449,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6450,"column":0},"generated":{"line":6450,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6451,"column":0},"generated":{"line":6451,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6452,"column":0},"generated":{"line":6452,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6453,"column":0},"generated":{"line":6453,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6454,"column":0},"generated":{"line":6454,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6455,"column":0},"generated":{"line":6455,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6456,"column":0},"generated":{"line":6456,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6457,"column":0},"generated":{"line":6457,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6458,"column":0},"generated":{"line":6458,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6459,"column":0},"generated":{"line":6459,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6460,"column":0},"generated":{"line":6460,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6461,"column":0},"generated":{"line":6461,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6462,"column":0},"generated":{"line":6462,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6463,"column":0},"generated":{"line":6463,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6464,"column":0},"generated":{"line":6464,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6465,"column":0},"generated":{"line":6465,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6466,"column":0},"generated":{"line":6466,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6467,"column":0},"generated":{"line":6467,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6468,"column":0},"generated":{"line":6468,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6469,"column":0},"generated":{"line":6469,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6470,"column":0},"generated":{"line":6470,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6471,"column":0},"generated":{"line":6471,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6472,"column":0},"generated":{"line":6472,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6473,"column":0},"generated":{"line":6473,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6474,"column":0},"generated":{"line":6474,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6475,"column":0},"generated":{"line":6475,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6476,"column":0},"generated":{"line":6476,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6477,"column":0},"generated":{"line":6477,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6478,"column":0},"generated":{"line":6478,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6479,"column":0},"generated":{"line":6479,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6480,"column":0},"generated":{"line":6480,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6481,"column":0},"generated":{"line":6481,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6482,"column":0},"generated":{"line":6482,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6483,"column":0},"generated":{"line":6483,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6484,"column":0},"generated":{"line":6484,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6485,"column":0},"generated":{"line":6485,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6486,"column":0},"generated":{"line":6486,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6487,"column":0},"generated":{"line":6487,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6488,"column":0},"generated":{"line":6488,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6489,"column":0},"generated":{"line":6489,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6490,"column":0},"generated":{"line":6490,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6491,"column":0},"generated":{"line":6491,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6492,"column":0},"generated":{"line":6492,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6493,"column":0},"generated":{"line":6493,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6494,"column":0},"generated":{"line":6494,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6495,"column":0},"generated":{"line":6495,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6496,"column":0},"generated":{"line":6496,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6497,"column":0},"generated":{"line":6497,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6498,"column":0},"generated":{"line":6498,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6499,"column":0},"generated":{"line":6499,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6500,"column":0},"generated":{"line":6500,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6501,"column":0},"generated":{"line":6501,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6502,"column":0},"generated":{"line":6502,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6503,"column":0},"generated":{"line":6503,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6504,"column":0},"generated":{"line":6504,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6505,"column":0},"generated":{"line":6505,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6506,"column":0},"generated":{"line":6506,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6507,"column":0},"generated":{"line":6507,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6508,"column":0},"generated":{"line":6508,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6509,"column":0},"generated":{"line":6509,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6510,"column":0},"generated":{"line":6510,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6511,"column":0},"generated":{"line":6511,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6512,"column":0},"generated":{"line":6512,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6513,"column":0},"generated":{"line":6513,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6514,"column":0},"generated":{"line":6514,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6515,"column":0},"generated":{"line":6515,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6516,"column":0},"generated":{"line":6516,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6517,"column":0},"generated":{"line":6517,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6518,"column":0},"generated":{"line":6518,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6519,"column":0},"generated":{"line":6519,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6520,"column":0},"generated":{"line":6520,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6521,"column":0},"generated":{"line":6521,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6522,"column":0},"generated":{"line":6522,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6523,"column":0},"generated":{"line":6523,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6524,"column":0},"generated":{"line":6524,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6525,"column":0},"generated":{"line":6525,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6526,"column":0},"generated":{"line":6526,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6527,"column":0},"generated":{"line":6527,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6528,"column":0},"generated":{"line":6528,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6529,"column":0},"generated":{"line":6529,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6530,"column":0},"generated":{"line":6530,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6531,"column":0},"generated":{"line":6531,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6532,"column":0},"generated":{"line":6532,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6533,"column":0},"generated":{"line":6533,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6534,"column":0},"generated":{"line":6534,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6535,"column":0},"generated":{"line":6535,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6536,"column":0},"generated":{"line":6536,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6537,"column":0},"generated":{"line":6537,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6538,"column":0},"generated":{"line":6538,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6539,"column":0},"generated":{"line":6539,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6540,"column":0},"generated":{"line":6540,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6541,"column":0},"generated":{"line":6541,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6542,"column":0},"generated":{"line":6542,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6543,"column":0},"generated":{"line":6543,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6544,"column":0},"generated":{"line":6544,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6545,"column":0},"generated":{"line":6545,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6546,"column":0},"generated":{"line":6546,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6547,"column":0},"generated":{"line":6547,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6548,"column":0},"generated":{"line":6548,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6549,"column":0},"generated":{"line":6549,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6550,"column":0},"generated":{"line":6550,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6551,"column":0},"generated":{"line":6551,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6552,"column":0},"generated":{"line":6552,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6553,"column":0},"generated":{"line":6553,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6554,"column":0},"generated":{"line":6554,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6555,"column":0},"generated":{"line":6555,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6556,"column":0},"generated":{"line":6556,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6557,"column":0},"generated":{"line":6557,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6558,"column":0},"generated":{"line":6558,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6559,"column":0},"generated":{"line":6559,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6560,"column":0},"generated":{"line":6560,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6561,"column":0},"generated":{"line":6561,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6562,"column":0},"generated":{"line":6562,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6563,"column":0},"generated":{"line":6563,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6564,"column":0},"generated":{"line":6564,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6565,"column":0},"generated":{"line":6565,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6566,"column":0},"generated":{"line":6566,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6567,"column":0},"generated":{"line":6567,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6568,"column":0},"generated":{"line":6568,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6569,"column":0},"generated":{"line":6569,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6570,"column":0},"generated":{"line":6570,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6571,"column":0},"generated":{"line":6571,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6572,"column":0},"generated":{"line":6572,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6573,"column":0},"generated":{"line":6573,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6574,"column":0},"generated":{"line":6574,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6575,"column":0},"generated":{"line":6575,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6576,"column":0},"generated":{"line":6576,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6577,"column":0},"generated":{"line":6577,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6578,"column":0},"generated":{"line":6578,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6579,"column":0},"generated":{"line":6579,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6580,"column":0},"generated":{"line":6580,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6581,"column":0},"generated":{"line":6581,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6582,"column":0},"generated":{"line":6582,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6583,"column":0},"generated":{"line":6583,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6584,"column":0},"generated":{"line":6584,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6585,"column":0},"generated":{"line":6585,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6586,"column":0},"generated":{"line":6586,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6587,"column":0},"generated":{"line":6587,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6588,"column":0},"generated":{"line":6588,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6589,"column":0},"generated":{"line":6589,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6590,"column":0},"generated":{"line":6590,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6591,"column":0},"generated":{"line":6591,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6592,"column":0},"generated":{"line":6592,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6593,"column":0},"generated":{"line":6593,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6594,"column":0},"generated":{"line":6594,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6595,"column":0},"generated":{"line":6595,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6596,"column":0},"generated":{"line":6596,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6597,"column":0},"generated":{"line":6597,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6598,"column":0},"generated":{"line":6598,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6599,"column":0},"generated":{"line":6599,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6600,"column":0},"generated":{"line":6600,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6601,"column":0},"generated":{"line":6601,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6602,"column":0},"generated":{"line":6602,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6603,"column":0},"generated":{"line":6603,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6604,"column":0},"generated":{"line":6604,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6605,"column":0},"generated":{"line":6605,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6606,"column":0},"generated":{"line":6606,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6607,"column":0},"generated":{"line":6607,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6608,"column":0},"generated":{"line":6608,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6609,"column":0},"generated":{"line":6609,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6610,"column":0},"generated":{"line":6610,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6611,"column":0},"generated":{"line":6611,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6612,"column":0},"generated":{"line":6612,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6613,"column":0},"generated":{"line":6613,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6614,"column":0},"generated":{"line":6614,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6615,"column":0},"generated":{"line":6615,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6616,"column":0},"generated":{"line":6616,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6617,"column":0},"generated":{"line":6617,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6618,"column":0},"generated":{"line":6618,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6619,"column":0},"generated":{"line":6619,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6620,"column":0},"generated":{"line":6620,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6621,"column":0},"generated":{"line":6621,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6622,"column":0},"generated":{"line":6622,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6623,"column":0},"generated":{"line":6623,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6624,"column":0},"generated":{"line":6624,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6625,"column":0},"generated":{"line":6625,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6626,"column":0},"generated":{"line":6626,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6627,"column":0},"generated":{"line":6627,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6628,"column":0},"generated":{"line":6628,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6629,"column":0},"generated":{"line":6629,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6630,"column":0},"generated":{"line":6630,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6631,"column":0},"generated":{"line":6631,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6632,"column":0},"generated":{"line":6632,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6633,"column":0},"generated":{"line":6633,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6634,"column":0},"generated":{"line":6634,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6635,"column":0},"generated":{"line":6635,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6636,"column":0},"generated":{"line":6636,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6637,"column":0},"generated":{"line":6637,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6638,"column":0},"generated":{"line":6638,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6639,"column":0},"generated":{"line":6639,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6640,"column":0},"generated":{"line":6640,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6641,"column":0},"generated":{"line":6641,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6642,"column":0},"generated":{"line":6642,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6643,"column":0},"generated":{"line":6643,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6644,"column":0},"generated":{"line":6644,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6645,"column":0},"generated":{"line":6645,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6646,"column":0},"generated":{"line":6646,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6647,"column":0},"generated":{"line":6647,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6648,"column":0},"generated":{"line":6648,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6649,"column":0},"generated":{"line":6649,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6650,"column":0},"generated":{"line":6650,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6651,"column":0},"generated":{"line":6651,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6652,"column":0},"generated":{"line":6652,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6653,"column":0},"generated":{"line":6653,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6654,"column":0},"generated":{"line":6654,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6655,"column":0},"generated":{"line":6655,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6656,"column":0},"generated":{"line":6656,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6657,"column":0},"generated":{"line":6657,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6658,"column":0},"generated":{"line":6658,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6659,"column":0},"generated":{"line":6659,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6660,"column":0},"generated":{"line":6660,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6661,"column":0},"generated":{"line":6661,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6662,"column":0},"generated":{"line":6662,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6663,"column":0},"generated":{"line":6663,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6664,"column":0},"generated":{"line":6664,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6665,"column":0},"generated":{"line":6665,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6666,"column":0},"generated":{"line":6666,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6667,"column":0},"generated":{"line":6667,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6668,"column":0},"generated":{"line":6668,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6669,"column":0},"generated":{"line":6669,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6670,"column":0},"generated":{"line":6670,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6671,"column":0},"generated":{"line":6671,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6672,"column":0},"generated":{"line":6672,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6673,"column":0},"generated":{"line":6673,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6674,"column":0},"generated":{"line":6674,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6675,"column":0},"generated":{"line":6675,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6676,"column":0},"generated":{"line":6676,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6677,"column":0},"generated":{"line":6677,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6678,"column":0},"generated":{"line":6678,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6679,"column":0},"generated":{"line":6679,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6680,"column":0},"generated":{"line":6680,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6681,"column":0},"generated":{"line":6681,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6682,"column":0},"generated":{"line":6682,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6683,"column":0},"generated":{"line":6683,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6684,"column":0},"generated":{"line":6684,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6685,"column":0},"generated":{"line":6685,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6686,"column":0},"generated":{"line":6686,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6687,"column":0},"generated":{"line":6687,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6688,"column":0},"generated":{"line":6688,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6689,"column":0},"generated":{"line":6689,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6690,"column":0},"generated":{"line":6690,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6691,"column":0},"generated":{"line":6691,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6692,"column":0},"generated":{"line":6692,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6693,"column":0},"generated":{"line":6693,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6694,"column":0},"generated":{"line":6694,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6695,"column":0},"generated":{"line":6695,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6696,"column":0},"generated":{"line":6696,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6697,"column":0},"generated":{"line":6697,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6698,"column":0},"generated":{"line":6698,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6699,"column":0},"generated":{"line":6699,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6700,"column":0},"generated":{"line":6700,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6701,"column":0},"generated":{"line":6701,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6702,"column":0},"generated":{"line":6702,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6703,"column":0},"generated":{"line":6703,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6704,"column":0},"generated":{"line":6704,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6705,"column":0},"generated":{"line":6705,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6706,"column":0},"generated":{"line":6706,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6707,"column":0},"generated":{"line":6707,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6708,"column":0},"generated":{"line":6708,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6709,"column":0},"generated":{"line":6709,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6710,"column":0},"generated":{"line":6710,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6711,"column":0},"generated":{"line":6711,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6712,"column":0},"generated":{"line":6712,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6713,"column":0},"generated":{"line":6713,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6714,"column":0},"generated":{"line":6714,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6715,"column":0},"generated":{"line":6715,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6716,"column":0},"generated":{"line":6716,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6717,"column":0},"generated":{"line":6717,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6718,"column":0},"generated":{"line":6718,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6719,"column":0},"generated":{"line":6719,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6720,"column":0},"generated":{"line":6720,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6721,"column":0},"generated":{"line":6721,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6722,"column":0},"generated":{"line":6722,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6723,"column":0},"generated":{"line":6723,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6724,"column":0},"generated":{"line":6724,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6725,"column":0},"generated":{"line":6725,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6726,"column":0},"generated":{"line":6726,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6727,"column":0},"generated":{"line":6727,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6728,"column":0},"generated":{"line":6728,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6729,"column":0},"generated":{"line":6729,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6730,"column":0},"generated":{"line":6730,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6731,"column":0},"generated":{"line":6731,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6732,"column":0},"generated":{"line":6732,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6733,"column":0},"generated":{"line":6733,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6734,"column":0},"generated":{"line":6734,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6735,"column":0},"generated":{"line":6735,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6736,"column":0},"generated":{"line":6736,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6737,"column":0},"generated":{"line":6737,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6738,"column":0},"generated":{"line":6738,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6739,"column":0},"generated":{"line":6739,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6740,"column":0},"generated":{"line":6740,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6741,"column":0},"generated":{"line":6741,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6742,"column":0},"generated":{"line":6742,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6743,"column":0},"generated":{"line":6743,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6744,"column":0},"generated":{"line":6744,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6745,"column":0},"generated":{"line":6745,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6746,"column":0},"generated":{"line":6746,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6747,"column":0},"generated":{"line":6747,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6748,"column":0},"generated":{"line":6748,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6749,"column":0},"generated":{"line":6749,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6750,"column":0},"generated":{"line":6750,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6751,"column":0},"generated":{"line":6751,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6752,"column":0},"generated":{"line":6752,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6753,"column":0},"generated":{"line":6753,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6754,"column":0},"generated":{"line":6754,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6755,"column":0},"generated":{"line":6755,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6756,"column":0},"generated":{"line":6756,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6757,"column":0},"generated":{"line":6757,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6758,"column":0},"generated":{"line":6758,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6759,"column":0},"generated":{"line":6759,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6760,"column":0},"generated":{"line":6760,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6761,"column":0},"generated":{"line":6761,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6762,"column":0},"generated":{"line":6762,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6763,"column":0},"generated":{"line":6763,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6764,"column":0},"generated":{"line":6764,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6765,"column":0},"generated":{"line":6765,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6766,"column":0},"generated":{"line":6766,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6767,"column":0},"generated":{"line":6767,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6768,"column":0},"generated":{"line":6768,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6769,"column":0},"generated":{"line":6769,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6770,"column":0},"generated":{"line":6770,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6771,"column":0},"generated":{"line":6771,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6772,"column":0},"generated":{"line":6772,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6773,"column":0},"generated":{"line":6773,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6774,"column":0},"generated":{"line":6774,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6775,"column":0},"generated":{"line":6775,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6776,"column":0},"generated":{"line":6776,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6777,"column":0},"generated":{"line":6777,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6778,"column":0},"generated":{"line":6778,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6779,"column":0},"generated":{"line":6779,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6780,"column":0},"generated":{"line":6780,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6781,"column":0},"generated":{"line":6781,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6782,"column":0},"generated":{"line":6782,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6783,"column":0},"generated":{"line":6783,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6784,"column":0},"generated":{"line":6784,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6785,"column":0},"generated":{"line":6785,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6786,"column":0},"generated":{"line":6786,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6787,"column":0},"generated":{"line":6787,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6788,"column":0},"generated":{"line":6788,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6789,"column":0},"generated":{"line":6789,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6790,"column":0},"generated":{"line":6790,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6791,"column":0},"generated":{"line":6791,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6792,"column":0},"generated":{"line":6792,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6793,"column":0},"generated":{"line":6793,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6794,"column":0},"generated":{"line":6794,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6795,"column":0},"generated":{"line":6795,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6796,"column":0},"generated":{"line":6796,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6797,"column":0},"generated":{"line":6797,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6798,"column":0},"generated":{"line":6798,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6799,"column":0},"generated":{"line":6799,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6800,"column":0},"generated":{"line":6800,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6801,"column":0},"generated":{"line":6801,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6802,"column":0},"generated":{"line":6802,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6803,"column":0},"generated":{"line":6803,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6804,"column":0},"generated":{"line":6804,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6805,"column":0},"generated":{"line":6805,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6806,"column":0},"generated":{"line":6806,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6807,"column":0},"generated":{"line":6807,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6808,"column":0},"generated":{"line":6808,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6809,"column":0},"generated":{"line":6809,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6810,"column":0},"generated":{"line":6810,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6811,"column":0},"generated":{"line":6811,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6812,"column":0},"generated":{"line":6812,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6813,"column":0},"generated":{"line":6813,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6814,"column":0},"generated":{"line":6814,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6815,"column":0},"generated":{"line":6815,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6816,"column":0},"generated":{"line":6816,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6817,"column":0},"generated":{"line":6817,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6818,"column":0},"generated":{"line":6818,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6819,"column":0},"generated":{"line":6819,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6820,"column":0},"generated":{"line":6820,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6821,"column":0},"generated":{"line":6821,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6822,"column":0},"generated":{"line":6822,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6823,"column":0},"generated":{"line":6823,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6824,"column":0},"generated":{"line":6824,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6825,"column":0},"generated":{"line":6825,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6826,"column":0},"generated":{"line":6826,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6827,"column":0},"generated":{"line":6827,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6828,"column":0},"generated":{"line":6828,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6829,"column":0},"generated":{"line":6829,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6830,"column":0},"generated":{"line":6830,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6831,"column":0},"generated":{"line":6831,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6832,"column":0},"generated":{"line":6832,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6833,"column":0},"generated":{"line":6833,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6834,"column":0},"generated":{"line":6834,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6835,"column":0},"generated":{"line":6835,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6836,"column":0},"generated":{"line":6836,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6837,"column":0},"generated":{"line":6837,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6838,"column":0},"generated":{"line":6838,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6839,"column":0},"generated":{"line":6839,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6840,"column":0},"generated":{"line":6840,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6841,"column":0},"generated":{"line":6841,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6842,"column":0},"generated":{"line":6842,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6843,"column":0},"generated":{"line":6843,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6844,"column":0},"generated":{"line":6844,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6845,"column":0},"generated":{"line":6845,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6846,"column":0},"generated":{"line":6846,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6847,"column":0},"generated":{"line":6847,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6848,"column":0},"generated":{"line":6848,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6849,"column":0},"generated":{"line":6849,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6850,"column":0},"generated":{"line":6850,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6851,"column":0},"generated":{"line":6851,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6852,"column":0},"generated":{"line":6852,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6853,"column":0},"generated":{"line":6853,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6854,"column":0},"generated":{"line":6854,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6855,"column":0},"generated":{"line":6855,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6856,"column":0},"generated":{"line":6856,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6857,"column":0},"generated":{"line":6857,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6858,"column":0},"generated":{"line":6858,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6859,"column":0},"generated":{"line":6859,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6860,"column":0},"generated":{"line":6860,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6861,"column":0},"generated":{"line":6861,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6862,"column":0},"generated":{"line":6862,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6863,"column":0},"generated":{"line":6863,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6864,"column":0},"generated":{"line":6864,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6865,"column":0},"generated":{"line":6865,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6866,"column":0},"generated":{"line":6866,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6867,"column":0},"generated":{"line":6867,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6868,"column":0},"generated":{"line":6868,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6869,"column":0},"generated":{"line":6869,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6870,"column":0},"generated":{"line":6870,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6871,"column":0},"generated":{"line":6871,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6872,"column":0},"generated":{"line":6872,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6873,"column":0},"generated":{"line":6873,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6874,"column":0},"generated":{"line":6874,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6875,"column":0},"generated":{"line":6875,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6876,"column":0},"generated":{"line":6876,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6877,"column":0},"generated":{"line":6877,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6878,"column":0},"generated":{"line":6878,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6879,"column":0},"generated":{"line":6879,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6880,"column":0},"generated":{"line":6880,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6881,"column":0},"generated":{"line":6881,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6882,"column":0},"generated":{"line":6882,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6883,"column":0},"generated":{"line":6883,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6884,"column":0},"generated":{"line":6884,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6885,"column":0},"generated":{"line":6885,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6886,"column":0},"generated":{"line":6886,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6887,"column":0},"generated":{"line":6887,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6888,"column":0},"generated":{"line":6888,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6889,"column":0},"generated":{"line":6889,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6890,"column":0},"generated":{"line":6890,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6891,"column":0},"generated":{"line":6891,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6892,"column":0},"generated":{"line":6892,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6893,"column":0},"generated":{"line":6893,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6894,"column":0},"generated":{"line":6894,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6895,"column":0},"generated":{"line":6895,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6896,"column":0},"generated":{"line":6896,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6897,"column":0},"generated":{"line":6897,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6898,"column":0},"generated":{"line":6898,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6899,"column":0},"generated":{"line":6899,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6900,"column":0},"generated":{"line":6900,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6901,"column":0},"generated":{"line":6901,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6902,"column":0},"generated":{"line":6902,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6903,"column":0},"generated":{"line":6903,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6904,"column":0},"generated":{"line":6904,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6905,"column":0},"generated":{"line":6905,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6906,"column":0},"generated":{"line":6906,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6907,"column":0},"generated":{"line":6907,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6908,"column":0},"generated":{"line":6908,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6909,"column":0},"generated":{"line":6909,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6910,"column":0},"generated":{"line":6910,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6911,"column":0},"generated":{"line":6911,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6912,"column":0},"generated":{"line":6912,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6913,"column":0},"generated":{"line":6913,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6914,"column":0},"generated":{"line":6914,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6915,"column":0},"generated":{"line":6915,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6916,"column":0},"generated":{"line":6916,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6917,"column":0},"generated":{"line":6917,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6918,"column":0},"generated":{"line":6918,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6919,"column":0},"generated":{"line":6919,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6920,"column":0},"generated":{"line":6920,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6921,"column":0},"generated":{"line":6921,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6922,"column":0},"generated":{"line":6922,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6923,"column":0},"generated":{"line":6923,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6924,"column":0},"generated":{"line":6924,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6925,"column":0},"generated":{"line":6925,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6926,"column":0},"generated":{"line":6926,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6927,"column":0},"generated":{"line":6927,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6928,"column":0},"generated":{"line":6928,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6929,"column":0},"generated":{"line":6929,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6930,"column":0},"generated":{"line":6930,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6931,"column":0},"generated":{"line":6931,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6932,"column":0},"generated":{"line":6932,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6933,"column":0},"generated":{"line":6933,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6934,"column":0},"generated":{"line":6934,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6935,"column":0},"generated":{"line":6935,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6936,"column":0},"generated":{"line":6936,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6937,"column":0},"generated":{"line":6937,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6938,"column":0},"generated":{"line":6938,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6939,"column":0},"generated":{"line":6939,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6940,"column":0},"generated":{"line":6940,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6941,"column":0},"generated":{"line":6941,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6942,"column":0},"generated":{"line":6942,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6943,"column":0},"generated":{"line":6943,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6944,"column":0},"generated":{"line":6944,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6945,"column":0},"generated":{"line":6945,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6946,"column":0},"generated":{"line":6946,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6947,"column":0},"generated":{"line":6947,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6948,"column":0},"generated":{"line":6948,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6949,"column":0},"generated":{"line":6949,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6950,"column":0},"generated":{"line":6950,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6951,"column":0},"generated":{"line":6951,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6952,"column":0},"generated":{"line":6952,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6953,"column":0},"generated":{"line":6953,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6954,"column":0},"generated":{"line":6954,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6955,"column":0},"generated":{"line":6955,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6956,"column":0},"generated":{"line":6956,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6957,"column":0},"generated":{"line":6957,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6958,"column":0},"generated":{"line":6958,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6959,"column":0},"generated":{"line":6959,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6960,"column":0},"generated":{"line":6960,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6961,"column":0},"generated":{"line":6961,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6962,"column":0},"generated":{"line":6962,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6963,"column":0},"generated":{"line":6963,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6964,"column":0},"generated":{"line":6964,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6965,"column":0},"generated":{"line":6965,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6966,"column":0},"generated":{"line":6966,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6967,"column":0},"generated":{"line":6967,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6968,"column":0},"generated":{"line":6968,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6969,"column":0},"generated":{"line":6969,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6970,"column":0},"generated":{"line":6970,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6971,"column":0},"generated":{"line":6971,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6972,"column":0},"generated":{"line":6972,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6973,"column":0},"generated":{"line":6973,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6974,"column":0},"generated":{"line":6974,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6975,"column":0},"generated":{"line":6975,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6976,"column":0},"generated":{"line":6976,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6977,"column":0},"generated":{"line":6977,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6978,"column":0},"generated":{"line":6978,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6979,"column":0},"generated":{"line":6979,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6980,"column":0},"generated":{"line":6980,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6981,"column":0},"generated":{"line":6981,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6982,"column":0},"generated":{"line":6982,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6983,"column":0},"generated":{"line":6983,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6984,"column":0},"generated":{"line":6984,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6985,"column":0},"generated":{"line":6985,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6986,"column":0},"generated":{"line":6986,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6987,"column":0},"generated":{"line":6987,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6988,"column":0},"generated":{"line":6988,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6989,"column":0},"generated":{"line":6989,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6990,"column":0},"generated":{"line":6990,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6991,"column":0},"generated":{"line":6991,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6992,"column":0},"generated":{"line":6992,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6993,"column":0},"generated":{"line":6993,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6994,"column":0},"generated":{"line":6994,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6995,"column":0},"generated":{"line":6995,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6996,"column":0},"generated":{"line":6996,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6997,"column":0},"generated":{"line":6997,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6998,"column":0},"generated":{"line":6998,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":6999,"column":0},"generated":{"line":6999,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7000,"column":0},"generated":{"line":7000,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7001,"column":0},"generated":{"line":7001,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7002,"column":0},"generated":{"line":7002,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7003,"column":0},"generated":{"line":7003,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7004,"column":0},"generated":{"line":7004,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7005,"column":0},"generated":{"line":7005,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7006,"column":0},"generated":{"line":7006,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7007,"column":0},"generated":{"line":7007,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7008,"column":0},"generated":{"line":7008,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7009,"column":0},"generated":{"line":7009,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7010,"column":0},"generated":{"line":7010,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7011,"column":0},"generated":{"line":7011,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7012,"column":0},"generated":{"line":7012,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7013,"column":0},"generated":{"line":7013,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7014,"column":0},"generated":{"line":7014,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7015,"column":0},"generated":{"line":7015,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7016,"column":0},"generated":{"line":7016,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7017,"column":0},"generated":{"line":7017,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7018,"column":0},"generated":{"line":7018,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7019,"column":0},"generated":{"line":7019,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7020,"column":0},"generated":{"line":7020,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7021,"column":0},"generated":{"line":7021,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7022,"column":0},"generated":{"line":7022,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7023,"column":0},"generated":{"line":7023,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7024,"column":0},"generated":{"line":7024,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7025,"column":0},"generated":{"line":7025,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7026,"column":0},"generated":{"line":7026,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7027,"column":0},"generated":{"line":7027,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7028,"column":0},"generated":{"line":7028,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7029,"column":0},"generated":{"line":7029,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7030,"column":0},"generated":{"line":7030,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7031,"column":0},"generated":{"line":7031,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7032,"column":0},"generated":{"line":7032,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7033,"column":0},"generated":{"line":7033,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7034,"column":0},"generated":{"line":7034,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7035,"column":0},"generated":{"line":7035,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7036,"column":0},"generated":{"line":7036,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7037,"column":0},"generated":{"line":7037,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7038,"column":0},"generated":{"line":7038,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7039,"column":0},"generated":{"line":7039,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7040,"column":0},"generated":{"line":7040,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7041,"column":0},"generated":{"line":7041,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7042,"column":0},"generated":{"line":7042,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7043,"column":0},"generated":{"line":7043,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7044,"column":0},"generated":{"line":7044,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7045,"column":0},"generated":{"line":7045,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7046,"column":0},"generated":{"line":7046,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7047,"column":0},"generated":{"line":7047,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7048,"column":0},"generated":{"line":7048,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7049,"column":0},"generated":{"line":7049,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7050,"column":0},"generated":{"line":7050,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7051,"column":0},"generated":{"line":7051,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7052,"column":0},"generated":{"line":7052,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7053,"column":0},"generated":{"line":7053,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7054,"column":0},"generated":{"line":7054,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7055,"column":0},"generated":{"line":7055,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7056,"column":0},"generated":{"line":7056,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7057,"column":0},"generated":{"line":7057,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7058,"column":0},"generated":{"line":7058,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7059,"column":0},"generated":{"line":7059,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7060,"column":0},"generated":{"line":7060,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7061,"column":0},"generated":{"line":7061,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7062,"column":0},"generated":{"line":7062,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7063,"column":0},"generated":{"line":7063,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7064,"column":0},"generated":{"line":7064,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7065,"column":0},"generated":{"line":7065,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7066,"column":0},"generated":{"line":7066,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7067,"column":0},"generated":{"line":7067,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7068,"column":0},"generated":{"line":7068,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7069,"column":0},"generated":{"line":7069,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7070,"column":0},"generated":{"line":7070,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7071,"column":0},"generated":{"line":7071,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7072,"column":0},"generated":{"line":7072,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7073,"column":0},"generated":{"line":7073,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7074,"column":0},"generated":{"line":7074,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7075,"column":0},"generated":{"line":7075,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7076,"column":0},"generated":{"line":7076,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7077,"column":0},"generated":{"line":7077,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7078,"column":0},"generated":{"line":7078,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7079,"column":0},"generated":{"line":7079,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7080,"column":0},"generated":{"line":7080,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7081,"column":0},"generated":{"line":7081,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7082,"column":0},"generated":{"line":7082,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7083,"column":0},"generated":{"line":7083,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7084,"column":0},"generated":{"line":7084,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7085,"column":0},"generated":{"line":7085,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7086,"column":0},"generated":{"line":7086,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7087,"column":0},"generated":{"line":7087,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7088,"column":0},"generated":{"line":7088,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7089,"column":0},"generated":{"line":7089,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7090,"column":0},"generated":{"line":7090,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7091,"column":0},"generated":{"line":7091,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7092,"column":0},"generated":{"line":7092,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7093,"column":0},"generated":{"line":7093,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7094,"column":0},"generated":{"line":7094,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7095,"column":0},"generated":{"line":7095,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7096,"column":0},"generated":{"line":7096,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7097,"column":0},"generated":{"line":7097,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7098,"column":0},"generated":{"line":7098,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7099,"column":0},"generated":{"line":7099,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7100,"column":0},"generated":{"line":7100,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7101,"column":0},"generated":{"line":7101,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7102,"column":0},"generated":{"line":7102,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7103,"column":0},"generated":{"line":7103,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7104,"column":0},"generated":{"line":7104,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7105,"column":0},"generated":{"line":7105,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7106,"column":0},"generated":{"line":7106,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7107,"column":0},"generated":{"line":7107,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7108,"column":0},"generated":{"line":7108,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7109,"column":0},"generated":{"line":7109,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7110,"column":0},"generated":{"line":7110,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7111,"column":0},"generated":{"line":7111,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7112,"column":0},"generated":{"line":7112,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7113,"column":0},"generated":{"line":7113,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7114,"column":0},"generated":{"line":7114,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7115,"column":0},"generated":{"line":7115,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7116,"column":0},"generated":{"line":7116,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7117,"column":0},"generated":{"line":7117,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7118,"column":0},"generated":{"line":7118,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7119,"column":0},"generated":{"line":7119,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7120,"column":0},"generated":{"line":7120,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7121,"column":0},"generated":{"line":7121,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7122,"column":0},"generated":{"line":7122,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7123,"column":0},"generated":{"line":7123,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7124,"column":0},"generated":{"line":7124,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7125,"column":0},"generated":{"line":7125,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7126,"column":0},"generated":{"line":7126,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7127,"column":0},"generated":{"line":7127,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7128,"column":0},"generated":{"line":7128,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7129,"column":0},"generated":{"line":7129,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7130,"column":0},"generated":{"line":7130,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7131,"column":0},"generated":{"line":7131,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7132,"column":0},"generated":{"line":7132,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7133,"column":0},"generated":{"line":7133,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7134,"column":0},"generated":{"line":7134,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7135,"column":0},"generated":{"line":7135,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7136,"column":0},"generated":{"line":7136,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7137,"column":0},"generated":{"line":7137,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7138,"column":0},"generated":{"line":7138,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7139,"column":0},"generated":{"line":7139,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7140,"column":0},"generated":{"line":7140,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7141,"column":0},"generated":{"line":7141,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7142,"column":0},"generated":{"line":7142,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7143,"column":0},"generated":{"line":7143,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7144,"column":0},"generated":{"line":7144,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7145,"column":0},"generated":{"line":7145,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7146,"column":0},"generated":{"line":7146,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7147,"column":0},"generated":{"line":7147,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7148,"column":0},"generated":{"line":7148,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7149,"column":0},"generated":{"line":7149,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7150,"column":0},"generated":{"line":7150,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7151,"column":0},"generated":{"line":7151,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7152,"column":0},"generated":{"line":7152,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7153,"column":0},"generated":{"line":7153,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7154,"column":0},"generated":{"line":7154,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7155,"column":0},"generated":{"line":7155,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7156,"column":0},"generated":{"line":7156,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7157,"column":0},"generated":{"line":7157,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7158,"column":0},"generated":{"line":7158,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7159,"column":0},"generated":{"line":7159,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7160,"column":0},"generated":{"line":7160,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7161,"column":0},"generated":{"line":7161,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7162,"column":0},"generated":{"line":7162,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7163,"column":0},"generated":{"line":7163,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7164,"column":0},"generated":{"line":7164,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7165,"column":0},"generated":{"line":7165,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7166,"column":0},"generated":{"line":7166,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7167,"column":0},"generated":{"line":7167,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7168,"column":0},"generated":{"line":7168,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7169,"column":0},"generated":{"line":7169,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7170,"column":0},"generated":{"line":7170,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7171,"column":0},"generated":{"line":7171,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7172,"column":0},"generated":{"line":7172,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7173,"column":0},"generated":{"line":7173,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7174,"column":0},"generated":{"line":7174,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7175,"column":0},"generated":{"line":7175,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7176,"column":0},"generated":{"line":7176,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7177,"column":0},"generated":{"line":7177,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7178,"column":0},"generated":{"line":7178,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7179,"column":0},"generated":{"line":7179,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7180,"column":0},"generated":{"line":7180,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7181,"column":0},"generated":{"line":7181,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7182,"column":0},"generated":{"line":7182,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7183,"column":0},"generated":{"line":7183,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7184,"column":0},"generated":{"line":7184,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7185,"column":0},"generated":{"line":7185,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7186,"column":0},"generated":{"line":7186,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7187,"column":0},"generated":{"line":7187,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7188,"column":0},"generated":{"line":7188,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7189,"column":0},"generated":{"line":7189,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7190,"column":0},"generated":{"line":7190,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7191,"column":0},"generated":{"line":7191,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7192,"column":0},"generated":{"line":7192,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7193,"column":0},"generated":{"line":7193,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7194,"column":0},"generated":{"line":7194,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7195,"column":0},"generated":{"line":7195,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7196,"column":0},"generated":{"line":7196,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7197,"column":0},"generated":{"line":7197,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7198,"column":0},"generated":{"line":7198,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7199,"column":0},"generated":{"line":7199,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7200,"column":0},"generated":{"line":7200,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7201,"column":0},"generated":{"line":7201,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7202,"column":0},"generated":{"line":7202,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7203,"column":0},"generated":{"line":7203,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7204,"column":0},"generated":{"line":7204,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7205,"column":0},"generated":{"line":7205,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7206,"column":0},"generated":{"line":7206,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7207,"column":0},"generated":{"line":7207,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7208,"column":0},"generated":{"line":7208,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7209,"column":0},"generated":{"line":7209,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7210,"column":0},"generated":{"line":7210,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7211,"column":0},"generated":{"line":7211,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7212,"column":0},"generated":{"line":7212,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7213,"column":0},"generated":{"line":7213,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7214,"column":0},"generated":{"line":7214,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7215,"column":0},"generated":{"line":7215,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7216,"column":0},"generated":{"line":7216,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7217,"column":0},"generated":{"line":7217,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7218,"column":0},"generated":{"line":7218,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7219,"column":0},"generated":{"line":7219,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7220,"column":0},"generated":{"line":7220,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7221,"column":0},"generated":{"line":7221,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7222,"column":0},"generated":{"line":7222,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7223,"column":0},"generated":{"line":7223,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7224,"column":0},"generated":{"line":7224,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7225,"column":0},"generated":{"line":7225,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7226,"column":0},"generated":{"line":7226,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7227,"column":0},"generated":{"line":7227,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7228,"column":0},"generated":{"line":7228,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7229,"column":0},"generated":{"line":7229,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7230,"column":0},"generated":{"line":7230,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7231,"column":0},"generated":{"line":7231,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7232,"column":0},"generated":{"line":7232,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7233,"column":0},"generated":{"line":7233,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7234,"column":0},"generated":{"line":7234,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7235,"column":0},"generated":{"line":7235,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7236,"column":0},"generated":{"line":7236,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7237,"column":0},"generated":{"line":7237,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7238,"column":0},"generated":{"line":7238,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7239,"column":0},"generated":{"line":7239,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7240,"column":0},"generated":{"line":7240,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7241,"column":0},"generated":{"line":7241,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7242,"column":0},"generated":{"line":7242,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7243,"column":0},"generated":{"line":7243,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7244,"column":0},"generated":{"line":7244,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7245,"column":0},"generated":{"line":7245,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7246,"column":0},"generated":{"line":7246,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7247,"column":0},"generated":{"line":7247,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7248,"column":0},"generated":{"line":7248,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7249,"column":0},"generated":{"line":7249,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7250,"column":0},"generated":{"line":7250,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7251,"column":0},"generated":{"line":7251,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7252,"column":0},"generated":{"line":7252,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7253,"column":0},"generated":{"line":7253,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7254,"column":0},"generated":{"line":7254,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7255,"column":0},"generated":{"line":7255,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7256,"column":0},"generated":{"line":7256,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7257,"column":0},"generated":{"line":7257,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7258,"column":0},"generated":{"line":7258,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7259,"column":0},"generated":{"line":7259,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7260,"column":0},"generated":{"line":7260,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7261,"column":0},"generated":{"line":7261,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7262,"column":0},"generated":{"line":7262,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7263,"column":0},"generated":{"line":7263,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7264,"column":0},"generated":{"line":7264,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7265,"column":0},"generated":{"line":7265,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7266,"column":0},"generated":{"line":7266,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7267,"column":0},"generated":{"line":7267,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7268,"column":0},"generated":{"line":7268,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7269,"column":0},"generated":{"line":7269,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7270,"column":0},"generated":{"line":7270,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7271,"column":0},"generated":{"line":7271,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7272,"column":0},"generated":{"line":7272,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7273,"column":0},"generated":{"line":7273,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7274,"column":0},"generated":{"line":7274,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7275,"column":0},"generated":{"line":7275,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7276,"column":0},"generated":{"line":7276,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7277,"column":0},"generated":{"line":7277,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7278,"column":0},"generated":{"line":7278,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7279,"column":0},"generated":{"line":7279,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7280,"column":0},"generated":{"line":7280,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7281,"column":0},"generated":{"line":7281,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7282,"column":0},"generated":{"line":7282,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7283,"column":0},"generated":{"line":7283,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7284,"column":0},"generated":{"line":7284,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7285,"column":0},"generated":{"line":7285,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7286,"column":0},"generated":{"line":7286,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7287,"column":0},"generated":{"line":7287,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7288,"column":0},"generated":{"line":7288,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7289,"column":0},"generated":{"line":7289,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7290,"column":0},"generated":{"line":7290,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7291,"column":0},"generated":{"line":7291,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7292,"column":0},"generated":{"line":7292,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7293,"column":0},"generated":{"line":7293,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7294,"column":0},"generated":{"line":7294,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7295,"column":0},"generated":{"line":7295,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7296,"column":0},"generated":{"line":7296,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7297,"column":0},"generated":{"line":7297,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7298,"column":0},"generated":{"line":7298,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7299,"column":0},"generated":{"line":7299,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7300,"column":0},"generated":{"line":7300,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7301,"column":0},"generated":{"line":7301,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7302,"column":0},"generated":{"line":7302,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7303,"column":0},"generated":{"line":7303,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7304,"column":0},"generated":{"line":7304,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7305,"column":0},"generated":{"line":7305,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7306,"column":0},"generated":{"line":7306,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7307,"column":0},"generated":{"line":7307,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7308,"column":0},"generated":{"line":7308,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7309,"column":0},"generated":{"line":7309,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7310,"column":0},"generated":{"line":7310,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7311,"column":0},"generated":{"line":7311,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7312,"column":0},"generated":{"line":7312,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7313,"column":0},"generated":{"line":7313,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7314,"column":0},"generated":{"line":7314,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7315,"column":0},"generated":{"line":7315,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7316,"column":0},"generated":{"line":7316,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7317,"column":0},"generated":{"line":7317,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7318,"column":0},"generated":{"line":7318,"column":0}},{"source":"../../node_modules/babylon/lib/index.js","original":{"line":7319,"column":0},"generated":{"line":7319,"column":0}}],"sources":{"../../node_modules/babylon/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint max-len: 0 */\n\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\nfunction makePredicate(words) {\n  words = words.split(\" \");\n  return function (str) {\n    return words.indexOf(str) >= 0;\n  };\n}\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  6: makePredicate(\"enum await\"),\n  strict: makePredicate(\"implements interface let package private protected public static yield\"),\n  strictBind: makePredicate(\"eval arguments\")\n};\n\n// And the keywords\n\nvar isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super\");\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA900-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `bin/generate-identifier-regex.js`.\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n// A second optional argument can be given to further configure\nvar defaultOptions = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var key in defaultOptions) {\n    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nvar KeywordTokenType = function (_TokenType) {\n  inherits(KeywordTokenType, _TokenType);\n\n  function KeywordTokenType(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, KeywordTokenType);\n\n    options.keyword = name;\n\n    return possibleConstructorReturn(this, _TokenType.call(this, name, options));\n  }\n\n  return KeywordTokenType;\n}(TokenType);\n\nvar BinopTokenType = function (_TokenType2) {\n  inherits(BinopTokenType, _TokenType2);\n\n  function BinopTokenType(name, prec) {\n    classCallCheck(this, BinopTokenType);\n    return possibleConstructorReturn(this, _TokenType2.call(this, name, { beforeExpr: beforeExpr, binop: prec }));\n  }\n\n  return BinopTokenType;\n}(TokenType);\n\nvar types = {\n  num: new TokenType(\"num\", { startsExpr: startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr: startsExpr }),\n  string: new TokenType(\"string\", { startsExpr: startsExpr }),\n  name: new TokenType(\"name\", { startsExpr: startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr: beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr: beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr: beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr: beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr: beforeExpr }),\n  arrow: new TokenType(\"=>\", { beforeExpr: beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr: beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr: startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  at: new TokenType(\"@\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: beforeExpr, isAssign: isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr: beforeExpr, isAssign: isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix: prefix, postfix: postfix, startsExpr: startsExpr }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  logicalOR: new BinopTokenType(\"||\", 1),\n  logicalAND: new BinopTokenType(\"&&\", 2),\n  bitwiseOR: new BinopTokenType(\"|\", 3),\n  bitwiseXOR: new BinopTokenType(\"^\", 4),\n  bitwiseAND: new BinopTokenType(\"&\", 5),\n  equality: new BinopTokenType(\"==/!=\", 6),\n  relational: new BinopTokenType(\"</>\", 7),\n  bitShift: new BinopTokenType(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: beforeExpr, binop: 9, prefix: prefix, startsExpr: startsExpr }),\n  modulo: new BinopTokenType(\"%\", 10),\n  star: new BinopTokenType(\"*\", 10),\n  slash: new BinopTokenType(\"/\", 10),\n  exponent: new TokenType(\"**\", { beforeExpr: beforeExpr, binop: 11, rightAssociative: true })\n};\n\nvar keywords = {\n  \"break\": new KeywordTokenType(\"break\"),\n  \"case\": new KeywordTokenType(\"case\", { beforeExpr: beforeExpr }),\n  \"catch\": new KeywordTokenType(\"catch\"),\n  \"continue\": new KeywordTokenType(\"continue\"),\n  \"debugger\": new KeywordTokenType(\"debugger\"),\n  \"default\": new KeywordTokenType(\"default\", { beforeExpr: beforeExpr }),\n  \"do\": new KeywordTokenType(\"do\", { isLoop: isLoop, beforeExpr: beforeExpr }),\n  \"else\": new KeywordTokenType(\"else\", { beforeExpr: beforeExpr }),\n  \"finally\": new KeywordTokenType(\"finally\"),\n  \"for\": new KeywordTokenType(\"for\", { isLoop: isLoop }),\n  \"function\": new KeywordTokenType(\"function\", { startsExpr: startsExpr }),\n  \"if\": new KeywordTokenType(\"if\"),\n  \"return\": new KeywordTokenType(\"return\", { beforeExpr: beforeExpr }),\n  \"switch\": new KeywordTokenType(\"switch\"),\n  \"throw\": new KeywordTokenType(\"throw\", { beforeExpr: beforeExpr }),\n  \"try\": new KeywordTokenType(\"try\"),\n  \"var\": new KeywordTokenType(\"var\"),\n  \"let\": new KeywordTokenType(\"let\"),\n  \"const\": new KeywordTokenType(\"const\"),\n  \"while\": new KeywordTokenType(\"while\", { isLoop: isLoop }),\n  \"with\": new KeywordTokenType(\"with\"),\n  \"new\": new KeywordTokenType(\"new\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  \"this\": new KeywordTokenType(\"this\", { startsExpr: startsExpr }),\n  \"super\": new KeywordTokenType(\"super\", { startsExpr: startsExpr }),\n  \"class\": new KeywordTokenType(\"class\"),\n  \"extends\": new KeywordTokenType(\"extends\", { beforeExpr: beforeExpr }),\n  \"export\": new KeywordTokenType(\"export\"),\n  \"import\": new KeywordTokenType(\"import\", { startsExpr: startsExpr }),\n  \"yield\": new KeywordTokenType(\"yield\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  \"null\": new KeywordTokenType(\"null\", { startsExpr: startsExpr }),\n  \"true\": new KeywordTokenType(\"true\", { startsExpr: startsExpr }),\n  \"false\": new KeywordTokenType(\"false\", { startsExpr: startsExpr }),\n  \"in\": new KeywordTokenType(\"in\", { beforeExpr: beforeExpr, binop: 7 }),\n  \"instanceof\": new KeywordTokenType(\"instanceof\", { beforeExpr: beforeExpr, binop: 7 }),\n  \"typeof\": new KeywordTokenType(\"typeof\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  \"void\": new KeywordTokenType(\"void\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  \"delete\": new KeywordTokenType(\"delete\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr })\n};\n\n// Map keyword names to token types.\nObject.keys(keywords).forEach(function (name) {\n  types[\"_\" + name] = keywords[name];\n});\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nvar types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", true),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  functionExpression: new TokContext(\"function\", true)\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  var out = this.state.context.pop();\n  if (out === types$1.braceStatement && this.curContext() === types$1.functionExpression) {\n    this.state.context.pop();\n    this.state.exprAllowed = false;\n  } else if (out === types$1.templateQuasi) {\n    this.state.exprAllowed = true;\n  } else {\n    this.state.exprAllowed = !out.isExpr;\n  }\n};\n\ntypes.name.updateContext = function (prevType) {\n  this.state.exprAllowed = false;\n\n  if (prevType === types._let || prevType === types._const || prevType === types._var) {\n    if (lineBreak.test(this.input.slice(this.state.end))) {\n      this.state.exprAllowed = true;\n    }\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = function () {\n  if (this.curContext() !== types$1.braceStatement) {\n    this.state.context.push(types$1.functionExpression);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n  this.state.exprAllowed = false;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  classCallCheck(this, Position);\n\n  this.line = line;\n  this.column = col;\n};\n\nvar SourceLocation = function SourceLocation(start, end) {\n  classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\nvar State = function () {\n  function State() {\n    classCallCheck(this, State);\n  }\n\n  State.prototype.init = function init(options, input) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.input = input;\n\n    this.potentialArrowAt = -1;\n\n    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = this.inPropertyName = this.inType = this.inClassProperty = this.noAnonFunctionType = false;\n\n    this.labels = [];\n\n    this.decorators = [];\n\n    this.tokens = [];\n\n    this.comments = [];\n\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n\n    this.pos = this.lineStart = 0;\n    this.curLine = options.startLine;\n\n    this.type = types.eof;\n    this.value = null;\n    this.start = this.end = this.pos;\n    this.startLoc = this.endLoc = this.curPosition();\n\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n\n    this.containsEsc = this.containsOctal = false;\n    this.octalPosition = null;\n\n    this.invalidTemplateEscapePosition = null;\n\n    this.exportedIdentifiers = [];\n\n    return this;\n  };\n\n  // TODO\n\n\n  // TODO\n\n\n  // Used to signify the start of a potential arrow function\n\n\n  // Flags to track whether we are in a function, a generator.\n\n\n  // Labels in scope.\n\n\n  // Leading decorators.\n\n\n  // Token store.\n\n\n  // Comment store.\n\n\n  // Comment attachment store\n\n\n  // The current position of the tokenizer in the input.\n\n\n  // Properties of the current token:\n  // Its type\n\n\n  // For tokens that include more information than their type, the value\n\n\n  // Its start and end offset\n\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n\n\n  // Position information for the previous token\n\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n\n\n  // TODO\n\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n\n\n  State.prototype.curPosition = function curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  };\n\n  State.prototype.clone = function clone(skipArrays) {\n    var state = new State();\n    for (var key in this) {\n      var val = this[key];\n\n      if ((!skipArrays || key === \"context\") && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n    return state;\n  };\n\n  return State;\n}();\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(state) {\n  classCallCheck(this, Token);\n\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\n// ## Tokenizer\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  } else {\n    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);\n  }\n}\n\nvar Tokenizer = function () {\n  function Tokenizer(options, input) {\n    classCallCheck(this, Tokenizer);\n\n    this.state = new State();\n    this.state.init(options, input);\n  }\n\n  // Move to the next token\n\n  Tokenizer.prototype.next = function next() {\n    if (!this.isLookahead) {\n      this.state.tokens.push(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  };\n\n  // TODO\n\n  Tokenizer.prototype.eat = function eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // TODO\n\n  Tokenizer.prototype.match = function match(type) {\n    return this.state.type === type;\n  };\n\n  // TODO\n\n  Tokenizer.prototype.isKeyword = function isKeyword$$1(word) {\n    return isKeyword(word);\n  };\n\n  // TODO\n\n  Tokenizer.prototype.lookahead = function lookahead() {\n    var old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    var curr = this.state.clone(true);\n    this.state = old;\n    return curr;\n  };\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  Tokenizer.prototype.setStrict = function setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  };\n\n  Tokenizer.prototype.curContext = function curContext() {\n    return this.state.context[this.state.context.length - 1];\n  };\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  Tokenizer.prototype.nextToken = function nextToken() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.input.length) return this.finishToken(types.eof);\n\n    if (curContext.override) {\n      return curContext.override(this);\n    } else {\n      return this.readToken(this.fullCharCodeAtPos());\n    }\n  };\n\n  Tokenizer.prototype.readToken = function readToken(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code) || code === 92 /* '\\' */) {\n        return this.readWord();\n      } else {\n      return this.getTokenFromCode(code);\n    }\n  };\n\n  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {\n    var code = this.input.charCodeAt(this.state.pos);\n    if (code <= 0xd7ff || code >= 0xe000) return code;\n\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    return (code << 10) + next - 0x35fdc00;\n  };\n\n  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n\n    if (!this.isLookahead) {\n      this.state.tokens.push(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  };\n\n  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {\n    var startLoc = this.state.curPosition();\n    var start = this.state.pos;\n    var end = this.input.indexOf(\"*/\", this.state.pos += 2);\n    if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    var match = void 0;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {\n    var start = this.state.pos;\n    var startLoc = this.state.curPosition();\n    var ch = this.input.charCodeAt(this.state.pos += startSkip);\n    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this.state.pos;\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  Tokenizer.prototype.skipSpace = function skipSpace() {\n    loop: while (this.state.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:case 160:\n          // ' '\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:case 8232:case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          // '/'\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              // '*'\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  Tokenizer.prototype.finishToken = function finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    var prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n\n\n  Tokenizer.prototype.readToken_dot = function readToken_dot() {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      return this.readNumber(true);\n    }\n\n    var next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 46 && next2 === 46) {\n      // 46 = dot '.'\n      this.state.pos += 3;\n      return this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      return this.finishToken(types.dot);\n    }\n  };\n\n  Tokenizer.prototype.readToken_slash = function readToken_slash() {\n    // '/'\n    if (this.state.exprAllowed) {\n      ++this.state.pos;\n      return this.readRegexp();\n    }\n\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.slash, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {\n    // '%*'\n    var type = code === 42 ? types.star : types.modulo;\n    var width = 1;\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 42) {\n      // '*'\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61) {\n      width++;\n      type = types.assign;\n    }\n\n    return this.finishOp(type, width);\n  };\n\n  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {\n    // '|&'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n    if (next === 61) return this.finishOp(types.assign, 2);\n    if (code === 124 && next === 125 && this.hasPlugin(\"flow\")) return this.finishOp(types.braceBarR, 2);\n    return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  };\n\n  Tokenizer.prototype.readToken_caret = function readToken_caret() {\n    // '^'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.bitwiseXOR, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {\n    // '+-'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken();\n      }\n      return this.finishOp(types.incDec, 2);\n    }\n\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.plusMin, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {\n    // '<>'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    var size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(types.assign, size + 1);\n      return this.finishOp(types.bitShift, size);\n    }\n\n    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      if (this.inModule) this.unexpected();\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken();\n    }\n\n    if (next === 61) {\n      // <= | >=\n      size = 2;\n    }\n\n    return this.finishOp(types.relational, size);\n  };\n\n  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {\n    // '=!'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) return this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n    if (code === 61 && next === 62) {\n      // '=>'\n      this.state.pos += 2;\n      return this.finishToken(types.arrow);\n    }\n    return this.finishOp(code === 61 ? types.eq : types.prefix, 1);\n  };\n\n  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n      case 46:\n        // '.'\n        return this.readToken_dot();\n\n      // Punctuation tokens.\n      case 40:\n        ++this.state.pos;return this.finishToken(types.parenL);\n      case 41:\n        ++this.state.pos;return this.finishToken(types.parenR);\n      case 59:\n        ++this.state.pos;return this.finishToken(types.semi);\n      case 44:\n        ++this.state.pos;return this.finishToken(types.comma);\n      case 91:\n        ++this.state.pos;return this.finishToken(types.bracketL);\n      case 93:\n        ++this.state.pos;return this.finishToken(types.bracketR);\n\n      case 123:\n        if (this.hasPlugin(\"flow\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          return this.finishOp(types.braceBarL, 2);\n        } else {\n          ++this.state.pos;\n          return this.finishToken(types.braceL);\n        }\n\n      case 125:\n        ++this.state.pos;return this.finishToken(types.braceR);\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          return this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          return this.finishToken(types.colon);\n        }\n\n      case 63:\n        ++this.state.pos;return this.finishToken(types.question);\n      case 64:\n        ++this.state.pos;return this.finishToken(types.at);\n\n      case 96:\n        // '`'\n        ++this.state.pos;\n        return this.finishToken(types.backQuote);\n\n      case 48:\n        // '0'\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n        // 1-9\n        return this.readNumber(false);\n\n      // Quotes produce strings.\n      case 34:case 39:\n        // '\"', \"'\"\n        return this.readString(code);\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case 47:\n        // '/'\n        return this.readToken_slash();\n\n      case 37:case 42:\n        // '%*'\n        return this.readToken_mult_modulo(code);\n\n      case 124:case 38:\n        // '|&'\n        return this.readToken_pipe_amp(code);\n\n      case 94:\n        // '^'\n        return this.readToken_caret();\n\n      case 43:case 45:\n        // '+-'\n        return this.readToken_plus_min(code);\n\n      case 60:case 62:\n        // '<>'\n        return this.readToken_lt_gt(code);\n\n      case 61:case 33:\n        // '=!'\n        return this.readToken_eq_excl(code);\n\n      case 126:\n        // '~'\n        return this.finishOp(types.prefix, 1);\n    }\n\n    this.raise(this.state.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  Tokenizer.prototype.finishOp = function finishOp(type, size) {\n    var str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    return this.finishToken(type, str);\n  };\n\n  Tokenizer.prototype.readRegexp = function readRegexp() {\n    var start = this.state.pos;\n    var escaped = void 0,\n        inClass = void 0;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n      var ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    var content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1();\n    if (mods) {\n      var validFlags = /^[gmsiyu]*$/;\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    }\n    return this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  Tokenizer.prototype.readInt = function readInt(radix, len) {\n    var start = this.state.pos;\n    var total = 0;\n\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this.input.charCodeAt(this.state.pos);\n      var val = void 0;\n      if (code >= 97) {\n        val = code - 97 + 10; // a\n      } else if (code >= 65) {\n        val = code - 65 + 10; // A\n      } else if (code >= 48 && code <= 57) {\n        val = code - 48; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) break;\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;\n\n    return total;\n  };\n\n  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {\n    this.state.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, \"Identifier directly after number\");\n    return this.finishToken(types.num, val);\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {\n    var start = this.state.pos;\n    var octal = this.input.charCodeAt(start) === 48; // '0'\n    var isFloat = false;\n\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    if (octal && this.state.pos == start + 1) octal = false; // number === 0\n\n    var next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !octal) {\n      // '.'\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      // 'eE'\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) ++this.state.pos; // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n    }\n\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, \"Identifier directly after number\");\n\n    var str = this.input.slice(start, this.state.pos);\n    var val = void 0;\n    if (isFloat) {\n      val = parseFloat(str);\n    } else if (!octal || str.length === 1) {\n      val = parseInt(str, 10);\n    } else if (this.state.strict) {\n      this.raise(start, \"Invalid number\");\n    } else if (/[89]/.test(str)) {\n      val = parseInt(str, 10);\n    } else {\n      val = parseInt(str, 8);\n    }\n    return this.finishToken(types.num, val);\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  Tokenizer.prototype.readCodePoint = function readCodePoint(throwOnInvalid) {\n    var ch = this.input.charCodeAt(this.state.pos);\n    var code = void 0;\n\n    if (ch === 123) {\n      // '{'\n      var codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, throwOnInvalid);\n      ++this.state.pos;\n      if (code === null) {\n        --this.state.invalidTemplateEscapePosition; // to point to the '\\'' instead of the 'u'\n      } else if (code > 0x10FFFF) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, throwOnInvalid);\n    }\n    return code;\n  };\n\n  Tokenizer.prototype.readString = function readString(quote) {\n    var out = \"\",\n        chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(this.state.start, \"Unterminated string constant\");\n      var ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 92) {\n        // '\\'\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else {\n        if (isNewLine(ch)) this.raise(this.state.start, \"Unterminated string constant\");\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  };\n\n  // Reads template string tokens.\n\n  Tokenizer.prototype.readTmplToken = function readTmplToken() {\n    var out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(this.state.start, \"Unterminated template\");\n      var ch = this.input.charCodeAt(this.state.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        // '`', '${'\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            return this.finishToken(types.dollarBraceL);\n          } else {\n            ++this.state.pos;\n            return this.finishToken(types.backQuote);\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        return this.finishToken(types.template, containsInvalid ? null : out);\n      }\n      if (ch === 92) {\n        // '\\'\n        out += this.input.slice(chunkStart, this.state.pos);\n        var escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;\n          case 10:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  };\n\n  // Used to read escaped characters\n\n  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {\n    var throwOnInvalid = !inTemplate;\n    var ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case 110:\n        return \"\\n\"; // 'n' -> '\\n'\n      case 114:\n        return \"\\r\"; // 'r' -> '\\r'\n      case 120:\n        {\n          // 'x'\n          var code = this.readHexChar(2, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n      case 117:\n        {\n          // 'u'\n          var _code = this.readCodePoint(throwOnInvalid);\n          return _code === null ? null : codePointToString(_code);\n        }\n      case 116:\n        return \"\\t\"; // 't' -> '\\t'\n      case 98:\n        return \"\\b\"; // 'b' -> '\\b'\n      case 118:\n        return \"\\x0B\"; // 'v' -> '\\u000b'\n      case 102:\n        return \"\\f\"; // 'f' -> '\\f'\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\\r\\n'\n      case 10:\n        // ' \\n'\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n        return \"\";\n      default:\n        if (ch >= 48 && ch <= 55) {\n          var codePos = this.state.pos - 1;\n          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          var octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          if (octal > 0) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              // These properties are only used to throw an error for an octal which occurs\n              // in a directive which occurs prior to a \"use strict\" directive.\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n          this.state.pos += octalStr.length - 1;\n          return String.fromCharCode(octal);\n        }\n        return String.fromCharCode(ch);\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  Tokenizer.prototype.readHexChar = function readHexChar(len, throwOnInvalid) {\n    var codePos = this.state.pos;\n    var n = this.readInt(16, len);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n    return n;\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  Tokenizer.prototype.readWord1 = function readWord1() {\n    this.state.containsEsc = false;\n    var word = \"\",\n        first = true,\n        chunkStart = this.state.pos;\n    while (this.state.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        // \"\\\"\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        var escStart = this.state.pos;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          // \"u\"\n          this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        }\n\n        ++this.state.pos;\n        var esc = this.readCodePoint(true);\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, true)) {\n          this.raise(escStart, \"Invalid Unicode escape\");\n        }\n\n        word += codePointToString(esc);\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  Tokenizer.prototype.readWord = function readWord() {\n    var word = this.readWord1();\n    var type = types.name;\n    if (!this.state.containsEsc && this.isKeyword(word)) {\n      type = keywords[word];\n    }\n    return this.finishToken(type, word);\n  };\n\n  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {\n    if (prevType === types.colon) {\n      var parent = this.curContext();\n      if (parent === types$1.braceStatement || parent === types$1.braceExpression) {\n        return !parent.isExpr;\n      }\n    }\n\n    if (prevType === types._return) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return this.curContext() === types$1.braceStatement;\n    }\n\n    return !this.state.exprAllowed;\n  };\n\n  Tokenizer.prototype.updateContext = function updateContext(prevType) {\n    var type = this.state.type;\n    var update = void 0;\n\n    if (type.keyword && prevType === types.dot) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  };\n\n  return Tokenizer;\n}();\n\nvar plugins = {};\nvar frozenDeprecatedWildcardPluginList = [\"jsx\", \"doExpressions\", \"objectRestSpread\", \"decorators\", \"classProperties\", \"exportExtensions\", \"asyncGenerators\", \"functionBind\", \"functionSent\", \"dynamicImport\", \"flow\"];\n\nvar Parser = function (_Tokenizer) {\n  inherits(Parser, _Tokenizer);\n\n  function Parser(options, input) {\n    classCallCheck(this, Parser);\n\n    options = getOptions(options);\n\n    var _this = possibleConstructorReturn(this, _Tokenizer.call(this, options, input));\n\n    _this.options = options;\n    _this.inModule = _this.options.sourceType === \"module\";\n    _this.input = input;\n    _this.plugins = _this.loadPlugins(_this.options.plugins);\n    _this.filename = options.sourceFilename;\n\n    // If enabled, skip leading hashbang line.\n    if (_this.state.pos === 0 && _this.input[0] === \"#\" && _this.input[1] === \"!\") {\n      _this.skipLineComment(2);\n    }\n    return _this;\n  }\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    if (word === \"await\") {\n      return this.inModule;\n    } else {\n      return reservedWords[6](word);\n    }\n  };\n\n  Parser.prototype.hasPlugin = function hasPlugin(name) {\n    if (this.plugins[\"*\"] && frozenDeprecatedWildcardPluginList.indexOf(name) > -1) {\n      return true;\n    }\n\n    return !!this.plugins[name];\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadAllPlugins = function loadAllPlugins() {\n    var _this2 = this;\n\n    // ensure flow plugin loads last, also ensure estree is not loaded with *\n    var pluginNames = Object.keys(plugins).filter(function (name) {\n      return name !== \"flow\" && name !== \"estree\";\n    });\n    pluginNames.push(\"flow\");\n\n    pluginNames.forEach(function (name) {\n      var plugin = plugins[name];\n      if (plugin) plugin(_this2);\n    });\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginList) {\n    // TODO: Deprecate \"*\" option in next major version of Babylon\n    if (pluginList.indexOf(\"*\") >= 0) {\n      this.loadAllPlugins();\n\n      return { \"*\": true };\n    }\n\n    var pluginMap = {};\n\n    if (pluginList.indexOf(\"flow\") >= 0) {\n      // ensure flow plugin loads last\n      pluginList = pluginList.filter(function (plugin) {\n        return plugin !== \"flow\";\n      });\n      pluginList.push(\"flow\");\n    }\n\n    if (pluginList.indexOf(\"estree\") >= 0) {\n      // ensure estree plugin loads first\n      pluginList = pluginList.filter(function (plugin) {\n        return plugin !== \"estree\";\n      });\n      pluginList.unshift(\"estree\");\n    }\n\n    for (var _iterator = pluginList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var name = _ref;\n\n      if (!pluginMap[name]) {\n        pluginMap[name] = true;\n\n        var plugin = plugins[name];\n        if (plugin) plugin(this);\n      }\n    }\n\n    return pluginMap;\n  };\n\n  Parser.prototype.parse = function parse() {\n    var file = this.startNode();\n    var program = this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(file, program);\n  };\n\n  return Parser;\n}(Tokenizer);\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\n// TODO\n\npp.addExtra = function (node, key, val) {\n  if (!node) return;\n\n  var extra = node.extra = node.extra || {};\n  extra[key] = val;\n};\n\n// TODO\n\npp.isRelational = function (op) {\n  return this.match(types.relational) && this.state.value === op;\n};\n\n// TODO\n\npp.expectRelational = function (op) {\n  if (this.isRelational(op)) {\n    this.next();\n  } else {\n    this.unexpected(null, types.relational);\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.match(types.name) && this.state.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.state.value === name && this.eat(types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name, message) {\n  if (!this.eatContextual(name)) this.unexpected(null, message);\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.match(types.eof) || this.match(types.braceR) || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n};\n\n// TODO\n\npp.isLineTerminator = function () {\n  return this.eat(types.semi) || this.canInsertSemicolon();\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error at given pos.\n\npp.expect = function (type, pos) {\n  return this.eat(type) || this.unexpected(pos, type);\n};\n\n// Raise an unexpected token error. Can take the expected token type\n// instead of a message string.\n\npp.unexpected = function (pos) {\n  var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Unexpected token\";\n\n  if (messageOrType && (typeof messageOrType === \"undefined\" ? \"undefined\" : _typeof(messageOrType)) === \"object\" && messageOrType.label) {\n    messageOrType = \"Unexpected token, expected \" + messageOrType.label;\n  }\n  this.raise(pos != null ? pos : this.state.start, messageOrType);\n};\n\n/* eslint max-len: 0 */\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function (file, program) {\n  program.sourceType = this.options.sourceType;\n\n  this.parseBlockBody(program, true, true, types.eof);\n\n  file.program = this.finishNode(program, \"Program\");\n  file.comments = this.state.comments;\n  file.tokens = this.state.tokens;\n\n  return this.finishNode(file, \"File\");\n};\n\nvar loopLabel = { kind: \"loop\" };\nvar switchLabel = { kind: \"switch\" };\n\n// TODO\n\npp$1.stmtToDirective = function (stmt) {\n  var expr = stmt.expression;\n\n  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n  var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n  var raw = this.input.slice(expr.start, expr.end);\n  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes\n\n  this.addExtra(directiveLiteral, \"raw\", raw);\n  this.addExtra(directiveLiteral, \"rawValue\", val);\n\n  directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n\n  return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function (declaration, topLevel) {\n  if (this.match(types.at)) {\n    this.parseDecorators(true);\n  }\n\n  var starttype = this.state.type;\n  var node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case types._break:case types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case types._debugger:\n      return this.parseDebuggerStatement(node);\n    case types._do:\n      return this.parseDoStatement(node);\n    case types._for:\n      return this.parseForStatement(node);\n    case types._function:\n      if (!declaration) this.unexpected();\n      return this.parseFunctionStatement(node);\n\n    case types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n\n    case types._if:\n      return this.parseIfStatement(node);\n    case types._return:\n      return this.parseReturnStatement(node);\n    case types._switch:\n      return this.parseSwitchStatement(node);\n    case types._throw:\n      return this.parseThrowStatement(node);\n    case types._try:\n      return this.parseTryStatement(node);\n\n    case types._let:\n    case types._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n\n    case types._var:\n      return this.parseVarStatement(node, starttype);\n\n    case types._while:\n      return this.parseWhileStatement(node);\n    case types._with:\n      return this.parseWithStatement(node);\n    case types.braceL:\n      return this.parseBlock();\n    case types.semi:\n      return this.parseEmptyStatement(node);\n    case types._export:\n    case types._import:\n      if (this.hasPlugin(\"dynamicImport\") && this.lookahead().type === types.parenL) break;\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) {\n          this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n        }\n\n        if (!this.inModule) {\n          this.raise(this.state.start, \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\");\n        }\n      }\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node);\n\n    case types.name:\n      if (this.state.value === \"async\") {\n        // peek ahead and see if next token is a function\n        var state = this.state.clone();\n        this.next();\n        if (this.match(types._function) && !this.canInsertSemicolon()) {\n          this.expect(types._function);\n          return this.parseFunction(node, true, false, true);\n        } else {\n          this.state = state;\n        }\n      }\n  }\n\n  // If the statement does not start with a statement keyword or a\n  // brace, it's an ExpressionStatement or LabeledStatement. We\n  // simply start parsing an expression, and afterwards, if the\n  // next token is a colon and the expression was a simple\n  // Identifier node, we switch to interpreting it as a label.\n  var maybeName = this.state.value;\n  var expr = this.parseExpression();\n\n  if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n    return this.parseLabeledStatement(node, maybeName, expr);\n  } else {\n    return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp$1.takeDecorators = function (node) {\n  if (this.state.decorators.length) {\n    node.decorators = this.state.decorators;\n    this.state.decorators = [];\n  }\n};\n\npp$1.parseDecorators = function (allowExport) {\n  while (this.match(types.at)) {\n    var decorator = this.parseDecorator();\n    this.state.decorators.push(decorator);\n  }\n\n  if (allowExport && this.match(types._export)) {\n    return;\n  }\n\n  if (!this.match(types._class)) {\n    this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n  }\n};\n\npp$1.parseDecorator = function () {\n  if (!this.hasPlugin(\"decorators\")) {\n    this.unexpected();\n  }\n  var node = this.startNode();\n  this.next();\n  node.expression = this.parseMaybeAssign();\n  return this.finishNode(node, \"Decorator\");\n};\n\npp$1.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n\n  if (this.isLineTerminator()) {\n    node.label = null;\n  } else if (!this.match(types.name)) {\n    this.unexpected();\n  } else {\n    node.label = this.parseIdentifier();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = void 0;\n  for (i = 0; i < this.state.labels.length; ++i) {\n    var lab = this.state.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.state.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp$1.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp$1.parseDoStatement = function (node) {\n  this.next();\n  this.state.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  this.eat(types.semi);\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function (node) {\n  this.next();\n  this.state.labels.push(loopLabel);\n\n  var forAwait = false;\n  if (this.hasPlugin(\"asyncGenerators\") && this.state.inAsync && this.isContextual(\"await\")) {\n    forAwait = true;\n    this.next();\n  }\n  this.expect(types.parenL);\n\n  if (this.match(types.semi)) {\n    if (forAwait) {\n      this.unexpected();\n    }\n    return this.parseFor(node, null);\n  }\n\n  if (this.match(types._var) || this.match(types._let) || this.match(types._const)) {\n    var _init = this.startNode();\n    var varKind = this.state.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      if (_init.declarations.length === 1 && !_init.declarations[0].init) {\n        return this.parseForIn(node, _init, forAwait);\n      }\n    }\n    if (forAwait) {\n      this.unexpected();\n    }\n    return this.parseFor(node, _init);\n  }\n\n  var refShorthandDefaultPos = { start: 0 };\n  var init = this.parseExpression(true, refShorthandDefaultPos);\n  if (this.match(types._in) || this.isContextual(\"of\")) {\n    var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n    this.toAssignable(init, undefined, description);\n    this.checkLVal(init, undefined, undefined, description);\n    return this.parseForIn(node, init, forAwait);\n  } else if (refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n  if (forAwait) {\n    this.unexpected();\n  }\n  return this.parseFor(node, init);\n};\n\npp$1.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp$1.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp$1.parseReturnStatement = function (node) {\n  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {\n    this.raise(this.state.start, \"'return' outside of function\");\n  }\n\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.isLineTerminator()) {\n    node.argument = null;\n  } else {\n    node.argument = this.parseExpression();\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp$1.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.state.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur = void 0;\n  for (var sawDefault; !this.match(types.braceR);) {\n    if (this.match(types._case) || this.match(types._default)) {\n      var isCase = this.match(types._case);\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types.colon);\n    } else {\n      if (cur) {\n        cur.consequent.push(this.parseStatement(true));\n      } else {\n        this.unexpected();\n      }\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.state.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp$1.parseThrowStatement = function (node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function (node) {\n  this.next();\n\n  node.block = this.parseBlock();\n  node.handler = null;\n\n  if (this.match(types._catch)) {\n    var clause = this.startNode();\n    this.next();\n\n    this.expect(types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true, Object.create(null), \"catch clause\");\n    this.expect(types.parenR);\n\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n\n  node.guardedHandlers = empty;\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n  if (!node.handler && !node.finalizer) {\n    this.raise(node.start, \"Missing catch or finally clause\");\n  }\n\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp$1.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp$1.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.state.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp$1.parseWithStatement = function (node) {\n  if (this.state.strict) this.raise(this.state.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp$1.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp$1.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var _iterator = this.state.labels, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _label = _ref;\n\n    if (_label.name === maybeName) {\n      this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    }\n  }\n\n  var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n  for (var i = this.state.labels.length - 1; i >= 0; i--) {\n    var label = this.state.labels[i];\n    if (label.statementStart === node.start) {\n      label.statementStart = this.state.start;\n      label.kind = kind;\n    } else {\n      break;\n    }\n  }\n\n  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });\n  node.body = this.parseStatement(true);\n  this.state.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp$1.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function (allowDirectives) {\n  var node = this.startNode();\n  this.expect(types.braceL);\n  this.parseBlockBody(node, allowDirectives, false, types.braceR);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\npp$1.isValidDirective = function (stmt) {\n  return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n};\n\npp$1.parseBlockBody = function (node, allowDirectives, topLevel, end) {\n  node.body = [];\n  node.directives = [];\n\n  var parsedNonDirective = false;\n  var oldStrict = void 0;\n  var octalPosition = void 0;\n\n  while (!this.eat(end)) {\n    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n      octalPosition = this.state.octalPosition;\n    }\n\n    var stmt = this.parseStatement(true, topLevel);\n\n    if (allowDirectives && !parsedNonDirective && this.isValidDirective(stmt)) {\n      var directive = this.stmtToDirective(stmt);\n      node.directives.push(directive);\n\n      if (oldStrict === undefined && directive.value.value === \"use strict\") {\n        oldStrict = this.state.strict;\n        this.setStrict(true);\n\n        if (octalPosition) {\n          this.raise(octalPosition, \"Octal literal in strict mode\");\n        }\n      }\n\n      continue;\n    }\n\n    parsedNonDirective = true;\n    node.body.push(stmt);\n  }\n\n  if (oldStrict === false) {\n    this.setStrict(false);\n  }\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.match(types.semi) ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.match(types.parenR) ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function (node, init, forAwait) {\n  var type = void 0;\n  if (forAwait) {\n    this.eatContextual(\"of\");\n    type = \"ForAwaitStatement\";\n  } else {\n    type = this.match(types._in) ? \"ForInStatement\" : \"ForOfStatement\";\n    this.next();\n  }\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarHead(decl);\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === types._const && !(this.match(types._in) || this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n      this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types.comma)) break;\n  }\n  return node;\n};\n\npp$1.parseVarHead = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true, undefined, \"variable declaration\");\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {\n  var oldInMethod = this.state.inMethod;\n  this.state.inMethod = false;\n\n  this.initFunction(node, isAsync);\n\n  if (this.match(types.star)) {\n    if (node.async && !this.hasPlugin(\"asyncGenerators\")) {\n      this.unexpected();\n    } else {\n      node.generator = true;\n      this.next();\n    }\n  }\n\n  if (isStatement && !optionalId && !this.match(types.name) && !this.match(types._yield)) {\n    this.unexpected();\n  }\n\n  if (this.match(types.name) || this.match(types._yield)) {\n    node.id = this.parseBindingIdentifier();\n  }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.state.inMethod = oldInMethod;\n\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp$1.parseFunctionParams = function (node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function (node, isStatement, optionalId) {\n  this.next();\n  this.takeDecorators(node);\n  this.parseClassId(node, isStatement, optionalId);\n  this.parseClassSuper(node);\n  this.parseClassBody(node);\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp$1.isClassProperty = function () {\n  return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n};\n\npp$1.isClassMethod = function () {\n  return this.match(types.parenL);\n};\n\npp$1.isNonstaticConstructor = function (method) {\n  return !method.computed && !method.static && (method.key.name === \"constructor\" || // Identifier\n  method.key.value === \"constructor\" // Literal\n  );\n};\n\npp$1.parseClassBody = function (node) {\n  // class bodies are implicitly strict\n  var oldStrict = this.state.strict;\n  this.state.strict = true;\n\n  var hadConstructorCall = false;\n  var hadConstructor = false;\n  var decorators = [];\n  var classBody = this.startNode();\n\n  classBody.body = [];\n\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (this.eat(types.semi)) {\n      if (decorators.length > 0) {\n        this.raise(this.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n      }\n      continue;\n    }\n\n    if (this.match(types.at)) {\n      decorators.push(this.parseDecorator());\n      continue;\n    }\n\n    var method = this.startNode();\n\n    // steal the decorators if there are any\n    if (decorators.length) {\n      method.decorators = decorators;\n      decorators = [];\n    }\n\n    method.static = false;\n    if (this.match(types.name) && this.state.value === \"static\") {\n      var key = this.parseIdentifier(true); // eats 'static'\n      if (this.isClassMethod()) {\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        this.parseClassMethod(classBody, method, false, false);\n        continue;\n      } else if (this.isClassProperty()) {\n        // a property named 'static'\n        method.computed = false;\n        method.key = key;\n        classBody.body.push(this.parseClassProperty(method));\n        continue;\n      }\n      // otherwise something static\n      method.static = true;\n    }\n\n    if (this.eat(types.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parsePropertyName(method);\n      if (this.isNonstaticConstructor(method)) {\n        this.raise(method.key.start, \"Constructor can't be a generator\");\n      }\n      if (!method.computed && method.static && (method.key.name === \"prototype\" || method.key.value === \"prototype\")) {\n        this.raise(method.key.start, \"Classes may not have static property named prototype\");\n      }\n      this.parseClassMethod(classBody, method, true, false);\n    } else {\n      var isSimple = this.match(types.name);\n      var _key = this.parsePropertyName(method);\n      if (!method.computed && method.static && (method.key.name === \"prototype\" || method.key.value === \"prototype\")) {\n        this.raise(method.key.start, \"Classes may not have static property named prototype\");\n      }\n      if (this.isClassMethod()) {\n        // a normal method\n        if (this.isNonstaticConstructor(method)) {\n          if (hadConstructor) {\n            this.raise(_key.start, \"Duplicate constructor in the same class\");\n          } else if (method.decorators) {\n            this.raise(method.start, \"You can't attach decorators to a class constructor\");\n          }\n          hadConstructor = true;\n          method.kind = \"constructor\";\n        } else {\n          method.kind = \"method\";\n        }\n        this.parseClassMethod(classBody, method, false, false);\n      } else if (this.isClassProperty()) {\n        // a normal property\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Classes may not have a non-static field named 'constructor'\");\n        }\n        classBody.body.push(this.parseClassProperty(method));\n      } else if (isSimple && _key.name === \"async\" && !this.isLineTerminator()) {\n        // an async method\n        var isGenerator = this.hasPlugin(\"asyncGenerators\") && this.eat(types.star);\n        method.kind = \"method\";\n        this.parsePropertyName(method);\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Constructor can't be an async function\");\n        }\n        this.parseClassMethod(classBody, method, isGenerator, true);\n      } else if (isSimple && (_key.name === \"get\" || _key.name === \"set\") && !(this.isLineTerminator() && this.match(types.star))) {\n        // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n        // a getter or setter\n        method.kind = _key.name;\n        this.parsePropertyName(method);\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Constructor can't have get/set modifier\");\n        }\n        this.parseClassMethod(classBody, method, false, false);\n        this.checkGetterSetterParamCount(method);\n      } else if (this.hasPlugin(\"classConstructorCall\") && isSimple && _key.name === \"call\" && this.match(types.name) && this.state.value === \"constructor\") {\n        // a (deprecated) call constructor\n        if (hadConstructorCall) {\n          this.raise(method.start, \"Duplicate constructor call in the same class\");\n        } else if (method.decorators) {\n          this.raise(method.start, \"You can't attach decorators to a class constructor\");\n        }\n        hadConstructorCall = true;\n        method.kind = \"constructorCall\";\n        this.parsePropertyName(method); // consume \"constructor\" and make it the method's name\n        this.parseClassMethod(classBody, method, false, false);\n      } else if (this.isLineTerminator()) {\n        // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Classes may not have a non-static field named 'constructor'\");\n        }\n        classBody.body.push(this.parseClassProperty(method));\n      } else {\n        this.unexpected();\n      }\n    }\n  }\n\n  if (decorators.length) {\n    this.raise(this.state.start, \"You have trailing decorators with no method\");\n  }\n\n  node.body = this.finishNode(classBody, \"ClassBody\");\n\n  this.state.strict = oldStrict;\n};\n\npp$1.parseClassProperty = function (node) {\n  this.state.inClassProperty = true;\n  if (this.match(types.eq)) {\n    if (!this.hasPlugin(\"classProperties\")) this.unexpected();\n    this.next();\n    node.value = this.parseMaybeAssign();\n  } else {\n    node.value = null;\n  }\n  this.semicolon();\n  this.state.inClassProperty = false;\n  return this.finishNode(node, \"ClassProperty\");\n};\n\npp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {\n  this.parseMethod(method, isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"ClassMethod\"));\n};\n\npp$1.parseClassId = function (node, isStatement, optionalId) {\n  if (this.match(types.name)) {\n    node.id = this.parseIdentifier();\n  } else {\n    if (optionalId || !isStatement) {\n      node.id = null;\n    } else {\n      this.unexpected();\n    }\n  }\n};\n\npp$1.parseClassSuper = function (node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.match(types.star)) {\n    var specifier = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"exportExtensions\") && this.eatContextual(\"as\")) {\n      specifier.exported = this.parseIdentifier();\n      node.specifiers = [this.finishNode(specifier, \"ExportNamespaceSpecifier\")];\n      this.parseExportSpecifiersMaybe(node);\n      this.parseExportFrom(node, true);\n    } else {\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n  } else if (this.hasPlugin(\"exportExtensions\") && this.isExportDefaultSpecifier()) {\n    var _specifier = this.startNode();\n    _specifier.exported = this.parseIdentifier(true);\n    node.specifiers = [this.finishNode(_specifier, \"ExportDefaultSpecifier\")];\n    if (this.match(types.comma) && this.lookahead().type === types.star) {\n      this.expect(types.comma);\n      var _specifier2 = this.startNode();\n      this.expect(types.star);\n      this.expectContextual(\"as\");\n      _specifier2.exported = this.parseIdentifier();\n      node.specifiers.push(this.finishNode(_specifier2, \"ExportNamespaceSpecifier\"));\n    } else {\n      this.parseExportSpecifiersMaybe(node);\n    }\n    this.parseExportFrom(node, true);\n  } else if (this.eat(types._default)) {\n    // export default ...\n    var expr = this.startNode();\n    var needsSemi = false;\n    if (this.eat(types._function)) {\n      expr = this.parseFunction(expr, true, false, false, true);\n    } else if (this.match(types._class)) {\n      expr = this.parseClass(expr, true, true);\n    } else {\n      needsSemi = true;\n      expr = this.parseMaybeAssign();\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    this.checkExport(node, true, true);\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  } else if (this.shouldParseExportDeclaration()) {\n    node.specifiers = [];\n    node.source = null;\n    node.declaration = this.parseExportDeclaration(node);\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    this.parseExportFrom(node);\n  }\n  this.checkExport(node, true);\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp$1.parseExportDeclaration = function () {\n  return this.parseStatement(true);\n};\n\npp$1.isExportDefaultSpecifier = function () {\n  if (this.match(types.name)) {\n    return this.state.value !== \"async\";\n  }\n\n  if (!this.match(types._default)) {\n    return false;\n  }\n\n  var lookahead = this.lookahead();\n  return lookahead.type === types.comma || lookahead.type === types.name && lookahead.value === \"from\";\n};\n\npp$1.parseExportSpecifiersMaybe = function (node) {\n  if (this.eat(types.comma)) {\n    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());\n  }\n};\n\npp$1.parseExportFrom = function (node, expect) {\n  if (this.eatContextual(\"from\")) {\n    node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n    this.checkExport(node);\n  } else {\n    if (expect) {\n      this.unexpected();\n    } else {\n      node.source = null;\n    }\n  }\n\n  this.semicolon();\n};\n\npp$1.shouldParseExportDeclaration = function () {\n  return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"let\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isContextual(\"async\");\n};\n\npp$1.checkExport = function (node, checkNames, isDefault) {\n  if (checkNames) {\n    // Check for duplicate exports\n    if (isDefault) {\n      // Default exports\n      this.checkDuplicateExports(node, \"default\");\n    } else if (node.specifiers && node.specifiers.length) {\n      // Named exports\n      for (var _iterator2 = node.specifiers, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var specifier = _ref2;\n\n        this.checkDuplicateExports(specifier, specifier.exported.name);\n      }\n    } else if (node.declaration) {\n      // Exported declarations\n      if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n        this.checkDuplicateExports(node, node.declaration.id.name);\n      } else if (node.declaration.type === \"VariableDeclaration\") {\n        for (var _iterator3 = node.declaration.declarations, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref3 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref3 = _i3.value;\n          }\n\n          var declaration = _ref3;\n\n          this.checkDeclaration(declaration.id);\n        }\n      }\n    }\n  }\n\n  if (this.state.decorators.length) {\n    var isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n    if (!node.declaration || !isClass) {\n      this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n    }\n    this.takeDecorators(node.declaration);\n  }\n};\n\npp$1.checkDeclaration = function (node) {\n  if (node.type === \"ObjectPattern\") {\n    for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var prop = _ref4;\n\n      this.checkDeclaration(prop);\n    }\n  } else if (node.type === \"ArrayPattern\") {\n    for (var _iterator5 = node.elements, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n      var _ref5;\n\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        _ref5 = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        _ref5 = _i5.value;\n      }\n\n      var elem = _ref5;\n\n      if (elem) {\n        this.checkDeclaration(elem);\n      }\n    }\n  } else if (node.type === \"ObjectProperty\") {\n    this.checkDeclaration(node.value);\n  } else if (node.type === \"RestElement\" || node.type === \"RestProperty\") {\n    this.checkDeclaration(node.argument);\n  } else if (node.type === \"Identifier\") {\n    this.checkDuplicateExports(node, node.name);\n  }\n};\n\npp$1.checkDuplicateExports = function (node, name) {\n  if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n    this.raiseDuplicateExportError(node, name);\n  }\n  this.state.exportedIdentifiers.push(name);\n};\n\npp$1.raiseDuplicateExportError = function (node, name) {\n  this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : \"`\" + name + \"` has already been exported. Exported identifiers must be unique.\");\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function () {\n  var nodes = [];\n  var first = true;\n  var needsFrom = void 0;\n\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    var isDefault = this.match(types._default);\n    if (isDefault && !needsFrom) needsFrom = true;\n\n    var node = this.startNode();\n    node.local = this.parseIdentifier(isDefault);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n\n  // https://github.com/ember-cli/ember-cli/pull/3739\n  if (needsFrom && !this.isContextual(\"from\")) {\n    this.unexpected();\n  }\n\n  return nodes;\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function (node) {\n  this.eat(types._import);\n\n  // import '...'\n  if (this.match(types.string)) {\n    node.specifiers = [];\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = [];\n    this.parseImportSpecifiers(node);\n    this.expectContextual(\"from\");\n    node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function (node) {\n  var first = true;\n  if (this.match(types.name)) {\n    // import defaultObj, { x, y as z } from '...'\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));\n    if (!this.eat(types.comma)) return;\n  }\n\n  if (this.match(types.star)) {\n    var specifier = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, true, undefined, \"import namespace specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportNamespaceSpecifier\"));\n    return;\n  }\n\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      // Detect an attempt to deep destructure\n      if (this.eat(types.colon)) {\n        this.unexpected(null, \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\");\n      }\n\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    this.parseImportSpecifier(node);\n  }\n};\n\npp$1.parseImportSpecifier = function (node) {\n  var specifier = this.startNode();\n  specifier.imported = this.parseIdentifier(true);\n  if (this.eatContextual(\"as\")) {\n    specifier.local = this.parseIdentifier();\n  } else {\n    this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n    specifier.local = specifier.imported.__clone();\n  }\n  this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n  node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n};\n\npp$1.parseImportSpecifierDefault = function (id, startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.local = id;\n  this.checkLVal(node.local, true, undefined, \"default import specifier\");\n  return this.finishNode(node, \"ImportDefaultSpecifier\");\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function (node, isBinding, contextDescription) {\n  if (node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var prop = _ref;\n\n          if (prop.type === \"ObjectMethod\") {\n            if (prop.kind === \"get\" || prop.kind === \"set\") {\n              this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n            } else {\n              this.raise(prop.key.start, \"Object pattern can't contain methods\");\n            }\n          } else {\n            this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isBinding, contextDescription);\n        break;\n\n      case \"SpreadProperty\":\n        node.type = \"RestProperty\";\n        var arg = node.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding, contextDescription);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        {\n          var message = \"Invalid left-hand side\" + (contextDescription ? \" in \" + contextDescription : /* istanbul ignore next */\"expression\");\n          this.raise(node.start, message);\n        }\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function (exprList, isBinding, contextDescription) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type === \"RestElement\") {\n      --end;\n    } else if (last && last.type === \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding, contextDescription);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") {\n        this.unexpected(arg.start);\n      }\n      --end;\n    }\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding, contextDescription);\n  }\n  return exprList;\n};\n\n// Convert list of expression atoms to a list of\n\npp$2.toReferencedList = function (exprList) {\n  return exprList;\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function (refShorthandDefaultPos) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp$2.parseRest = function () {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseBindingIdentifier();\n  return this.finishNode(node, \"RestElement\");\n};\n\npp$2.shouldAllowYieldIdentifier = function () {\n  return this.match(types._yield) && !this.state.strict && !this.state.inGenerator;\n};\n\npp$2.parseBindingIdentifier = function () {\n  return this.parseIdentifier(this.shouldAllowYieldIdentifier());\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function () {\n  switch (this.state.type) {\n    case types._yield:\n      if (this.state.strict || this.state.inGenerator) this.unexpected();\n    // fall-through\n    case types.name:\n      return this.parseIdentifier(true);\n\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$2.parseBindingList = function (close, allowEmpty) {\n  var elts = [];\n  var first = true;\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n    }\n    if (allowEmpty && this.match(types.comma)) {\n      elts.push(null);\n    } else if (this.eat(close)) {\n      break;\n    } else if (this.match(types.ellipsis)) {\n      elts.push(this.parseAssignableListItemTypes(this.parseRest()));\n      this.expect(close);\n      break;\n    } else {\n      var decorators = [];\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n      var left = this.parseMaybeDefault();\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n      this.parseAssignableListItemTypes(left);\n      elts.push(this.parseMaybeDefault(left.start, left.loc.start, left));\n    }\n  }\n  return elts;\n};\n\npp$2.parseAssignableListItemTypes = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function (startPos, startLoc, left) {\n  startLoc = startLoc || this.state.startLoc;\n  startPos = startPos || this.state.start;\n  left = left || this.parseBindingAtom();\n  if (!this.eat(types.eq)) return left;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp$2.checkLVal = function (expr, isBinding, checkClashes, contextDescription) {\n  switch (expr.type) {\n    case \"Identifier\":\n      this.checkReservedWord(expr.name, expr.start, false, true);\n\n      if (checkClashes) {\n        // we need to prefix this with an underscore for the cases where we have a key of\n        // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n        //\n        //   > var obj = Object.create(null);\n        //   undefined\n        //   > obj.__proto__\n        //   null\n        //   > obj.__proto__ = true;\n        //   true\n        //   > obj.__proto__\n        //   null\n        var key = \"_\" + expr.name;\n\n        if (checkClashes[key]) {\n          this.raise(expr.start, \"Argument name clash in strict mode\");\n        } else {\n          checkClashes[key] = true;\n        }\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var _iterator2 = expr.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var prop = _ref2;\n\n        if (prop.type === \"ObjectProperty\") prop = prop.value;\n        this.checkLVal(prop, isBinding, checkClashes, \"object destructuring pattern\");\n      }\n      break;\n\n    case \"ArrayPattern\":\n      for (var _iterator3 = expr.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var elem = _ref3;\n\n        if (elem) this.checkLVal(elem, isBinding, checkClashes, \"array destructuring pattern\");\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes, \"assignment pattern\");\n      break;\n\n    case \"RestProperty\":\n      this.checkLVal(expr.argument, isBinding, checkClashes, \"rest property\");\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes, \"rest element\");\n      break;\n\n    default:\n      {\n        var message = (isBinding ? /* istanbul ignore next */\"Binding invalid\" : \"Invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : /* istanbul ignore next */\"expression\");\n        this.raise(expr.start, message);\n      }\n  }\n};\n\n/* eslint max-len: 0 */\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function (prop, propHash) {\n  if (prop.computed || prop.kind) return;\n\n  var key = prop.key;\n  // It is either an Identifier or a String/NumericLiteral\n  var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n  if (name === \"__proto__\") {\n    if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n    propHash.proto = true;\n  }\n};\n\n// Convenience method to parse an Expression only\npp$3.getExpression = function () {\n  this.nextToken();\n  var expr = this.parseExpression();\n  if (!this.match(types.eof)) {\n    this.unexpected();\n  }\n  return expr;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function (s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initialization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n  if (this.match(types.comma)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) {\n      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n    }\n    this.toReferencedList(node.expressions);\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n\n  if (this.match(types._yield) && this.state.inGenerator) {\n    var _left = this.parseYield();\n    if (afterLeftParse) _left = afterLeftParse.call(this, _left, startPos, startLoc);\n    return _left;\n  }\n\n  var failOnShorthandAssign = void 0;\n  if (refShorthandDefaultPos) {\n    failOnShorthandAssign = false;\n  } else {\n    refShorthandDefaultPos = { start: 0 };\n    failOnShorthandAssign = true;\n  }\n\n  if (this.match(types.parenL) || this.match(types.name)) {\n    this.state.potentialArrowAt = this.state.start;\n  }\n\n  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.state.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.state.value;\n    node.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly\n\n    this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n    if (left.extra && left.extra.parenthesized) {\n      var errorMsg = void 0;\n      if (left.type === \"ObjectPattern\") {\n        errorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n      } else if (left.type === \"ArrayPattern\") {\n        errorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n      }\n      if (errorMsg) {\n        this.raise(left.start, \"You're trying to assign to a parenthesized expression, eg. instead of \" + errorMsg);\n      }\n    }\n\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function (noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n  return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n};\n\npp$3.parseConditional = function (expr, noIn, startPos, startLoc) {\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseMaybeUnary(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n    return expr;\n  } else {\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.state.type.binop;\n  if (prec != null && (!noIn || !this.match(types._in))) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.state.value;\n\n      if (node.operator === \"**\" && left.type === \"UnaryExpression\" && left.extra && !left.extra.parenthesizedArgument && !left.extra.parenthesized) {\n        this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n      }\n\n      var op = this.state.type;\n      this.next();\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n\n      this.finishNode(node, op === types.logicalOR || op === types.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function (refShorthandDefaultPos) {\n  if (this.state.type.prefix) {\n    var node = this.startNode();\n    var update = this.match(types.incDec);\n    node.operator = this.state.value;\n    node.prefix = true;\n    this.next();\n\n    var argType = this.state.type;\n    node.argument = this.parseMaybeUnary();\n\n    this.addExtra(node, \"parenthesizedArgument\", argType === types.parenL && (!node.argument.extra || !node.argument.extra.parenthesized));\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n    } else if (this.state.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") {\n      this.raise(node.start, \"Deleting local variable in strict mode\");\n    }\n\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseExprSubscripts(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n  while (this.state.type.postfix && !this.canInsertSemicolon()) {\n    var _node = this.startNodeAt(startPos, startLoc);\n    _node.operator = this.state.value;\n    _node.prefix = false;\n    _node.argument = expr;\n    this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n    this.next();\n    expr = this.finishNode(_node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function (refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var potentialArrowAt = this.state.potentialArrowAt;\n  var expr = this.parseExprAtom(refShorthandDefaultPos);\n\n  if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n    return expr;\n  }\n\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n    return expr;\n  }\n\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    } else if (this.eat(types.dot)) {\n      var _node2 = this.startNodeAt(startPos, startLoc);\n      _node2.object = base;\n      _node2.property = this.parseIdentifier(true);\n      _node2.computed = false;\n      base = this.finishNode(_node2, \"MemberExpression\");\n    } else if (this.eat(types.bracketL)) {\n      var _node3 = this.startNodeAt(startPos, startLoc);\n      _node3.object = base;\n      _node3.property = this.parseExpression();\n      _node3.computed = true;\n      this.expect(types.bracketR);\n      base = this.finishNode(_node3, \"MemberExpression\");\n    } else if (!noCalls && this.match(types.parenL)) {\n      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n      this.next();\n\n      var _node4 = this.startNodeAt(startPos, startLoc);\n      _node4.callee = base;\n      _node4.arguments = this.parseCallExpressionArguments(types.parenR, possibleAsync);\n      if (_node4.callee.type === \"Import\" && _node4.arguments.length !== 1) {\n        this.raise(_node4.start, \"import() requires exactly one argument\");\n      }\n      base = this.finishNode(_node4, \"CallExpression\");\n\n      if (possibleAsync && this.shouldParseAsyncArrow()) {\n        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node4);\n      } else {\n        this.toReferencedList(_node4.arguments);\n      }\n    } else if (this.match(types.backQuote)) {\n      var _node5 = this.startNodeAt(startPos, startLoc);\n      _node5.tag = base;\n      _node5.quasi = this.parseTemplate(true);\n      base = this.finishNode(_node5, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\npp$3.parseCallExpressionArguments = function (close, possibleAsyncArrow) {\n  var elts = [];\n  var innerParenStart = void 0;\n  var first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(close)) break;\n    }\n\n    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params\n    if (this.match(types.parenL) && !innerParenStart) {\n      innerParenStart = this.state.start;\n    }\n\n    elts.push(this.parseExprListItem(false, possibleAsyncArrow ? { start: 0 } : undefined, possibleAsyncArrow ? { start: 0 } : undefined));\n  }\n\n  // we found an async arrow function so let's not allow any inner parens\n  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n    this.unexpected();\n  }\n\n  return elts;\n};\n\npp$3.shouldParseAsyncArrow = function () {\n  return this.match(types.arrow);\n};\n\npp$3.parseAsyncArrowFromCallExpression = function (node, call) {\n  this.expect(types.arrow);\n  return this.parseArrowExpression(node, call.arguments, true);\n};\n\n// Parse a no-call expression (like argument of `new` or `::` operators).\n\npp$3.parseNoCallExpr = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function (refShorthandDefaultPos) {\n  var canBeArrow = this.state.potentialArrowAt === this.state.start;\n  var node = void 0;\n\n  switch (this.state.type) {\n    case types._super:\n      if (!this.state.inMethod && !this.state.inClassProperty && !this.options.allowSuperOutsideMethod) {\n        this.raise(this.state.start, \"'super' outside of function or class\");\n      }\n\n      node = this.startNode();\n      this.next();\n      if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n        this.unexpected();\n      }\n      if (this.match(types.parenL) && this.state.inMethod !== \"constructor\" && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, \"super() outside of class constructor\");\n      }\n      return this.finishNode(node, \"Super\");\n\n    case types._import:\n      if (!this.hasPlugin(\"dynamicImport\")) this.unexpected();\n\n      node = this.startNode();\n      this.next();\n      if (!this.match(types.parenL)) {\n        this.unexpected(null, types.parenL);\n      }\n      return this.finishNode(node, \"Import\");\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\");\n\n    case types._yield:\n      if (this.state.inGenerator) this.unexpected();\n\n    case types.name:\n      node = this.startNode();\n      var allowAwait = this.state.value === \"await\" && this.state.inAsync;\n      var allowYield = this.shouldAllowYieldIdentifier();\n      var id = this.parseIdentifier(allowAwait || allowYield);\n\n      if (id.name === \"await\") {\n        if (this.state.inAsync || this.inModule) {\n          return this.parseAwait(node);\n        }\n      } else if (id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n        this.next();\n        return this.parseFunction(node, false, false, true);\n      } else if (canBeArrow && id.name === \"async\" && this.match(types.name)) {\n        var params = [this.parseIdentifier()];\n        this.expect(types.arrow);\n        // let foo = bar => {};\n        return this.parseArrowExpression(node, params, true);\n      }\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        return this.parseArrowExpression(node, [id]);\n      }\n\n      return id;\n\n    case types._do:\n      if (this.hasPlugin(\"doExpressions\")) {\n        var _node6 = this.startNode();\n        this.next();\n        var oldInFunction = this.state.inFunction;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.state.inFunction = false;\n        _node6.body = this.parseBlock(false, true);\n        this.state.inFunction = oldInFunction;\n        this.state.labels = oldLabels;\n        return this.finishNode(_node6, \"DoExpression\");\n      }\n\n    case types.regexp:\n      var value = this.state.value;\n      node = this.parseLiteral(value.value, \"RegExpLiteral\");\n      node.pattern = value.pattern;\n      node.flags = value.flags;\n      return node;\n\n    case types.num:\n      return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n    case types.string:\n      return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n    case types._null:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"NullLiteral\");\n\n    case types._true:case types._false:\n      node = this.startNode();\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n\n    case types.parenL:\n      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos);\n      this.toReferencedList(node.elements);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case types.braceL:\n      return this.parseObj(false, refShorthandDefaultPos);\n\n    case types._function:\n      return this.parseFunctionExpression();\n\n    case types.at:\n      this.parseDecorators();\n\n    case types._class:\n      node = this.startNode();\n      this.takeDecorators(node);\n      return this.parseClass(node, false);\n\n    case types._new:\n      return this.parseNew();\n\n    case types.backQuote:\n      return this.parseTemplate(false);\n\n    case types.doubleColon:\n      node = this.startNode();\n      this.next();\n      node.object = null;\n      var callee = node.callee = this.parseNoCallExpr();\n      if (callee.type === \"MemberExpression\") {\n        return this.finishNode(node, \"BindExpression\");\n      } else {\n        this.raise(callee.start, \"Binding should be performed on object property.\");\n      }\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$3.parseFunctionExpression = function () {\n  var node = this.startNode();\n  var meta = this.parseIdentifier(true);\n  if (this.state.inGenerator && this.eat(types.dot) && this.hasPlugin(\"functionSent\")) {\n    return this.parseMetaProperty(node, meta, \"sent\");\n  } else {\n    return this.parseFunction(node, false);\n  }\n};\n\npp$3.parseMetaProperty = function (node, meta, propertyName) {\n  node.meta = meta;\n  node.property = this.parseIdentifier(true);\n\n  if (node.property.name !== propertyName) {\n    this.raise(node.property.start, \"The only valid meta property for new is \" + meta.name + \".\" + propertyName);\n  }\n\n  return this.finishNode(node, \"MetaProperty\");\n};\n\npp$3.parseLiteral = function (value, type, startPos, startLoc) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  this.addExtra(node, \"rawValue\", value);\n  this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n  node.value = value;\n  this.next();\n  return this.finishNode(node, type);\n};\n\npp$3.parseParenExpression = function () {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val;\n};\n\npp$3.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n\n  var val = void 0;\n  this.expect(types.parenL);\n\n  var innerStartPos = this.state.start;\n  var innerStartLoc = this.state.startLoc;\n  var exprList = [];\n  var refShorthandDefaultPos = { start: 0 };\n  var refNeedsArrowPos = { start: 0 };\n  var first = true;\n  var spreadStart = void 0;\n  var optionalCommaStart = void 0;\n\n  while (!this.match(types.parenR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma, refNeedsArrowPos.start || null);\n      if (this.match(types.parenR)) {\n        optionalCommaStart = this.state.start;\n        break;\n      }\n    }\n\n    if (this.match(types.ellipsis)) {\n      var spreadNodeStartPos = this.state.start;\n      var spreadNodeStartLoc = this.state.startLoc;\n      spreadStart = this.state.start;\n      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartPos, spreadNodeStartLoc));\n      break;\n    } else {\n      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n    }\n  }\n\n  var innerEndPos = this.state.start;\n  var innerEndLoc = this.state.startLoc;\n  this.expect(types.parenR);\n\n  var arrowNode = this.startNodeAt(startPos, startLoc);\n  if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n    for (var _iterator = exprList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var param = _ref;\n\n      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);\n    }\n\n    return this.parseArrowExpression(arrowNode, exprList);\n  }\n\n  if (!exprList.length) {\n    this.unexpected(this.state.lastTokStart);\n  }\n  if (optionalCommaStart) this.unexpected(optionalCommaStart);\n  if (spreadStart) this.unexpected(spreadStart);\n  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);\n  if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n  if (exprList.length > 1) {\n    val = this.startNodeAt(innerStartPos, innerStartLoc);\n    val.expressions = exprList;\n    this.toReferencedList(val.expressions);\n    this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n  } else {\n    val = exprList[0];\n  }\n\n  this.addExtra(val, \"parenthesized\", true);\n  this.addExtra(val, \"parenStart\", startPos);\n\n  return val;\n};\n\npp$3.shouldParseArrow = function () {\n  return !this.canInsertSemicolon();\n};\n\npp$3.parseArrow = function (node) {\n  if (this.eat(types.arrow)) {\n    return node;\n  }\n};\n\npp$3.parseParenItem = function (node) {\n  return node;\n};\n\n// New's precedence is slightly tricky. It must allow its argument\n// to be a `[]` or dot subscript expression, but not a call — at\n// least, not without wrapping it in parentheses. Thus, it uses the\n\npp$3.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdentifier(true);\n\n  if (this.eat(types.dot)) {\n    var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n    if (!this.state.inFunction) {\n      this.raise(metaProp.property.start, \"new.target can only be used in functions\");\n    }\n\n    return metaProp;\n  }\n\n  node.callee = this.parseNoCallExpr();\n\n  if (this.eat(types.parenL)) {\n    node.arguments = this.parseExprList(types.parenR);\n    this.toReferencedList(node.arguments);\n  } else {\n    node.arguments = [];\n  }\n\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function (isTagged) {\n  var elem = this.startNode();\n  if (this.state.value === null) {\n    if (!isTagged || !this.hasPlugin(\"templateInvalidEscapes\")) {\n      this.raise(this.state.invalidTemplateEscapePosition, \"Invalid escape sequence in template\");\n    } else {\n      this.state.invalidTemplateEscapePosition = null;\n    }\n  }\n  elem.value = {\n    raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n    cooked: this.state.value\n  };\n  this.next();\n  elem.tail = this.match(types.backQuote);\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp$3.parseTemplate = function (isTagged) {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement(isTagged);\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function (isPattern, refShorthandDefaultPos) {\n  var decorators = [];\n  var propHash = Object.create(null);\n  var first = true;\n  var node = this.startNode();\n\n  node.properties = [];\n  this.next();\n\n  var firstRestLocation = null;\n\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    while (this.match(types.at)) {\n      decorators.push(this.parseDecorator());\n    }\n\n    var prop = this.startNode(),\n        isGenerator = false,\n        isAsync = false,\n        startPos = void 0,\n        startLoc = void 0;\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    if (this.hasPlugin(\"objectRestSpread\") && this.match(types.ellipsis)) {\n      prop = this.parseSpread(isPattern ? { start: 0 } : undefined);\n      prop.type = isPattern ? \"RestProperty\" : \"SpreadProperty\";\n      if (isPattern) this.toAssignable(prop.argument, true, \"object pattern\");\n      node.properties.push(prop);\n      if (isPattern) {\n        var position = this.state.start;\n        if (firstRestLocation !== null) {\n          this.unexpected(firstRestLocation, \"Cannot have multiple rest elements when destructuring\");\n        } else if (this.eat(types.braceR)) {\n          break;\n        } else if (this.match(types.comma) && this.lookahead().type === types.braceR) {\n          // TODO: temporary rollback\n          // this.unexpected(position, \"A trailing comma is not permitted after the rest element\");\n          continue;\n        } else {\n          firstRestLocation = position;\n          continue;\n        }\n      } else {\n        continue;\n      }\n    }\n\n    prop.method = false;\n    prop.shorthand = false;\n\n    if (isPattern || refShorthandDefaultPos) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    if (!isPattern && this.isContextual(\"async\")) {\n      if (isGenerator) this.unexpected();\n\n      var asyncId = this.parseIdentifier();\n      if (this.match(types.colon) || this.match(types.parenL) || this.match(types.braceR) || this.match(types.eq) || this.match(types.comma)) {\n        prop.key = asyncId;\n        prop.computed = false;\n      } else {\n        isAsync = true;\n        if (this.hasPlugin(\"asyncGenerators\")) isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop);\n      }\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);\n    this.checkPropClash(prop, propHash);\n\n    if (prop.shorthand) {\n      this.addExtra(prop, \"shorthand\", true);\n    }\n\n    node.properties.push(prop);\n  }\n\n  if (firstRestLocation !== null) {\n    this.unexpected(firstRestLocation, \"The rest element has to be the last element when destructuring\");\n  }\n\n  if (decorators.length) {\n    this.raise(this.state.start, \"You have trailing decorators with no property\");\n  }\n\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp$3.isGetterOrSetterMethod = function (prop, isPattern) {\n  return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || // get \"string\"() {}\n  this.match(types.num) || // get 1() {}\n  this.match(types.bracketL) || // get [\"string\"]() {}\n  this.match(types.name) || // get foo() {}\n  this.state.type.keyword // get debugger() {}\n  );\n};\n\n// get methods aren't allowed to have any parameters\n// set methods must have exactly 1 parameter\npp$3.checkGetterSetterParamCount = function (method) {\n  var paramCount = method.kind === \"get\" ? 0 : 1;\n  if (method.params.length !== paramCount) {\n    var start = method.start;\n    if (method.kind === \"get\") {\n      this.raise(start, \"getter should have no params\");\n    } else {\n      this.raise(start, \"setter should have exactly one param\");\n    }\n  }\n};\n\npp$3.parseObjectMethod = function (prop, isGenerator, isAsync, isPattern) {\n  if (isAsync || isGenerator || this.match(types.parenL)) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"method\";\n    prop.method = true;\n    this.parseMethod(prop, isGenerator, isAsync);\n\n    return this.finishNode(prop, \"ObjectMethod\");\n  }\n\n  if (this.isGetterOrSetterMethod(prop, isPattern)) {\n    if (isGenerator || isAsync) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    this.parseMethod(prop);\n    this.checkGetterSetterParamCount(prop);\n\n    return this.finishNode(prop, \"ObjectMethod\");\n  }\n};\n\npp$3.parseObjectProperty = function (prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n\n    return this.finishNode(prop, \"ObjectProperty\");\n  }\n\n  if (!prop.computed && prop.key.type === \"Identifier\") {\n    this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n    } else if (this.match(types.eq) && refShorthandDefaultPos) {\n      if (!refShorthandDefaultPos.start) {\n        refShorthandDefaultPos.start = this.state.start;\n      }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n    } else {\n      prop.value = prop.key.__clone();\n    }\n    prop.shorthand = true;\n\n    return this.finishNode(prop, \"ObjectProperty\");\n  }\n};\n\npp$3.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {\n  var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n  if (!node) this.unexpected();\n\n  return node;\n};\n\npp$3.parsePropertyName = function (prop) {\n  if (this.eat(types.bracketL)) {\n    prop.computed = true;\n    prop.key = this.parseMaybeAssign();\n    this.expect(types.bracketR);\n  } else {\n    prop.computed = false;\n    var oldInPropertyName = this.state.inPropertyName;\n    this.state.inPropertyName = true;\n    prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    this.state.inPropertyName = oldInPropertyName;\n  }\n  return prop.key;\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function (node, isAsync) {\n  node.id = null;\n  node.generator = false;\n  node.expression = false;\n  node.async = !!isAsync;\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function (node, isGenerator, isAsync) {\n  var oldInMethod = this.state.inMethod;\n  this.state.inMethod = node.kind || true;\n  this.initFunction(node, isAsync);\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR);\n  node.generator = !!isGenerator;\n  this.parseFunctionBody(node);\n  this.state.inMethod = oldInMethod;\n  return node;\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function (node, params, isAsync) {\n  this.initFunction(node, isAsync);\n  node.params = this.toAssignableList(params, true, \"arrow function parameters\");\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\npp$3.isStrictBody = function (node, isExpression) {\n  if (!isExpression && node.body.directives.length) {\n    for (var _iterator2 = node.body.directives, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var directive = _ref2;\n\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n// Parse function body and check parameters.\npp$3.parseFunctionBody = function (node, allowExpression) {\n  var isExpression = allowExpression && !this.match(types.braceL);\n\n  var oldInAsync = this.state.inAsync;\n  this.state.inAsync = node.async;\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.state.inFunction;\n    var oldInGen = this.state.inGenerator;\n    var oldLabels = this.state.labels;\n    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;\n  }\n  this.state.inAsync = oldInAsync;\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  var isStrict = this.isStrictBody(node, isExpression);\n  // Also check when allowExpression === true for arrow functions\n  var checkLVal = this.state.strict || allowExpression || isStrict;\n\n  if (isStrict && node.id && node.id.type === \"Identifier\" && node.id.name === \"yield\") {\n    this.raise(node.id.start, \"Binding yield in strict mode\");\n  }\n\n  if (checkLVal) {\n    var nameHash = Object.create(null);\n    var oldStrict = this.state.strict;\n    if (isStrict) this.state.strict = true;\n    if (node.id) {\n      this.checkLVal(node.id, true, undefined, \"function name\");\n    }\n    for (var _iterator3 = node.params, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var param = _ref3;\n\n      if (isStrict && param.type !== \"Identifier\") {\n        this.raise(param.start, \"Non-simple parameter in strict mode\");\n      }\n      this.checkLVal(param, true, nameHash, \"function parameter list\");\n    }\n    this.state.strict = oldStrict;\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function (close, allowEmpty, refShorthandDefaultPos) {\n  var elts = [];\n  var first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(close)) break;\n    }\n\n    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n  }\n  return elts;\n};\n\npp$3.parseExprListItem = function (allowEmpty, refShorthandDefaultPos, refNeedsArrowPos) {\n  var elt = void 0;\n  if (allowEmpty && this.match(types.comma)) {\n    elt = null;\n  } else if (this.match(types.ellipsis)) {\n    elt = this.parseSpread(refShorthandDefaultPos);\n  } else {\n    elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n  }\n  return elt;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdentifier = function (liberal) {\n  var node = this.startNode();\n  if (!liberal) {\n    this.checkReservedWord(this.state.value, this.state.start, !!this.state.type.keyword, false);\n  }\n\n  if (this.match(types.name)) {\n    node.name = this.state.value;\n  } else if (this.state.type.keyword) {\n    node.name = this.state.type.keyword;\n  } else {\n    this.unexpected();\n  }\n\n  if (!liberal && node.name === \"await\" && this.state.inAsync) {\n    this.raise(node.start, \"invalid use of await inside of an async function\");\n  }\n\n  node.loc.identifierName = node.name;\n\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\npp$3.checkReservedWord = function (word, startLoc, checkKeywords, isBinding) {\n  if (this.isReservedWord(word) || checkKeywords && this.isKeyword(word)) {\n    this.raise(startLoc, word + \" is a reserved word\");\n  }\n\n  if (this.state.strict && (reservedWords.strict(word) || isBinding && reservedWords.strictBind(word))) {\n    this.raise(startLoc, word + \" is a reserved word in strict mode\");\n  }\n};\n\n// Parses await expression inside async function.\n\npp$3.parseAwait = function (node) {\n  // istanbul ignore next: this condition is checked at the call site so won't be hit here\n  if (!this.state.inAsync) {\n    this.unexpected();\n  }\n  if (this.match(types.star)) {\n    this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n  }\n  node.argument = this.parseMaybeUnary();\n  return this.finishNode(node, \"AwaitExpression\");\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.match(types.semi) || this.canInsertSemicolon() || !this.match(types.star) && !this.state.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$4 = Parser.prototype;\nvar commentKeys = [\"leadingComments\", \"trailingComments\", \"innerComments\"];\n\nvar Node = function () {\n  function Node(pos, loc, filename) {\n    classCallCheck(this, Node);\n\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (filename) this.loc.filename = filename;\n  }\n\n  Node.prototype.__clone = function __clone() {\n    var node2 = new Node();\n    for (var key in this) {\n      // Do not clone comments that are already attached to the node\n      if (commentKeys.indexOf(key) < 0) {\n        node2[key] = this[key];\n      }\n    }\n\n    return node2;\n  };\n\n  return Node;\n}();\n\npp$4.startNode = function () {\n  return new Node(this.state.start, this.state.startLoc, this.filename);\n};\n\npp$4.startNodeAt = function (pos, loc) {\n  return new Node(pos, loc, this.filename);\n};\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  node.loc.end = loc;\n  this.processComment(node);\n  return node;\n}\n\n// Finish an AST node, adding `type` and `end` properties.\n\npp$4.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp$4.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\nvar pp$5 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$5.raise = function (pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;\n  err.loc = loc;\n  throw err;\n};\n\n/* eslint max-len: 0 */\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nvar pp$6 = Parser.prototype;\n\npp$6.addComment = function (comment) {\n  if (this.filename) comment.loc.filename = this.filename;\n  this.state.trailingComments.push(comment);\n  this.state.leadingComments.push(comment);\n};\n\npp$6.processComment = function (node) {\n  if (node.type === \"Program\" && node.body.length > 0) return;\n\n  var stack = this.state.commentStack;\n\n  var firstChild = void 0,\n      lastChild = void 0,\n      trailingComments = void 0,\n      i = void 0,\n      j = void 0;\n\n  if (this.state.trailingComments.length > 0) {\n    // If the first comment in trailingComments comes after the\n    // current node, then we're good - all comments in the array will\n    // come after the node and so it's safe to add them as official\n    // trailingComments.\n    if (this.state.trailingComments[0].start >= node.end) {\n      trailingComments = this.state.trailingComments;\n      this.state.trailingComments = [];\n    } else {\n      // Otherwise, if the first comment doesn't come after the\n      // current node, that means we have a mix of leading and trailing\n      // comments in the array and that leadingComments contains the\n      // same items as trailingComments. Reset trailingComments to\n      // zero items and we'll handle this by evaluating leadingComments\n      // later.\n      this.state.trailingComments.length = 0;\n    }\n  } else {\n    var lastInStack = last(stack);\n    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n      trailingComments = lastInStack.trailingComments;\n      lastInStack.trailingComments = null;\n    }\n  }\n\n  // Eating the stack.\n  if (stack.length > 0 && last(stack).start >= node.start) {\n    firstChild = stack.pop();\n  }\n\n  while (stack.length > 0 && last(stack).start >= node.start) {\n    lastChild = stack.pop();\n  }\n\n  if (!lastChild && firstChild) lastChild = firstChild;\n\n  // Attach comments that follow a trailing comma on the last\n  // property in an object literal or a trailing comma in function arguments\n  // as trailing comments\n  if (firstChild && this.state.leadingComments.length > 0) {\n    var lastComment = last(this.state.leadingComments);\n\n    if (firstChild.type === \"ObjectProperty\") {\n      if (lastComment.start >= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n\n          if (this.state.leadingComments.length > 0) {\n            firstChild.trailingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        }\n      }\n    } else if (node.type === \"CallExpression\" && node.arguments && node.arguments.length) {\n      var lastArg = last(node.arguments);\n\n      if (lastArg && lastComment.start >= lastArg.start && lastComment.end <= node.end) {\n        if (this.state.commentPreviousNode) {\n          if (this.state.leadingComments.length > 0) {\n            lastArg.trailingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        }\n      }\n    }\n  }\n\n  if (lastChild) {\n    if (lastChild.leadingComments) {\n      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {\n        node.leadingComments = lastChild.leadingComments;\n        lastChild.leadingComments = null;\n      } else {\n        // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n        // so this takes back the leading comment.\n        // See also: https://github.com/eslint/espree/issues/158\n        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n          if (lastChild.leadingComments[i].end <= node.start) {\n            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n            break;\n          }\n        }\n      }\n    }\n  } else if (this.state.leadingComments.length > 0) {\n    if (last(this.state.leadingComments).end <= node.start) {\n      if (this.state.commentPreviousNode) {\n        for (j = 0; j < this.state.leadingComments.length; j++) {\n          if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n            this.state.leadingComments.splice(j, 1);\n            j--;\n          }\n        }\n      }\n      if (this.state.leadingComments.length > 0) {\n        node.leadingComments = this.state.leadingComments;\n        this.state.leadingComments = [];\n      }\n    } else {\n      // https://github.com/eslint/espree/issues/2\n      //\n      // In special cases, such as return (without a value) and\n      // debugger, all comments will end up as leadingComments and\n      // will otherwise be eliminated. This step runs when the\n      // commentStack is empty and there are comments left\n      // in leadingComments.\n      //\n      // This loop figures out the stopping point between the actual\n      // leading and trailing comments by finding the location of the\n      // first comment that comes after the given node.\n      for (i = 0; i < this.state.leadingComments.length; i++) {\n        if (this.state.leadingComments[i].end > node.start) {\n          break;\n        }\n      }\n\n      // Split the array based on the location of the first comment\n      // that comes after the node. Keep in mind that this could\n      // result in an empty array, and if so, the array must be\n      // deleted.\n      node.leadingComments = this.state.leadingComments.slice(0, i);\n      if (node.leadingComments.length === 0) {\n        node.leadingComments = null;\n      }\n\n      // Similarly, trailing comments are attached later. The variable\n      // must be reset to null if there are no trailing comments.\n      trailingComments = this.state.leadingComments.slice(i);\n      if (trailingComments.length === 0) {\n        trailingComments = null;\n      }\n    }\n  }\n\n  this.state.commentPreviousNode = node;\n\n  if (trailingComments) {\n    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n      node.innerComments = trailingComments;\n    } else {\n      node.trailingComments = trailingComments;\n    }\n  }\n\n  stack.push(node);\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.estreeParseRegExpLiteral = function (_ref) {\n  var pattern = _ref.pattern,\n      flags = _ref.flags;\n\n  var regex = null;\n  try {\n    regex = new RegExp(pattern, flags);\n  } catch (e) {\n    // In environments that don't support these flags value will\n    // be null as the regex can't be represented natively.\n  }\n  var node = this.estreeParseLiteral(regex);\n  node.regex = { pattern: pattern, flags: flags };\n\n  return node;\n};\n\npp$7.estreeParseLiteral = function (value) {\n  return this.parseLiteral(value, \"Literal\");\n};\n\npp$7.directiveToStmt = function (directive) {\n  var directiveLiteral = directive.value;\n\n  var stmt = this.startNodeAt(directive.start, directive.loc.start);\n  var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n\n  expression.value = directiveLiteral.value;\n  expression.raw = directiveLiteral.extra.raw;\n\n  stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n  stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n  return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n};\n\nfunction isSimpleProperty(node) {\n  return node && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estreePlugin = function (instance) {\n  instance.extend(\"checkDeclaration\", function (inner) {\n    return function (node) {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(node.value);\n      } else {\n        inner.call(this, node);\n      }\n    };\n  });\n\n  instance.extend(\"checkGetterSetterParamCount\", function () {\n    return function (prop) {\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.start;\n        if (prop.kind === \"get\") {\n          this.raise(start, \"getter should have no params\");\n        } else {\n          this.raise(start, \"setter should have exactly one param\");\n        }\n      }\n    };\n  });\n\n  instance.extend(\"checkLVal\", function (inner) {\n    return function (expr, isBinding, checkClashes) {\n      var _this = this;\n\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(function (prop) {\n            _this.checkLVal(prop.type === \"Property\" ? prop.value : prop, isBinding, checkClashes, \"object destructuring pattern\");\n          });\n          break;\n        default:\n          for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n            args[_key - 3] = arguments[_key];\n          }\n\n          inner.call.apply(inner, [this, expr, isBinding, checkClashes].concat(args));\n      }\n    };\n  });\n\n  instance.extend(\"checkPropClash\", function () {\n    return function (prop, propHash) {\n      if (prop.computed || !isSimpleProperty(prop)) return;\n\n      var key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\") {\n        if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n        propHash.proto = true;\n      }\n    };\n  });\n\n  instance.extend(\"isStrictBody\", function () {\n    return function (node, isExpression) {\n      if (!isExpression && node.body.body.length > 0) {\n        for (var _iterator = node.body.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          var directive = _ref2;\n\n          if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n            if (directive.expression.value === \"use strict\") return true;\n          } else {\n            // Break for the first non literal expression\n            break;\n          }\n        }\n      }\n\n      return false;\n    };\n  });\n\n  instance.extend(\"isValidDirective\", function () {\n    return function (stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n    };\n  });\n\n  instance.extend(\"stmtToDirective\", function (inner) {\n    return function (stmt) {\n      var directive = inner.call(this, stmt);\n      var value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    };\n  });\n\n  instance.extend(\"parseBlockBody\", function (inner) {\n    return function (node) {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      inner.call.apply(inner, [this, node].concat(args));\n\n      node.directives.reverse().forEach(function (directive) {\n        node.body.unshift(_this2.directiveToStmt(directive));\n      });\n      delete node.directives;\n    };\n  });\n\n  instance.extend(\"parseClassMethod\", function () {\n    return function (classBody, method, isGenerator, isAsync) {\n      this.parseMethod(method, isGenerator, isAsync);\n      if (method.typeParameters) {\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n    };\n  });\n\n  instance.extend(\"parseExprAtom\", function (inner) {\n    return function () {\n      switch (this.state.type) {\n        case types.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case types.num:\n        case types.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case types._null:\n          return this.estreeParseLiteral(null);\n\n        case types._true:\n          return this.estreeParseLiteral(true);\n\n        case types._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          return inner.call.apply(inner, [this].concat(args));\n      }\n    };\n  });\n\n  instance.extend(\"parseLiteral\", function (inner) {\n    return function () {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseMethod\", function (inner) {\n    return function (node) {\n      var funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so inner method correctly sets state\n\n      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      funcNode = inner.call.apply(inner, [this, funcNode].concat(args));\n      delete funcNode.kind;\n      node.value = this.finishNode(funcNode, \"FunctionExpression\");\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseObjectMethod\", function (inner) {\n    return function () {\n      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n\n      if (node) {\n        if (node.kind === \"method\") node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseObjectProperty\", function (inner) {\n    return function () {\n      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"toAssignable\", function (inner) {\n    return function (node, isBinding) {\n      for (var _len8 = arguments.length, args = Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n        args[_key8 - 2] = arguments[_key8];\n      }\n\n      if (isSimpleProperty(node)) {\n        this.toAssignable.apply(this, [node.value, isBinding].concat(args));\n\n        return node;\n      } else if (node.type === \"ObjectExpression\") {\n        node.type = \"ObjectPattern\";\n        for (var _iterator2 = node.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref3 = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref3 = _i2.value;\n          }\n\n          var prop = _ref3;\n\n          if (prop.kind === \"get\" || prop.kind === \"set\") {\n            this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          } else if (prop.method) {\n            this.raise(prop.key.start, \"Object pattern can't contain methods\");\n          } else {\n            this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n          }\n        }\n\n        return node;\n      }\n\n      return inner.call.apply(inner, [this, node, isBinding].concat(args));\n    };\n  });\n};\n\n/* eslint max-len: 0 */\n\nvar primitiveTypes = [\"any\", \"mixed\", \"empty\", \"bool\", \"boolean\", \"number\", \"string\", \"void\", \"null\"];\n\nvar pp$8 = Parser.prototype;\n\npp$8.flowParseTypeInitialiser = function (tok) {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  this.expect(tok || types.colon);\n\n  var type = this.flowParseType();\n  this.state.inType = oldInType;\n  return type;\n};\n\npp$8.flowParsePredicate = function () {\n  var node = this.startNode();\n  var moduloLoc = this.state.startLoc;\n  var moduloPos = this.state.start;\n  this.expect(types.modulo);\n  var checksLoc = this.state.startLoc;\n  this.expectContextual(\"checks\");\n  // Force '%' and 'checks' to be adjacent\n  if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n    this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n  }\n  if (this.eat(types.parenL)) {\n    node.expression = this.parseExpression();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"DeclaredPredicate\");\n  } else {\n    return this.finishNode(node, \"InferredPredicate\");\n  }\n};\n\npp$8.flowParseTypeAndPredicateInitialiser = function () {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  this.expect(types.colon);\n  var type = null;\n  var predicate = null;\n  if (this.match(types.modulo)) {\n    this.state.inType = oldInType;\n    predicate = this.flowParsePredicate();\n  } else {\n    type = this.flowParseType();\n    this.state.inType = oldInType;\n    if (this.match(types.modulo)) {\n      predicate = this.flowParsePredicate();\n    }\n  }\n  return [type, predicate];\n};\n\npp$8.flowParseDeclareClass = function (node) {\n  this.next();\n  this.flowParseInterfaceish(node, true);\n  return this.finishNode(node, \"DeclareClass\");\n};\n\npp$8.flowParseDeclareFunction = function (node) {\n  this.next();\n\n  var id = node.id = this.parseIdentifier();\n\n  var typeNode = this.startNode();\n  var typeContainer = this.startNode();\n\n  if (this.isRelational(\"<\")) {\n    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    typeNode.typeParameters = null;\n  }\n\n  this.expect(types.parenL);\n  var tmp = this.flowParseFunctionTypeParams();\n  typeNode.params = tmp.params;\n  typeNode.rest = tmp.rest;\n  this.expect(types.parenR);\n  var predicate = null;\n\n  var _flowParseTypeAndPred = this.flowParseTypeAndPredicateInitialiser();\n\n  typeNode.returnType = _flowParseTypeAndPred[0];\n  predicate = _flowParseTypeAndPred[1];\n\n  typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n  typeContainer.predicate = predicate;\n  id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n  this.finishNode(id, id.type);\n\n  this.semicolon();\n\n  return this.finishNode(node, \"DeclareFunction\");\n};\n\npp$8.flowParseDeclare = function (node) {\n  if (this.match(types._class)) {\n    return this.flowParseDeclareClass(node);\n  } else if (this.match(types._function)) {\n    return this.flowParseDeclareFunction(node);\n  } else if (this.match(types._var)) {\n    return this.flowParseDeclareVariable(node);\n  } else if (this.isContextual(\"module\")) {\n    if (this.lookahead().type === types.dot) {\n      return this.flowParseDeclareModuleExports(node);\n    } else {\n      return this.flowParseDeclareModule(node);\n    }\n  } else if (this.isContextual(\"type\")) {\n    return this.flowParseDeclareTypeAlias(node);\n  } else if (this.isContextual(\"opaque\")) {\n    return this.flowParseDeclareOpaqueType(node);\n  } else if (this.isContextual(\"interface\")) {\n    return this.flowParseDeclareInterface(node);\n  } else if (this.match(types._export)) {\n    return this.flowParseDeclareExportDeclaration(node);\n  } else {\n    this.unexpected();\n  }\n};\n\npp$8.flowParseDeclareExportDeclaration = function (node) {\n  this.expect(types._export);\n  if (this.isContextual(\"opaque\") // declare export opaque ...\n  ) {\n      node.declaration = this.flowParseDeclare(this.startNode());\n      node.default = false;\n\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    }\n\n  throw this.unexpected();\n};\n\npp$8.flowParseDeclareVariable = function (node) {\n  this.next();\n  node.id = this.flowParseTypeAnnotatableIdentifier();\n  this.semicolon();\n  return this.finishNode(node, \"DeclareVariable\");\n};\n\npp$8.flowParseDeclareModule = function (node) {\n  this.next();\n\n  if (this.match(types.string)) {\n    node.id = this.parseExprAtom();\n  } else {\n    node.id = this.parseIdentifier();\n  }\n\n  var bodyNode = node.body = this.startNode();\n  var body = bodyNode.body = [];\n  this.expect(types.braceL);\n  while (!this.match(types.braceR)) {\n    var _bodyNode = this.startNode();\n\n    if (this.match(types._import)) {\n      var lookahead = this.lookahead();\n      if (lookahead.value !== \"type\" && lookahead.value !== \"typeof\") {\n        this.unexpected(null, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n      }\n\n      this.parseImport(_bodyNode);\n    } else {\n      this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n\n      _bodyNode = this.flowParseDeclare(_bodyNode, true);\n    }\n\n    body.push(_bodyNode);\n  }\n  this.expect(types.braceR);\n\n  this.finishNode(bodyNode, \"BlockStatement\");\n  return this.finishNode(node, \"DeclareModule\");\n};\n\npp$8.flowParseDeclareModuleExports = function (node) {\n  this.expectContextual(\"module\");\n  this.expect(types.dot);\n  this.expectContextual(\"exports\");\n  node.typeAnnotation = this.flowParseTypeAnnotation();\n  this.semicolon();\n\n  return this.finishNode(node, \"DeclareModuleExports\");\n};\n\npp$8.flowParseDeclareTypeAlias = function (node) {\n  this.next();\n  this.flowParseTypeAlias(node);\n  return this.finishNode(node, \"DeclareTypeAlias\");\n};\n\npp$8.flowParseDeclareOpaqueType = function (node) {\n  this.next();\n  this.flowParseOpaqueType(node, true);\n  return this.finishNode(node, \"DeclareOpaqueType\");\n};\n\npp$8.flowParseDeclareInterface = function (node) {\n  this.next();\n  this.flowParseInterfaceish(node);\n  return this.finishNode(node, \"DeclareInterface\");\n};\n\n// Interfaces\n\npp$8.flowParseInterfaceish = function (node) {\n  node.id = this.parseIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  node.extends = [];\n  node.mixins = [];\n\n  if (this.eat(types._extends)) {\n    do {\n      node.extends.push(this.flowParseInterfaceExtends());\n    } while (this.eat(types.comma));\n  }\n\n  if (this.isContextual(\"mixins\")) {\n    this.next();\n    do {\n      node.mixins.push(this.flowParseInterfaceExtends());\n    } while (this.eat(types.comma));\n  }\n\n  node.body = this.flowParseObjectType(true, false, false);\n};\n\npp$8.flowParseInterfaceExtends = function () {\n  var node = this.startNode();\n\n  node.id = this.flowParseQualifiedTypeIdentifier();\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterInstantiation();\n  } else {\n    node.typeParameters = null;\n  }\n\n  return this.finishNode(node, \"InterfaceExtends\");\n};\n\npp$8.flowParseInterface = function (node) {\n  this.flowParseInterfaceish(node, false);\n  return this.finishNode(node, \"InterfaceDeclaration\");\n};\n\npp$8.flowParseRestrictedIdentifier = function (liberal) {\n  if (primitiveTypes.indexOf(this.state.value) > -1) {\n    this.raise(this.state.start, \"Cannot overwrite primitive type \" + this.state.value);\n  }\n\n  return this.parseIdentifier(liberal);\n};\n\n// Type aliases\n\npp$8.flowParseTypeAlias = function (node) {\n  node.id = this.flowParseRestrictedIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  node.right = this.flowParseTypeInitialiser(types.eq);\n  this.semicolon();\n\n  return this.finishNode(node, \"TypeAlias\");\n};\n\n// Opaque type aliases\n\npp$8.flowParseOpaqueType = function (node, declare) {\n  this.expectContextual(\"type\");\n  node.id = this.flowParseRestrictedIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  // Parse the supertype\n  node.supertype = null;\n  if (this.match(types.colon)) {\n    node.supertype = this.flowParseTypeInitialiser(types.colon);\n  }\n\n  node.impltype = null;\n  if (!declare) {\n    node.impltype = this.flowParseTypeInitialiser(types.eq);\n  }\n  this.semicolon();\n\n  return this.finishNode(node, \"OpaqueType\");\n};\n\n// Type annotations\n\npp$8.flowParseTypeParameter = function () {\n  var node = this.startNode();\n\n  var variance = this.flowParseVariance();\n\n  var ident = this.flowParseTypeAnnotatableIdentifier();\n  node.name = ident.name;\n  node.variance = variance;\n  node.bound = ident.typeAnnotation;\n\n  if (this.match(types.eq)) {\n    this.eat(types.eq);\n    node.default = this.flowParseType();\n  }\n\n  return this.finishNode(node, \"TypeParameter\");\n};\n\npp$8.flowParseTypeParameterDeclaration = function () {\n  var oldInType = this.state.inType;\n  var node = this.startNode();\n  node.params = [];\n\n  this.state.inType = true;\n\n  // istanbul ignore else: this condition is already checked at all call sites\n  if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n    this.next();\n  } else {\n    this.unexpected();\n  }\n\n  do {\n    node.params.push(this.flowParseTypeParameter());\n    if (!this.isRelational(\">\")) {\n      this.expect(types.comma);\n    }\n  } while (!this.isRelational(\">\"));\n  this.expectRelational(\">\");\n\n  this.state.inType = oldInType;\n\n  return this.finishNode(node, \"TypeParameterDeclaration\");\n};\n\npp$8.flowParseTypeParameterInstantiation = function () {\n  var node = this.startNode();\n  var oldInType = this.state.inType;\n  node.params = [];\n\n  this.state.inType = true;\n\n  this.expectRelational(\"<\");\n  while (!this.isRelational(\">\")) {\n    node.params.push(this.flowParseType());\n    if (!this.isRelational(\">\")) {\n      this.expect(types.comma);\n    }\n  }\n  this.expectRelational(\">\");\n\n  this.state.inType = oldInType;\n\n  return this.finishNode(node, \"TypeParameterInstantiation\");\n};\n\npp$8.flowParseObjectPropertyKey = function () {\n  return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n};\n\npp$8.flowParseObjectTypeIndexer = function (node, isStatic, variance) {\n  node.static = isStatic;\n\n  this.expect(types.bracketL);\n  if (this.lookahead().type === types.colon) {\n    node.id = this.flowParseObjectPropertyKey();\n    node.key = this.flowParseTypeInitialiser();\n  } else {\n    node.id = null;\n    node.key = this.flowParseType();\n  }\n  this.expect(types.bracketR);\n  node.value = this.flowParseTypeInitialiser();\n  node.variance = variance;\n\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeIndexer\");\n};\n\npp$8.flowParseObjectTypeMethodish = function (node) {\n  node.params = [];\n  node.rest = null;\n  node.typeParameters = null;\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  }\n\n  this.expect(types.parenL);\n  while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n    node.params.push(this.flowParseFunctionTypeParam());\n    if (!this.match(types.parenR)) {\n      this.expect(types.comma);\n    }\n  }\n\n  if (this.eat(types.ellipsis)) {\n    node.rest = this.flowParseFunctionTypeParam();\n  }\n  this.expect(types.parenR);\n  node.returnType = this.flowParseTypeInitialiser();\n\n  return this.finishNode(node, \"FunctionTypeAnnotation\");\n};\n\npp$8.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));\n  node.static = isStatic;\n  node.key = key;\n  node.optional = false;\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeProperty\");\n};\n\npp$8.flowParseObjectTypeCallProperty = function (node, isStatic) {\n  var valueNode = this.startNode();\n  node.static = isStatic;\n  node.value = this.flowParseObjectTypeMethodish(valueNode);\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeCallProperty\");\n};\n\npp$8.flowParseObjectType = function (allowStatic, allowExact, allowSpread) {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n\n  var nodeStart = this.startNode();\n  var node = void 0;\n  var propertyKey = void 0;\n  var isStatic = false;\n\n  nodeStart.callProperties = [];\n  nodeStart.properties = [];\n  nodeStart.indexers = [];\n\n  var endDelim = void 0;\n  var exact = void 0;\n  if (allowExact && this.match(types.braceBarL)) {\n    this.expect(types.braceBarL);\n    endDelim = types.braceBarR;\n    exact = true;\n  } else {\n    this.expect(types.braceL);\n    endDelim = types.braceR;\n    exact = false;\n  }\n\n  nodeStart.exact = exact;\n\n  while (!this.match(endDelim)) {\n    var optional = false;\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    node = this.startNode();\n    if (allowStatic && this.isContextual(\"static\") && this.lookahead().type !== types.colon) {\n      this.next();\n      isStatic = true;\n    }\n\n    var variancePos = this.state.start;\n    var variance = this.flowParseVariance();\n\n    if (this.match(types.bracketL)) {\n      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n    } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      if (variance) {\n        this.unexpected(variancePos);\n      }\n      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n    } else {\n      if (this.match(types.ellipsis)) {\n        if (!allowSpread) {\n          this.unexpected(null, \"Spread operator cannot appear in class or interface definitions\");\n        }\n        if (variance) {\n          this.unexpected(variance.start, \"Spread properties cannot have variance\");\n        }\n        this.expect(types.ellipsis);\n        node.argument = this.flowParseType();\n        this.flowObjectTypeSemicolon();\n        nodeStart.properties.push(this.finishNode(node, \"ObjectTypeSpreadProperty\"));\n      } else {\n        propertyKey = this.flowParseObjectPropertyKey();\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          // This is a method property\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));\n        } else {\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n          node.key = propertyKey;\n          node.value = this.flowParseTypeInitialiser();\n          node.optional = optional;\n          node.static = isStatic;\n          node.variance = variance;\n          this.flowObjectTypeSemicolon();\n          nodeStart.properties.push(this.finishNode(node, \"ObjectTypeProperty\"));\n        }\n      }\n    }\n\n    isStatic = false;\n  }\n\n  this.expect(endDelim);\n\n  var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n  this.state.inType = oldInType;\n\n  return out;\n};\n\npp$8.flowObjectTypeSemicolon = function () {\n  if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n    this.unexpected();\n  }\n};\n\npp$8.flowParseQualifiedTypeIdentifier = function (startPos, startLoc, id) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n  var node = id || this.parseIdentifier();\n\n  while (this.eat(types.dot)) {\n    var node2 = this.startNodeAt(startPos, startLoc);\n    node2.qualification = node;\n    node2.id = this.parseIdentifier();\n    node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n  }\n\n  return node;\n};\n\npp$8.flowParseGenericType = function (startPos, startLoc, id) {\n  var node = this.startNodeAt(startPos, startLoc);\n\n  node.typeParameters = null;\n  node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterInstantiation();\n  }\n\n  return this.finishNode(node, \"GenericTypeAnnotation\");\n};\n\npp$8.flowParseTypeofType = function () {\n  var node = this.startNode();\n  this.expect(types._typeof);\n  node.argument = this.flowParsePrimaryType();\n  return this.finishNode(node, \"TypeofTypeAnnotation\");\n};\n\npp$8.flowParseTupleType = function () {\n  var node = this.startNode();\n  node.types = [];\n  this.expect(types.bracketL);\n  // We allow trailing commas\n  while (this.state.pos < this.input.length && !this.match(types.bracketR)) {\n    node.types.push(this.flowParseType());\n    if (this.match(types.bracketR)) break;\n    this.expect(types.comma);\n  }\n  this.expect(types.bracketR);\n  return this.finishNode(node, \"TupleTypeAnnotation\");\n};\n\npp$8.flowParseFunctionTypeParam = function () {\n  var name = null;\n  var optional = false;\n  var typeAnnotation = null;\n  var node = this.startNode();\n  var lh = this.lookahead();\n  if (lh.type === types.colon || lh.type === types.question) {\n    name = this.parseIdentifier();\n    if (this.eat(types.question)) {\n      optional = true;\n    }\n    typeAnnotation = this.flowParseTypeInitialiser();\n  } else {\n    typeAnnotation = this.flowParseType();\n  }\n  node.name = name;\n  node.optional = optional;\n  node.typeAnnotation = typeAnnotation;\n  return this.finishNode(node, \"FunctionTypeParam\");\n};\n\npp$8.reinterpretTypeAsFunctionTypeParam = function (type) {\n  var node = this.startNodeAt(type.start, type.loc.start);\n  node.name = null;\n  node.optional = false;\n  node.typeAnnotation = type;\n  return this.finishNode(node, \"FunctionTypeParam\");\n};\n\npp$8.flowParseFunctionTypeParams = function () {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var ret = { params: params, rest: null };\n  while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n    ret.params.push(this.flowParseFunctionTypeParam());\n    if (!this.match(types.parenR)) {\n      this.expect(types.comma);\n    }\n  }\n  if (this.eat(types.ellipsis)) {\n    ret.rest = this.flowParseFunctionTypeParam();\n  }\n  return ret;\n};\n\npp$8.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {\n  switch (id.name) {\n    case \"any\":\n      return this.finishNode(node, \"AnyTypeAnnotation\");\n\n    case \"void\":\n      return this.finishNode(node, \"VoidTypeAnnotation\");\n\n    case \"bool\":\n    case \"boolean\":\n      return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n    case \"mixed\":\n      return this.finishNode(node, \"MixedTypeAnnotation\");\n\n    case \"empty\":\n      return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n    case \"number\":\n      return this.finishNode(node, \"NumberTypeAnnotation\");\n\n    case \"string\":\n      return this.finishNode(node, \"StringTypeAnnotation\");\n\n    default:\n      return this.flowParseGenericType(startPos, startLoc, id);\n  }\n};\n\n// The parsing of types roughly parallels the parsing of expressions, and\n// primary types are kind of like primary expressions...they're the\n// primitives with which other types are constructed.\npp$8.flowParsePrimaryType = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var node = this.startNode();\n  var tmp = void 0;\n  var type = void 0;\n  var isGroupedType = false;\n  var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n  switch (this.state.type) {\n    case types.name:\n      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n    case types.braceL:\n      return this.flowParseObjectType(false, false, true);\n\n    case types.braceBarL:\n      return this.flowParseObjectType(false, true, true);\n\n    case types.bracketL:\n      return this.flowParseTupleType();\n\n    case types.relational:\n      if (this.state.value === \"<\") {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(types.parenL);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n\n        this.expect(types.arrow);\n\n        node.returnType = this.flowParseType();\n\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      break;\n\n    case types.parenL:\n      this.next();\n\n      // Check to see if this is actually a grouped type\n      if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        if (this.match(types.name)) {\n          var token = this.lookahead().type;\n          isGroupedType = token !== types.question && token !== types.colon;\n        } else {\n          isGroupedType = true;\n        }\n      }\n\n      if (isGroupedType) {\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n        // A `,` or a `) =>` means this is an anonymous function type\n        if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n          this.expect(types.parenR);\n          return type;\n        } else {\n          // Eat a comma if there is one\n          this.eat(types.comma);\n        }\n      }\n\n      if (type) {\n        tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n      } else {\n        tmp = this.flowParseFunctionTypeParams();\n      }\n\n      node.params = tmp.params;\n      node.rest = tmp.rest;\n\n      this.expect(types.parenR);\n\n      this.expect(types.arrow);\n\n      node.returnType = this.flowParseType();\n\n      node.typeParameters = null;\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n    case types.string:\n      return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n    case types._true:case types._false:\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n    case types.plusMin:\n      if (this.state.value === \"-\") {\n        this.next();\n        if (!this.match(types.num)) this.unexpected(null, \"Unexpected token, expected number\");\n\n        return this.parseLiteral(-this.state.value, \"NumericLiteralTypeAnnotation\", node.start, node.loc.start);\n      }\n\n      this.unexpected();\n    case types.num:\n      return this.parseLiteral(this.state.value, \"NumericLiteralTypeAnnotation\");\n\n    case types._null:\n      node.value = this.match(types._null);\n      this.next();\n      return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n    case types._this:\n      node.value = this.match(types._this);\n      this.next();\n      return this.finishNode(node, \"ThisTypeAnnotation\");\n\n    case types.star:\n      this.next();\n      return this.finishNode(node, \"ExistentialTypeParam\");\n\n    default:\n      if (this.state.type.keyword === \"typeof\") {\n        return this.flowParseTypeofType();\n      }\n  }\n\n  this.unexpected();\n};\n\npp$8.flowParsePostfixType = function () {\n  var startPos = this.state.start,\n      startLoc = this.state.startLoc;\n  var type = this.flowParsePrimaryType();\n  while (!this.canInsertSemicolon() && this.match(types.bracketL)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.elementType = type;\n    this.expect(types.bracketL);\n    this.expect(types.bracketR);\n    type = this.finishNode(node, \"ArrayTypeAnnotation\");\n  }\n  return type;\n};\n\npp$8.flowParsePrefixType = function () {\n  var node = this.startNode();\n  if (this.eat(types.question)) {\n    node.typeAnnotation = this.flowParsePrefixType();\n    return this.finishNode(node, \"NullableTypeAnnotation\");\n  } else {\n    return this.flowParsePostfixType();\n  }\n};\n\npp$8.flowParseAnonFunctionWithoutParens = function () {\n  var param = this.flowParsePrefixType();\n  if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n    var node = this.startNodeAt(param.start, param.loc.start);\n    node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n    node.rest = null;\n    node.returnType = this.flowParseType();\n    node.typeParameters = null;\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  return param;\n};\n\npp$8.flowParseIntersectionType = function () {\n  var node = this.startNode();\n  this.eat(types.bitwiseAND);\n  var type = this.flowParseAnonFunctionWithoutParens();\n  node.types = [type];\n  while (this.eat(types.bitwiseAND)) {\n    node.types.push(this.flowParseAnonFunctionWithoutParens());\n  }\n  return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n};\n\npp$8.flowParseUnionType = function () {\n  var node = this.startNode();\n  this.eat(types.bitwiseOR);\n  var type = this.flowParseIntersectionType();\n  node.types = [type];\n  while (this.eat(types.bitwiseOR)) {\n    node.types.push(this.flowParseIntersectionType());\n  }\n  return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n};\n\npp$8.flowParseType = function () {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  var type = this.flowParseUnionType();\n  this.state.inType = oldInType;\n  return type;\n};\n\npp$8.flowParseTypeAnnotation = function () {\n  var node = this.startNode();\n  node.typeAnnotation = this.flowParseTypeInitialiser();\n  return this.finishNode(node, \"TypeAnnotation\");\n};\n\npp$8.flowParseTypeAndPredicateAnnotation = function () {\n  var node = this.startNode();\n\n  var _flowParseTypeAndPred2 = this.flowParseTypeAndPredicateInitialiser();\n\n  node.typeAnnotation = _flowParseTypeAndPred2[0];\n  node.predicate = _flowParseTypeAndPred2[1];\n\n  return this.finishNode(node, \"TypeAnnotation\");\n};\n\npp$8.flowParseTypeAnnotatableIdentifier = function () {\n  var ident = this.flowParseRestrictedIdentifier();\n  if (this.match(types.colon)) {\n    ident.typeAnnotation = this.flowParseTypeAnnotation();\n    this.finishNode(ident, ident.type);\n  }\n  return ident;\n};\n\npp$8.typeCastToParameter = function (node) {\n  node.expression.typeAnnotation = node.typeAnnotation;\n\n  return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n};\n\npp$8.flowParseVariance = function () {\n  var variance = null;\n  if (this.match(types.plusMin)) {\n    if (this.state.value === \"+\") {\n      variance = \"plus\";\n    } else if (this.state.value === \"-\") {\n      variance = \"minus\";\n    }\n    this.next();\n  }\n  return variance;\n};\n\nvar flowPlugin = function (instance) {\n  // plain function return types: function name(): string {}\n  instance.extend(\"parseFunctionBody\", function (inner) {\n    return function (node, allowExpression) {\n      if (this.match(types.colon) && !allowExpression) {\n        // if allowExpression is true then we're parsing an arrow function and if\n        // there's a return type then it's been handled elsewhere\n        node.returnType = this.flowParseTypeAndPredicateAnnotation();\n      }\n\n      return inner.call(this, node, allowExpression);\n    };\n  });\n\n  // interfaces\n  instance.extend(\"parseStatement\", function (inner) {\n    return function (declaration, topLevel) {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        var node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else {\n        return inner.call(this, declaration, topLevel);\n      }\n    };\n  });\n\n  // declares, interfaces and type aliases\n  instance.extend(\"parseExpressionStatement\", function (inner) {\n    return function (node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return inner.call(this, node, expr);\n    };\n  });\n\n  // export type\n  instance.extend(\"shouldParseExportDeclaration\", function (inner) {\n    return function () {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || inner.call(this);\n    };\n  });\n\n  instance.extend(\"isExportDefaultSpecifier\", function (inner) {\n    return function () {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\")) {\n        return false;\n      }\n\n      return inner.call(this);\n    };\n  });\n\n  instance.extend(\"parseConditional\", function (inner) {\n    return function (expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos && this.match(types.question)) {\n        var state = this.state.clone();\n        try {\n          return inner.call(this, expr, noIn, startPos, startLoc);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n            refNeedsArrowPos.start = err.pos || this.state.start;\n            return expr;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return inner.call(this, expr, noIn, startPos, startLoc);\n    };\n  });\n\n  instance.extend(\"parseParenItem\", function (inner) {\n    return function (node, startPos, startLoc) {\n      node = inner.call(this, node, startPos, startLoc);\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        var typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseExport\", function (inner) {\n    return function (node) {\n      node = inner.call(this, node);\n      if (node.type === \"ExportNamedDeclaration\") {\n        node.exportKind = node.exportKind || \"value\";\n      }\n      return node;\n    };\n  });\n\n  instance.extend(\"parseExportDeclaration\", function (inner) {\n    return function (node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        var declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        var _declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(_declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        var _declarationNode2 = this.startNode();\n        this.next();\n        return this.flowParseInterface(_declarationNode2);\n      } else {\n        return inner.call(this, node);\n      }\n    };\n  });\n\n  instance.extend(\"parseClassId\", function (inner) {\n    return function (node) {\n      inner.apply(this, arguments);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    };\n  });\n\n  // don't consider `void` to be a keyword as then it'll use the void token type\n  // and set startExpr\n  instance.extend(\"isKeyword\", function (inner) {\n    return function (name) {\n      if (this.state.inType && name === \"void\") {\n        return false;\n      } else {\n        return inner.call(this, name);\n      }\n    };\n  });\n\n  // ensure that inside flow types, we bypass the jsx parser plugin\n  instance.extend(\"readToken\", function (inner) {\n    return function (code) {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else {\n        return inner.call(this, code);\n      }\n    };\n  });\n\n  // don't lex any token as a jsx one inside a flow type\n  instance.extend(\"jsx_readToken\", function (inner) {\n    return function () {\n      if (!this.state.inType) return inner.call(this);\n    };\n  });\n\n  instance.extend(\"toAssignable\", function (inner) {\n    return function (node, isBinding, contextDescription) {\n      if (node.type === \"TypeCastExpression\") {\n        return inner.call(this, this.typeCastToParameter(node), isBinding, contextDescription);\n      } else {\n        return inner.call(this, node, isBinding, contextDescription);\n      }\n    };\n  });\n\n  // turn type casts that we found in function parameter head into type annotated params\n  instance.extend(\"toAssignableList\", function (inner) {\n    return function (exprList, isBinding, contextDescription) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return inner.call(this, exprList, isBinding, contextDescription);\n    };\n  });\n\n  // this is a list of nodes, from something like a call expression, we need to filter the\n  // type casts that we've found that are illegal in this context\n  instance.extend(\"toReferencedList\", function () {\n    return function (exprList) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n        if (expr && expr._exprListItem && expr.type === \"TypeCastExpression\") {\n          this.raise(expr.start, \"Unexpected type cast\");\n        }\n      }\n\n      return exprList;\n    };\n  });\n\n  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents\n  // the position where this function is called\n  instance.extend(\"parseExprListItem\", function (inner) {\n    return function () {\n      var container = this.startNode();\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n      if (this.match(types.colon)) {\n        container._exprListItem = true;\n        container.expression = node;\n        container.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(container, \"TypeCastExpression\");\n      } else {\n        return node;\n      }\n    };\n  });\n\n  instance.extend(\"checkLVal\", function (inner) {\n    return function (node) {\n      if (node.type !== \"TypeCastExpression\") {\n        return inner.apply(this, arguments);\n      }\n    };\n  });\n\n  // parse class property type annotations\n  instance.extend(\"parseClassProperty\", function (inner) {\n    return function (node) {\n      delete node.variancePos;\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return inner.call(this, node);\n    };\n  });\n\n  // determine whether or not we're currently in the position where a class method would appear\n  instance.extend(\"isClassMethod\", function (inner) {\n    return function () {\n      return this.isRelational(\"<\") || inner.call(this);\n    };\n  });\n\n  // determine whether or not we're currently in the position where a class property would appear\n  instance.extend(\"isClassProperty\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n\n  instance.extend(\"isNonstaticConstructor\", function (inner) {\n    return function (method) {\n      return !this.match(types.colon) && inner.call(this, method);\n    };\n  });\n\n  // parse type parameters for class methods\n  instance.extend(\"parseClassMethod\", function (inner) {\n    return function (classBody, method) {\n      if (method.variance) {\n        this.unexpected(method.variancePos);\n      }\n      delete method.variance;\n      delete method.variancePos;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      inner.call.apply(inner, [this, classBody, method].concat(args));\n    };\n  });\n\n  // parse a the super class type parameters and implements\n  instance.extend(\"parseClassSuper\", function (inner) {\n    return function (node, isStatement) {\n      inner.call(this, node, isStatement);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        var implemented = node.implements = [];\n        do {\n          var _node = this.startNode();\n          _node.id = this.parseIdentifier();\n          if (this.isRelational(\"<\")) {\n            _node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            _node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(_node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    };\n  });\n\n  instance.extend(\"parsePropertyName\", function (inner) {\n    return function (node) {\n      var variancePos = this.state.start;\n      var variance = this.flowParseVariance();\n      var key = inner.call(this, node);\n      node.variance = variance;\n      node.variancePos = variancePos;\n      return key;\n    };\n  });\n\n  // parse type parameters for object method shorthand\n  instance.extend(\"parseObjPropValue\", function (inner) {\n    return function (prop) {\n      if (prop.variance) {\n        this.unexpected(prop.variancePos);\n      }\n      delete prop.variance;\n      delete prop.variancePos;\n\n      var typeParameters = void 0;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      inner.apply(this, arguments);\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    };\n  });\n\n  instance.extend(\"parseAssignableListItemTypes\", function () {\n    return function (param) {\n      if (this.eat(types.question)) {\n        param.optional = true;\n      }\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.finishNode(param, param.type);\n      return param;\n    };\n  });\n\n  instance.extend(\"parseMaybeDefault\", function (inner) {\n    return function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var node = inner.apply(this, args);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\");\n      }\n\n      return node;\n    };\n  });\n\n  // parse typeof and type imports\n  instance.extend(\"parseImportSpecifiers\", function (inner) {\n    return function (node) {\n      node.importKind = \"value\";\n\n      var kind = null;\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        var lh = this.lookahead();\n        if (lh.type === types.name && lh.value !== \"from\" || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      inner.call(this, node);\n    };\n  });\n\n  // parse import-type/typeof shorthand\n  instance.extend(\"parseImportSpecifier\", function () {\n    return function (node) {\n      var specifier = this.startNode();\n      var firstIdentLoc = this.state.start;\n      var firstIdent = this.parseIdentifier(true);\n\n      var specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      var isBinding = false;\n      if (this.isContextual(\"as\")) {\n        var as_ident = this.parseIdentifier(true);\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      if ((node.importKind === \"type\" || node.importKind === \"typeof\") && (specifier.importKind === \"type\" || specifier.importKind === \"typeof\")) {\n        this.raise(firstIdentLoc, \"`The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements`\");\n      }\n\n      if (isBinding) this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n\n      this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    };\n  });\n\n  // parse function type parameters - function foo<T>() {}\n  instance.extend(\"parseFunctionParams\", function (inner) {\n    return function (node) {\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      inner.call(this, node);\n    };\n  });\n\n  // parse flow type annotations on variable declarator heads - let foo: string = bar\n  instance.extend(\"parseVarHead\", function (inner) {\n    return function (decl) {\n      inner.call(this, decl);\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.finishNode(decl.id, decl.id.type);\n      }\n    };\n  });\n\n  // parse the return type of an async arrow function - let foo = (async (): number => {});\n  instance.extend(\"parseAsyncArrowFromCallExpression\", function (inner) {\n    return function (node, call) {\n      if (this.match(types.colon)) {\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return inner.call(this, node, call);\n    };\n  });\n\n  // todo description\n  instance.extend(\"shouldParseAsyncArrow\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n\n  // We need to support type parameter declarations for arrow functions. This\n  // is tricky. There are three situations we need to handle\n  //\n  // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n  //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n  //    error.\n  // 2. This is an arrow function. We'll parse the type parameter declaration,\n  //    parse the rest, make sure the rest is an arrow function, and go from\n  //    there\n  // 3. This is neither. Just call the inner function\n  instance.extend(\"parseMaybeAssign\", function (inner) {\n    return function () {\n      var jsxError = null;\n\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      if (types.jsxTagStart && this.match(types.jsxTagStart)) {\n        var state = this.state.clone();\n        try {\n          return inner.apply(this, args);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n\n            // Remove `tc.j_expr` and `tc.j_oTag` from context added\n            // by parsing `jsxTagStart` to stop the JSX plugin from\n            // messing with the tokens\n            this.state.context.length -= 2;\n\n            jsxError = err;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      if (jsxError != null || this.isRelational(\"<\")) {\n        var arrowExpression = void 0;\n        var typeParameters = void 0;\n        try {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          arrowExpression = inner.apply(this, args);\n          arrowExpression.typeParameters = typeParameters;\n          arrowExpression.start = typeParameters.start;\n          arrowExpression.loc.start = typeParameters.loc.start;\n        } catch (err) {\n          throw jsxError || err;\n        }\n\n        if (arrowExpression.type === \"ArrowFunctionExpression\") {\n          return arrowExpression;\n        } else if (jsxError != null) {\n          throw jsxError;\n        } else {\n          this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n        }\n      }\n\n      return inner.apply(this, args);\n    };\n  });\n\n  // handle return types for arrow functions\n  instance.extend(\"parseArrow\", function (inner) {\n    return function (node) {\n      if (this.match(types.colon)) {\n        var state = this.state.clone();\n        try {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          var returnType = this.flowParseTypeAndPredicateAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          // assign after it is clear it is an arrow\n          node.returnType = returnType;\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return inner.call(this, node);\n    };\n  });\n\n  instance.extend(\"shouldParseArrow\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n};\n\n// Adapted from String.fromcodepoint to export the function without modifying String\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\n\n// The MIT License (MIT)\n// Copyright (c) Mathias Bynens\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n// associated documentation files (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge, publish, distribute,\n// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or\n// substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar fromCodePoint = String.fromCodePoint;\n\nif (!fromCodePoint) {\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  fromCodePoint = function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate = void 0;\n    var lowSurrogate = void 0;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return \"\";\n    }\n    var result = \"\";\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 || // not a valid Unicode code point\n      codePoint > 0x10FFFF || // not a valid Unicode code point\n      floor(codePoint) != codePoint // not an integer\n      ) {\n          throw RangeError(\"Invalid code point: \" + codePoint);\n        }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = codePoint % 0x400 + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  };\n}\n\nvar fromCodePoint$1 = fromCodePoint;\n\nvar XHTMLEntities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  \"int\": \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\n\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(types$1.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  var out = this.state.context.pop();\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nvar pp$9 = Parser.prototype;\n\n// Reads inline JSX contents token.\n\npp$9.jsxReadToken = function () {\n  var out = \"\";\n  var chunkStart = this.state.pos;\n  for (;;) {\n    if (this.state.pos >= this.input.length) {\n      this.raise(this.state.start, \"Unterminated JSX contents\");\n    }\n\n    var ch = this.input.charCodeAt(this.state.pos);\n\n    switch (ch) {\n      case 60: // \"<\"\n      case 123:\n        // \"{\"\n        if (this.state.pos === this.state.start) {\n          if (ch === 60 && this.state.exprAllowed) {\n            ++this.state.pos;\n            return this.finishToken(types.jsxTagStart);\n          }\n          return this.getTokenFromCode(ch);\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        return this.finishToken(types.jsxText, out);\n\n      case 38:\n        // \"&\"\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n        break;\n\n      default:\n        if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(true);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n    }\n  }\n};\n\npp$9.jsxReadNewLine = function (normalizeCRLF) {\n  var ch = this.input.charCodeAt(this.state.pos);\n  var out = void 0;\n  ++this.state.pos;\n  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n    ++this.state.pos;\n    out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n  } else {\n    out = String.fromCharCode(ch);\n  }\n  ++this.state.curLine;\n  this.state.lineStart = this.state.pos;\n\n  return out;\n};\n\npp$9.jsxReadString = function (quote) {\n  var out = \"\";\n  var chunkStart = ++this.state.pos;\n  for (;;) {\n    if (this.state.pos >= this.input.length) {\n      this.raise(this.state.start, \"Unterminated string constant\");\n    }\n\n    var ch = this.input.charCodeAt(this.state.pos);\n    if (ch === quote) break;\n    if (ch === 38) {\n      // \"&\"\n      out += this.input.slice(chunkStart, this.state.pos);\n      out += this.jsxReadEntity();\n      chunkStart = this.state.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.state.pos);\n      out += this.jsxReadNewLine(false);\n      chunkStart = this.state.pos;\n    } else {\n      ++this.state.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.state.pos++);\n  return this.finishToken(types.string, out);\n};\n\npp$9.jsxReadEntity = function () {\n  var str = \"\";\n  var count = 0;\n  var entity = void 0;\n  var ch = this.input[this.state.pos];\n\n  var startPos = ++this.state.pos;\n  while (this.state.pos < this.input.length && count++ < 10) {\n    ch = this.input[this.state.pos++];\n    if (ch === \";\") {\n      if (str[0] === \"#\") {\n        if (str[1] === \"x\") {\n          str = str.substr(2);\n          if (HEX_NUMBER.test(str)) entity = fromCodePoint$1(parseInt(str, 16));\n        } else {\n          str = str.substr(1);\n          if (DECIMAL_NUMBER.test(str)) entity = fromCodePoint$1(parseInt(str, 10));\n        }\n      } else {\n        entity = XHTMLEntities[str];\n      }\n      break;\n    }\n    str += ch;\n  }\n  if (!entity) {\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  return entity;\n};\n\n// Read a JSX identifier (valid tag or attribute name).\n//\n// Optimized version since JSX identifiers can\"t contain\n// escape characters and so can be read as single slice.\n// Also assumes that first character was already checked\n// by isIdentifierStart in readToken.\n\npp$9.jsxReadWord = function () {\n  var ch = void 0;\n  var start = this.state.pos;\n  do {\n    ch = this.input.charCodeAt(++this.state.pos);\n  } while (isIdentifierChar(ch) || ch === 45); // \"-\"\n  return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n};\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n}\n\n// Parse next token as JSX identifier\n\npp$9.jsxParseIdentifier = function () {\n  var node = this.startNode();\n  if (this.match(types.jsxName)) {\n    node.name = this.state.value;\n  } else if (this.state.type.keyword) {\n    node.name = this.state.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"JSXIdentifier\");\n};\n\n// Parse namespaced identifier.\n\npp$9.jsxParseNamespacedName = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var name = this.jsxParseIdentifier();\n  if (!this.eat(types.colon)) return name;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.namespace = name;\n  node.name = this.jsxParseIdentifier();\n  return this.finishNode(node, \"JSXNamespacedName\");\n};\n\n// Parses element name in any form - namespaced, member\n// or single identifier.\n\npp$9.jsxParseElementName = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var node = this.jsxParseNamespacedName();\n  while (this.eat(types.dot)) {\n    var newNode = this.startNodeAt(startPos, startLoc);\n    newNode.object = node;\n    newNode.property = this.jsxParseIdentifier();\n    node = this.finishNode(newNode, \"JSXMemberExpression\");\n  }\n  return node;\n};\n\n// Parses any type of JSX attribute value.\n\npp$9.jsxParseAttributeValue = function () {\n  var node = void 0;\n  switch (this.state.type) {\n    case types.braceL:\n      node = this.jsxParseExpressionContainer();\n      if (node.expression.type === \"JSXEmptyExpression\") {\n        this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n      } else {\n        return node;\n      }\n\n    case types.jsxTagStart:\n    case types.string:\n      node = this.parseExprAtom();\n      node.extra = null;\n      return node;\n\n    default:\n      this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n  }\n};\n\n// JSXEmptyExpression is unique type since it doesn't actually parse anything,\n// and so it should start at the end of last read token (left brace) and finish\n// at the beginning of the next one (right brace).\n\npp$9.jsxParseEmptyExpression = function () {\n  var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n  return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n};\n\n// Parse JSX spread child\n\npp$9.jsxParseSpreadChild = function () {\n  var node = this.startNode();\n  this.expect(types.braceL);\n  this.expect(types.ellipsis);\n  node.expression = this.parseExpression();\n  this.expect(types.braceR);\n\n  return this.finishNode(node, \"JSXSpreadChild\");\n};\n\n// Parses JSX expression enclosed into curly brackets.\n\n\npp$9.jsxParseExpressionContainer = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.match(types.braceR)) {\n    node.expression = this.jsxParseEmptyExpression();\n  } else {\n    node.expression = this.parseExpression();\n  }\n  this.expect(types.braceR);\n  return this.finishNode(node, \"JSXExpressionContainer\");\n};\n\n// Parses following JSX attribute name-value pair.\n\npp$9.jsxParseAttribute = function () {\n  var node = this.startNode();\n  if (this.eat(types.braceL)) {\n    this.expect(types.ellipsis);\n    node.argument = this.parseMaybeAssign();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadAttribute\");\n  }\n  node.name = this.jsxParseNamespacedName();\n  node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n  return this.finishNode(node, \"JSXAttribute\");\n};\n\n// Parses JSX opening tag starting after \"<\".\n\npp$9.jsxParseOpeningElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.attributes = [];\n  node.name = this.jsxParseElementName();\n  while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n    node.attributes.push(this.jsxParseAttribute());\n  }\n  node.selfClosing = this.eat(types.slash);\n  this.expect(types.jsxTagEnd);\n  return this.finishNode(node, \"JSXOpeningElement\");\n};\n\n// Parses JSX closing tag starting after \"</\".\n\npp$9.jsxParseClosingElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.name = this.jsxParseElementName();\n  this.expect(types.jsxTagEnd);\n  return this.finishNode(node, \"JSXClosingElement\");\n};\n\n// Parses entire JSX element, including it\"s opening tag\n// (starting after \"<\"), attributes, contents and closing tag.\n\npp$9.jsxParseElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  var children = [];\n  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n  var closingElement = null;\n\n  if (!openingElement.selfClosing) {\n    contents: for (;;) {\n      switch (this.state.type) {\n        case types.jsxTagStart:\n          startPos = this.state.start;startLoc = this.state.startLoc;\n          this.next();\n          if (this.eat(types.slash)) {\n            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n            break contents;\n          }\n          children.push(this.jsxParseElementAt(startPos, startLoc));\n          break;\n\n        case types.jsxText:\n          children.push(this.parseExprAtom());\n          break;\n\n        case types.braceL:\n          if (this.lookahead().type === types.ellipsis) {\n            children.push(this.jsxParseSpreadChild());\n          } else {\n            children.push(this.jsxParseExpressionContainer());\n          }\n\n          break;\n\n        // istanbul ignore next - should never happen\n        default:\n          this.unexpected();\n      }\n    }\n\n    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n      this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n    }\n  }\n\n  node.openingElement = openingElement;\n  node.closingElement = closingElement;\n  node.children = children;\n  if (this.match(types.relational) && this.state.value === \"<\") {\n    this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n  }\n  return this.finishNode(node, \"JSXElement\");\n};\n\n// Parses entire JSX element from current position.\n\npp$9.jsxParseElement = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  this.next();\n  return this.jsxParseElementAt(startPos, startLoc);\n};\n\nvar jsxPlugin = function (instance) {\n  instance.extend(\"parseExprAtom\", function (inner) {\n    return function (refShortHandDefaultPos) {\n      if (this.match(types.jsxText)) {\n        var node = this.parseLiteral(this.state.value, \"JSXText\");\n        // https://github.com/babel/babel/issues/2078\n        node.extra = null;\n        return node;\n      } else if (this.match(types.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else {\n        return inner.call(this, refShortHandDefaultPos);\n      }\n    };\n  });\n\n  instance.extend(\"readToken\", function (inner) {\n    return function (code) {\n      if (this.state.inPropertyName) return inner.call(this, code);\n\n      var context = this.curContext();\n\n      if (context === types$1.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === types$1.j_oTag || context === types$1.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === 62) {\n          ++this.state.pos;\n          return this.finishToken(types.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (code === 60 && this.state.exprAllowed) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagStart);\n      }\n\n      return inner.call(this, code);\n    };\n  });\n\n  instance.extend(\"updateContext\", function (inner) {\n    return function (prevType) {\n      if (this.match(types.braceL)) {\n        var curContext = this.curContext();\n        if (curContext === types$1.j_oTag) {\n          this.state.context.push(types$1.braceExpression);\n        } else if (curContext === types$1.j_expr) {\n          this.state.context.push(types$1.templateQuasi);\n        } else {\n          inner.call(this, prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(types$1.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return inner.call(this, prevType);\n      }\n    };\n  });\n};\n\nplugins.estree = estreePlugin;\nplugins.flow = flowPlugin;\nplugins.jsx = jsxPlugin;\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse();\n}\n\nfunction parseExpression(input, options) {\n  var parser = new Parser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n"},"lineCount":7319}},"error":null,"hash":"f1e837d7afec8fd20eebbb70cbafb633","cacheData":{"env":{}}}